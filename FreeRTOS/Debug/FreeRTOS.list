
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008580  08008580  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008588  08008588  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008e4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000974  20000974  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ea1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004541  00000000  00000000  00041f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  000464a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001720  00000000  00000000  00047d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b93  00000000  00000000  00049488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec5a  00000000  00000000  0006d01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dabc2  00000000  00000000  0008bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00166837  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ae4  00000000  00000000  0016688c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800854c 	.word	0x0800854c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800854c 	.word	0x0800854c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80004d2:	4b7d      	ldr	r3, [pc, #500]	; (80006c8 <xTaskIncrementTick+0x200>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	f040 80ec 	bne.w	80006b4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80004dc:	4b7b      	ldr	r3, [pc, #492]	; (80006cc <xTaskIncrementTick+0x204>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80004e4:	4a79      	ldr	r2, [pc, #484]	; (80006cc <xTaskIncrementTick+0x204>)
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d120      	bne.n	8000532 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80004f0:	4b77      	ldr	r3, [pc, #476]	; (80006d0 <xTaskIncrementTick+0x208>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d00a      	beq.n	8000510 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fe:	f383 8811 	msr	BASEPRI, r3
 8000502:	f3bf 8f6f 	isb	sy
 8000506:	f3bf 8f4f 	dsb	sy
 800050a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800050c:	bf00      	nop
 800050e:	e7fe      	b.n	800050e <xTaskIncrementTick+0x46>
 8000510:	4b6f      	ldr	r3, [pc, #444]	; (80006d0 <xTaskIncrementTick+0x208>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	61fb      	str	r3, [r7, #28]
 8000516:	4b6f      	ldr	r3, [pc, #444]	; (80006d4 <xTaskIncrementTick+0x20c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a6d      	ldr	r2, [pc, #436]	; (80006d0 <xTaskIncrementTick+0x208>)
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	4a6d      	ldr	r2, [pc, #436]	; (80006d4 <xTaskIncrementTick+0x20c>)
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b6c      	ldr	r3, [pc, #432]	; (80006d8 <xTaskIncrementTick+0x210>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	4a6b      	ldr	r2, [pc, #428]	; (80006d8 <xTaskIncrementTick+0x210>)
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	f000 f93d 	bl	80007ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000532:	4b6a      	ldr	r3, [pc, #424]	; (80006dc <xTaskIncrementTick+0x214>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6a3a      	ldr	r2, [r7, #32]
 8000538:	429a      	cmp	r2, r3
 800053a:	f0c0 80a6 	bcc.w	800068a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800053e:	4b64      	ldr	r3, [pc, #400]	; (80006d0 <xTaskIncrementTick+0x208>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d104      	bne.n	8000552 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000548:	4b64      	ldr	r3, [pc, #400]	; (80006dc <xTaskIncrementTick+0x214>)
 800054a:	f04f 32ff 	mov.w	r2, #4294967295
 800054e:	601a      	str	r2, [r3, #0]
                    break;
 8000550:	e09b      	b.n	800068a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <xTaskIncrementTick+0x208>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	429a      	cmp	r2, r3
 8000568:	d203      	bcs.n	8000572 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800056a:	4a5c      	ldr	r2, [pc, #368]	; (80006dc <xTaskIncrementTick+0x214>)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000570:	e08b      	b.n	800068a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	69ba      	ldr	r2, [r7, #24]
 800057e:	68d2      	ldr	r2, [r2, #12]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	6892      	ldr	r2, [r2, #8]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	69bb      	ldr	r3, [r7, #24]
 8000592:	3304      	adds	r3, #4
 8000594:	429a      	cmp	r2, r3
 8000596:	d103      	bne.n	80005a0 <xTaskIncrementTick+0xd8>
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01e      	beq.n	80005f6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	6a12      	ldr	r2, [r2, #32]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	69d2      	ldr	r2, [r2, #28]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	685a      	ldr	r2, [r3, #4]
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	3318      	adds	r3, #24
 80005da:	429a      	cmp	r2, r3
 80005dc:	d103      	bne.n	80005e6 <xTaskIncrementTick+0x11e>
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	6a1a      	ldr	r2, [r3, #32]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	2200      	movs	r2, #0
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1e5a      	subs	r2, r3, #1
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fa:	2201      	movs	r2, #1
 80005fc:	409a      	lsls	r2, r3
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <xTaskIncrementTick+0x218>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4313      	orrs	r3, r2
 8000604:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <xTaskIncrementTick+0x218>)
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060c:	4935      	ldr	r1, [pc, #212]	; (80006e4 <xTaskIncrementTick+0x21c>)
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3304      	adds	r3, #4
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	3204      	adds	r2, #4
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	1d1a      	adds	r2, r3, #4
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4a26      	ldr	r2, [pc, #152]	; (80006e4 <xTaskIncrementTick+0x21c>)
 800064c:	441a      	add	r2, r3
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000656:	4923      	ldr	r1, [pc, #140]	; (80006e4 <xTaskIncrementTick+0x21c>)
 8000658:	4613      	mov	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	440b      	add	r3, r1
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	1c59      	adds	r1, r3, #1
 8000666:	481f      	ldr	r0, [pc, #124]	; (80006e4 <xTaskIncrementTick+0x21c>)
 8000668:	4613      	mov	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4403      	add	r3, r0
 8000672:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <xTaskIncrementTick+0x220>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	429a      	cmp	r2, r3
 8000680:	f4ff af5d 	bcc.w	800053e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8000684:	2301      	movs	r3, #1
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000688:	e759      	b.n	800053e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <xTaskIncrementTick+0x220>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000690:	4914      	ldr	r1, [pc, #80]	; (80006e4 <xTaskIncrementTick+0x21c>)
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	440b      	add	r3, r1
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d901      	bls.n	80006a6 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <xTaskIncrementTick+0x224>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
 80006b2:	e004      	b.n	80006be <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <xTaskIncrementTick+0x228>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <xTaskIncrementTick+0x228>)
 80006bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000134 	.word	0x20000134
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	20000114 	.word	0x20000114
 80006d4:	20000118 	.word	0x20000118
 80006d8:	2000012c 	.word	0x2000012c
 80006dc:	20000130 	.word	0x20000130
 80006e0:	20000120 	.word	0x20000120
 80006e4:	200000b0 	.word	0x200000b0
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	20000128 	.word	0x20000128
 80006f0:	20000124 	.word	0x20000124

080006f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80006f4:	b480      	push	{r7}
 80006f6:	b087      	sub	sp, #28
 80006f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80006fa:	4b27      	ldr	r3, [pc, #156]	; (8000798 <vTaskSwitchContext+0xa4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <vTaskSwitchContext+0xa8>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000708:	e03f      	b.n	800078a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <vTaskSwitchContext+0xa8>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <vTaskSwitchContext+0xac>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	f1c3 031f 	rsb	r3, r3, #31
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	491f      	ldr	r1, [pc, #124]	; (80007a4 <vTaskSwitchContext+0xb0>)
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10a      	bne.n	8000750 <vTaskSwitchContext+0x5c>
        __asm volatile
 800073a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073e:	f383 8811 	msr	BASEPRI, r3
 8000742:	f3bf 8f6f 	isb	sy
 8000746:	f3bf 8f4f 	dsb	sy
 800074a:	607b      	str	r3, [r7, #4]
    }
 800074c:	bf00      	nop
 800074e:	e7fe      	b.n	800074e <vTaskSwitchContext+0x5a>
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <vTaskSwitchContext+0xb0>)
 800075c:	4413      	add	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	3308      	adds	r3, #8
 8000772:	429a      	cmp	r2, r3
 8000774:	d104      	bne.n	8000780 <vTaskSwitchContext+0x8c>
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <vTaskSwitchContext+0xb4>)
 8000788:	6013      	str	r3, [r2, #0]
}
 800078a:	bf00      	nop
 800078c:	371c      	adds	r7, #28
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000134 	.word	0x20000134
 800079c:	20000128 	.word	0x20000128
 80007a0:	20000120 	.word	0x20000120
 80007a4:	200000b0 	.word	0x200000b0
 80007a8:	200000ac 	.word	0x200000ac

080007ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <prvResetNextTaskUnblockTime+0x30>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d104      	bne.n	80007c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <prvResetNextTaskUnblockTime+0x34>)
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80007c2:	e005      	b.n	80007d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <prvResetNextTaskUnblockTime+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <prvResetNextTaskUnblockTime+0x34>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000114 	.word	0x20000114
 80007e0:	20000130 	.word	0x20000130
	...

080007f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <pxCurrentTCBConst2>)
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	6808      	ldr	r0, [r1, #0]
 80007f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	f380 8809 	msr	PSP, r0
 80007fe:	f3bf 8f6f 	isb	sy
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	f380 8811 	msr	BASEPRI, r0
 800080a:	4770      	bx	lr
 800080c:	f3af 8000 	nop.w

08000810 <pxCurrentTCBConst2>:
 8000810:	200000ac 	.word	0x200000ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
	...

08000820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000820:	f3ef 8009 	mrs	r0, PSP
 8000824:	f3bf 8f6f 	isb	sy
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <pxCurrentTCBConst>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	f01e 0f10 	tst.w	lr, #16
 8000830:	bf08      	it	eq
 8000832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800083a:	6010      	str	r0, [r2, #0]
 800083c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000844:	f380 8811 	msr	BASEPRI, r0
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f7ff ff50 	bl	80006f4 <vTaskSwitchContext>
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	f380 8811 	msr	BASEPRI, r0
 800085c:	bc09      	pop	{r0, r3}
 800085e:	6819      	ldr	r1, [r3, #0]
 8000860:	6808      	ldr	r0, [r1, #0]
 8000862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000866:	f01e 0f10 	tst.w	lr, #16
 800086a:	bf08      	it	eq
 800086c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000870:	f380 8809 	msr	PSP, r0
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	f3af 8000 	nop.w

08000880 <pxCurrentTCBConst>:
 8000880:	200000ac 	.word	0x200000ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop

08000888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
        __asm volatile
 800088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000892:	f383 8811 	msr	BASEPRI, r3
 8000896:	f3bf 8f6f 	isb	sy
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	607b      	str	r3, [r7, #4]
    }
 80008a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80008a2:	f7ff fe11 	bl	80004c8 <xTaskIncrementTick>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SysTick_Handler+0x40>)
 80008ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80008be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	e000ed04 	.word	0xe000ed04

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 fc1c 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f80e 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f000 f90a 	bl	8000af0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008dc:	f000 f874 	bl	80009c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008e0:	f000 f8a0 	bl	8000a24 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e4:	f000 f8ce 	bl	8000a84 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008e8:	f007 fa16 	bl	8007d18 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80008ec:	f007 fa3a 	bl	8007d64 <MX_USB_HOST_Process>
 80008f0:	e7fc      	b.n	80008ec <main+0x20>
	...

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f007 fd44 	bl	8008390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0xcc>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <SystemClock_Config+0xcc>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <SystemClock_Config+0xcc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <SystemClock_Config+0xd0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <SystemClock_Config+0xd0>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <SystemClock_Config+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000964:	2308      	movs	r3, #8
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000968:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000972:	2307      	movs	r3, #7
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fa18 	bl	8003db0 <HAL_RCC_OscConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000986:	f000 f9c3 	bl	8000d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	2105      	movs	r1, #5
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fc79 	bl	80042a0 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009b4:	f000 f9ac 	bl	8000d10 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3750      	adds	r7, #80	; 0x50
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_I2C1_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x58>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a06:	f002 fbef 	bl	80031e8 <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 f97e 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000148 	.word	0x20000148
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	000186a0 	.word	0x000186a0

08000a24 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <MX_I2S3_Init+0x58>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <MX_I2S3_Init+0x5c>)
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2S3_Init+0x54>)
 8000a64:	f002 fd04 	bl	8003470 <HAL_I2S_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a6e:	f000 f94f 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001f4 	.word	0x200001f4
 8000a7c:	40003c00 	.word	0x40003c00
 8000a80:	00017700 	.word	0x00017700

08000a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f003 ff3d 	bl	8004954 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f000 f916 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000019c 	.word	0x2000019c
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a71      	ldr	r2, [pc, #452]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a6a      	ldr	r2, [pc, #424]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b68      	ldr	r3, [pc, #416]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a63      	ldr	r2, [pc, #396]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a5c      	ldr	r2, [pc, #368]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b5a      	ldr	r3, [pc, #360]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a55      	ldr	r2, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b53      	ldr	r3, [pc, #332]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <MX_GPIO_Init+0x1e4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4849      	ldr	r0, [pc, #292]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000bb4:	f000 fd8e 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4847      	ldr	r0, [pc, #284]	; (8000cdc <MX_GPIO_Init+0x1ec>)
 8000bbe:	f000 fd89 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bc8:	4845      	ldr	r0, [pc, #276]	; (8000ce0 <MX_GPIO_Init+0x1f0>)
 8000bca:	f000 fd83 	bl	80016d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	483c      	ldr	r0, [pc, #240]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000be6:	f000 fbd9 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4836      	ldr	r0, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x1ec>)
 8000c02:	f000 fbcb 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c06:	2308      	movs	r3, #8
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c16:	2305      	movs	r3, #5
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	482e      	ldr	r0, [pc, #184]	; (8000cdc <MX_GPIO_Init+0x1ec>)
 8000c22:	f000 fbbb 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482a      	ldr	r0, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0x1f4>)
 8000c3c:	f000 fbae 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c40:	2304      	movs	r3, #4
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0x1f8>)
 8000c54:	f000 fba2 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0x1f8>)
 8000c76:	f000 fb91 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c7a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c7e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_GPIO_Init+0x1f0>)
 8000c94:	f000 fb82 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c98:	2320      	movs	r3, #32
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_GPIO_Init+0x1f0>)
 8000cac:	f000 fb76 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0x1e8>)
 8000cc6:	f000 fb69 	bl	800139c <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfe:	f000 fa27 	bl	8001150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40001000 	.word	0x40001000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fae9 	bl	8001332 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12c      	bne.n	8000de8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000daa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <HAL_I2C_MspInit+0x8c>)
 8000dc8:	f000 fae8 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020400 	.word	0x40020400

08000dfc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_I2S_MspInit+0xf0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d15a      	bne.n	8000ee2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f003 fc49 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f7ff ff62 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_I2S_MspInit+0xf4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <HAL_I2S_MspInit+0xf8>)
 8000ebc:	f000 fa6e 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ec0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <HAL_I2S_MspInit+0xfc>)
 8000ede:	f000 fa5d 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3738      	adds	r7, #56	; 0x38
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40003c00 	.word	0x40003c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800

08000efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_SPI_MspInit+0x84>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_SPI_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f56:	23e0      	movs	r3, #224	; 0xe0
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f66:	2305      	movs	r3, #5
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_SPI_MspInit+0x8c>)
 8000f72:	f000 fa13 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40013000 	.word	0x40013000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2036      	movs	r0, #54	; 0x36
 8000fa2:	f000 f9d1 	bl	8001348 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fa6:	2036      	movs	r0, #54	; 0x36
 8000fa8:	f000 f9ea 	bl	8001380 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_InitTick+0xa4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <HAL_InitTick+0xa4>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_InitTick+0xa4>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fb4c 	bl	8004670 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fd8:	f003 fb36 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_InitTick+0xa8>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	3b01      	subs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_InitTick+0xac>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <HAL_InitTick+0xb0>)
 8000ff4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_InitTick+0xac>)
 8000ff8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ffc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_InitTick+0xac>)
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_InitTick+0xac>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_InitTick+0xac>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_InitTick+0xac>)
 8001012:	f003 fd28 	bl	8004a66 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <HAL_InitTick+0xac>)
 800101e:	f003 fd7b 	bl	8004b18 <HAL_TIM_Base_Start_IT>
 8001022:	4603      	mov	r3, r0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023800 	.word	0x40023800
 8001034:	431bde83 	.word	0x431bde83
 8001038:	2000023c 	.word	0x2000023c
 800103c:	40001000 	.word	0x40001000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM6_DAC_IRQHandler+0x10>)
 8001072:	f003 fdc1 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000023c 	.word	0x2000023c

08001080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <OTG_FS_IRQHandler+0x10>)
 8001086:	f000 fda9 	bl	8001bdc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000660 	.word	0x20000660

08001094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e2:	f7ff ffd7 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f007 f91f 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fbef 	bl	80008cc <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010fc:	08008590 	.word	0x08008590
  ldr r2, =_sbss
 8001100:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001104:	20000974 	.word	0x20000974

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_Init+0x40>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_Init+0x40>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x40>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f8fc 	bl	8001332 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff26 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fdec 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000284 	.word	0x20000284

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000284 	.word	0x20000284

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff4c 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135a:	f7ff ff61 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800135e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff ffb1 	bl	80012cc <NVIC_EncodePriority>
 800136a:	4602      	mov	r2, r0
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff80 	bl	8001278 <__NVIC_SetPriority>
}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff54 	bl	800123c <__NVIC_EnableIRQ>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e16b      	b.n	8001690 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 815a 	bne.w	800168a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d005      	beq.n	80013ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d130      	bne.n	8001450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d017      	beq.n	800148c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80b4 	beq.w	800168a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_GPIO_Init+0x310>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_GPIO_Init+0x314>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02b      	beq.n	80015c2 <HAL_GPIO_Init+0x226>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <HAL_GPIO_Init+0x318>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d025      	beq.n	80015be <HAL_GPIO_Init+0x222>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a50      	ldr	r2, [pc, #320]	; (80016b8 <HAL_GPIO_Init+0x31c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d01f      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <HAL_GPIO_Init+0x320>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x216>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4d      	ldr	r2, [pc, #308]	; (80016c4 <HAL_GPIO_Init+0x328>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x212>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x32c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4b      	ldr	r2, [pc, #300]	; (80016cc <HAL_GPIO_Init+0x330>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x20a>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00e      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015a6:	2308      	movs	r3, #8
 80015a8:	e00c      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015aa:	2306      	movs	r3, #6
 80015ac:	e00a      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015ae:	2305      	movs	r3, #5
 80015b0:	e008      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015b2:	2304      	movs	r3, #4
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e004      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e002      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <HAL_GPIO_Init+0x228>
 80015c2:	2300      	movs	r3, #0
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	4093      	lsls	r3, r2
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d4:	4935      	ldr	r1, [pc, #212]	; (80016ac <HAL_GPIO_Init+0x310>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_GPIO_Init+0x334>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001606:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_GPIO_Init+0x334>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165a:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_GPIO_Init+0x334>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_GPIO_Init+0x334>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b0f      	cmp	r3, #15
 8001694:	f67f ae90 	bls.w	80013b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021400 	.word	0x40021400
 80016c8:	40021800 	.word	0x40021800
 80016cc:	40021c00 	.word	0x40021c00
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001708:	b08f      	sub	sp, #60	; 0x3c
 800170a:	af0a      	add	r7, sp, #40	; 0x28
 800170c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e054      	b.n	80017c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f006 fb4e 	bl	8007dd4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fca4 	bl	80050a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
 800177a:	1d33      	adds	r3, r6, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f003 fc1e 	bl	8004fc0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fc9b 	bl	80050c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ae:	1d33      	adds	r3, r6, #4
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f003 fe02 	bl	80053bc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017ca:	b590      	push	{r4, r7, lr}
 80017cc:	b089      	sub	sp, #36	; 0x24
 80017ce:	af04      	add	r7, sp, #16
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	4608      	mov	r0, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	461a      	mov	r2, r3
 80017d8:	4603      	mov	r3, r0
 80017da:	70fb      	strb	r3, [r7, #3]
 80017dc:	460b      	mov	r3, r1
 80017de:	70bb      	strb	r3, [r7, #2]
 80017e0:	4613      	mov	r3, r2
 80017e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_HCD_HC_Init+0x28>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e076      	b.n	80018e0 <HAL_HCD_HC_Init+0x116>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333d      	adds	r3, #61	; 0x3d
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3338      	adds	r3, #56	; 0x38
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	212c      	movs	r1, #44	; 0x2c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3340      	adds	r3, #64	; 0x40
 800182c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800182e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3339      	adds	r3, #57	; 0x39
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333f      	adds	r3, #63	; 0x3f
 8001850:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001854:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	78ba      	ldrb	r2, [r7, #2]
 800185a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800185e:	b2d0      	uxtb	r0, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	333a      	adds	r3, #58	; 0x3a
 800186c:	4602      	mov	r2, r0
 800186e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001870:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001874:	2b00      	cmp	r3, #0
 8001876:	da09      	bge.n	800188c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	333b      	adds	r3, #59	; 0x3b
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e008      	b.n	800189e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	333b      	adds	r3, #59	; 0x3b
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	333c      	adds	r3, #60	; 0x3c
 80018ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	787c      	ldrb	r4, [r7, #1]
 80018b8:	78ba      	ldrb	r2, [r7, #2]
 80018ba:	78f9      	ldrb	r1, [r7, #3]
 80018bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	4623      	mov	r3, r4
 80018ce:	f003 feef 	bl	80056b0 <USB_HC_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_HCD_HC_Halt+0x1e>
 8001902:	2302      	movs	r3, #2
 8001904:	e00f      	b.n	8001926 <HAL_HCD_HC_Halt+0x3e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f92b 	bl	8005b72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	70fb      	strb	r3, [r7, #3]
 8001942:	460b      	mov	r3, r1
 8001944:	70bb      	strb	r3, [r7, #2]
 8001946:	4613      	mov	r3, r2
 8001948:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333b      	adds	r3, #59	; 0x3b
 8001958:	78ba      	ldrb	r2, [r7, #2]
 800195a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	333f      	adds	r3, #63	; 0x3f
 800196a:	787a      	ldrb	r2, [r7, #1]
 800196c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800196e:	7c3b      	ldrb	r3, [r7, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d112      	bne.n	800199a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2203      	movs	r2, #3
 8001984:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	333d      	adds	r3, #61	; 0x3d
 8001994:	7f3a      	ldrb	r2, [r7, #28]
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e008      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	212c      	movs	r1, #44	; 0x2c
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	3342      	adds	r3, #66	; 0x42
 80019a8:	2202      	movs	r2, #2
 80019aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	f200 80c6 	bhi.w	8001b40 <HAL_HCD_HC_SubmitRequest+0x210>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	08001b2d 	.word	0x08001b2d
 80019c4:	08001a31 	.word	0x08001a31
 80019c8:	08001aaf 	.word	0x08001aaf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019cc:	7c3b      	ldrb	r3, [r7, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	f040 80b8 	bne.w	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80b4 	bne.w	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019dc:	8b3b      	ldrh	r3, [r7, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d108      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3355      	adds	r3, #85	; 0x55
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3355      	adds	r3, #85	; 0x55
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a1a:	e093      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e089      	b.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a30:	78bb      	ldrb	r3, [r7, #2]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d11d      	bne.n	8001a72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3355      	adds	r3, #85	; 0x55
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3342      	adds	r3, #66	; 0x42
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a5c:	e073      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3342      	adds	r3, #66	; 0x42
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
      break;
 8001a70:	e069      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	212c      	movs	r1, #44	; 0x2c
 8001a78:	fb01 f303 	mul.w	r3, r1, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3354      	adds	r3, #84	; 0x54
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3342      	adds	r3, #66	; 0x42
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
      break;
 8001a98:	e055      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3342      	adds	r3, #66	; 0x42
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e04b      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11d      	bne.n	8001af0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3355      	adds	r3, #85	; 0x55
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ada:	e034      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3342      	adds	r3, #66	; 0x42
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	e02a      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3354      	adds	r3, #84	; 0x54
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	212c      	movs	r1, #44	; 0x2c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3342      	adds	r3, #66	; 0x42
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
      break;
 8001b16:	e016      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2202      	movs	r2, #2
 8001b28:	701a      	strb	r2, [r3, #0]
      break;
 8001b2a:	e00c      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	212c      	movs	r1, #44	; 0x2c
 8001b32:	fb01 f303 	mul.w	r3, r1, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	3342      	adds	r3, #66	; 0x42
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b40:	bf00      	nop
 8001b42:	e000      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3344      	adds	r3, #68	; 0x44
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	8b3a      	ldrh	r2, [r7, #24]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	202c      	movs	r0, #44	; 0x2c
 8001b60:	fb00 f303 	mul.w	r3, r0, r3
 8001b64:	440b      	add	r3, r1
 8001b66:	334c      	adds	r3, #76	; 0x4c
 8001b68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3360      	adds	r3, #96	; 0x60
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	3350      	adds	r3, #80	; 0x50
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3339      	adds	r3, #57	; 0x39
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3361      	adds	r3, #97	; 0x61
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	222c      	movs	r2, #44	; 0x2c
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	3338      	adds	r3, #56	; 0x38
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f003 fe7e 	bl	80058cc <USB_HC_StartXfer>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop

08001bdc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fba1 	bl	800533a <USB_GetMode>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 80f6 	bne.w	8001dec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f003 fb85 	bl	8005314 <USB_ReadInterrupts>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80ec 	beq.w	8001dea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fb7c 	bl	8005314 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fb6c 	bl	8005314 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c46:	d104      	bne.n	8001c52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fb5c 	bl	8005314 <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c66:	d104      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fb4c 	bl	8005314 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d103      	bne.n	8001c8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fb3e 	bl	8005314 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca2:	d11c      	bne.n	8001cde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	6938      	ldr	r0, [r7, #16]
 8001cc2:	f003 fa4d 	bl	8005160 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cc6:	6938      	ldr	r0, [r7, #16]
 8001cc8:	f003 fa6e 	bl	80051a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 fc26 	bl	8005524 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f006 f8f9 	bl	8007ed0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fb16 	bl	8005314 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf2:	d102      	bne.n	8001cfa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f001 fa03 	bl	8003100 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fb08 	bl	8005314 <USB_ReadInterrupts>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d106      	bne.n	8001d1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f006 f8c2 	bl	8007e98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2208      	movs	r2, #8
 8001d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 faf7 	bl	8005314 <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x158>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_HCD_IRQHandler+0x15a>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d012      	beq.n	8001d60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0210 	bic.w	r2, r2, #16
 8001d48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f001 f906 	bl	8002f5c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0210 	orr.w	r2, r2, #16
 8001d5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fad5 	bl	8005314 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d74:	d13a      	bne.n	8001dec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fee8 	bl	8005b50 <USB_HC_ReadInterrupt>
 8001d80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e025      	b.n	8001dd4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d018      	beq.n	8001dce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db2:	d106      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8ab 	bl	8001f16 <HCD_HC_IN_IRQHandler>
 8001dc0:	e005      	b.n	8001dce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fcc6 	bl	800275a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3d4      	bcc.n	8001d88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	e000      	b.n	8001dec <HAL_HCD_IRQHandler+0x210>
      return;
 8001dea:	bf00      	nop
    }
  }
}
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_HCD_Start+0x16>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e013      	b.n	8001e30 <HAL_HCD_Start+0x3e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fbe8 	bl	80055ec <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 f92e 	bl	8005082 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_HCD_Stop+0x16>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e00d      	b.n	8001e6a <HAL_HCD_Stop+0x32>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 ffe2 	bl	8005e24 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fb8a 	bl	8005598 <USB_ResetPort>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3360      	adds	r3, #96	; 0x60
 8001ea8:	781b      	ldrb	r3, [r3, #0]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	212c      	movs	r1, #44	; 0x2c
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	3350      	adds	r3, #80	; 0x50
 8001ed0:	681b      	ldr	r3, [r3, #0]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fbce 	bl	800568c <USB_GetCurrentFrame>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fba9 	bl	800565e <USB_GetHostSpeed>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d119      	bne.n	8001f7a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	2304      	movs	r3, #4
 8001f56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	0151      	lsls	r1, r2, #5
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	440a      	add	r2, r1
 8001f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	60d3      	str	r3, [r2, #12]
 8001f78:	e101      	b.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f90:	d12b      	bne.n	8001fea <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	0151      	lsls	r1, r2, #5
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	440a      	add	r2, r1
 8001fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fdc5 	bl	8005b72 <USB_HC_Halt>
 8001fe8:	e0c9      	b.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d109      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2320      	movs	r3, #32
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e0b4      	b.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d133      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	0151      	lsls	r1, r2, #5
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	440a      	add	r2, r1
 8002040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3361      	adds	r3, #97	; 0x61
 8002058:	2205      	movs	r2, #5
 800205a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	2310      	movs	r3, #16
 800206c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4413      	add	r3, r2
 8002076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207a:	461a      	mov	r2, r3
 800207c:	2308      	movs	r3, #8
 800207e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 fd71 	bl	8005b72 <USB_HC_Halt>
 8002090:	e075      	b.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a8:	d134      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3361      	adds	r3, #97	; 0x61
 80020d8:	2208      	movs	r2, #8
 80020da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e8:	461a      	mov	r2, r3
 80020ea:	2310      	movs	r3, #16
 80020ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	461a      	mov	r2, r3
 80020fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002100:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fd30 	bl	8005b72 <USB_HC_Halt>
 8002112:	e034      	b.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b80      	cmp	r3, #128	; 0x80
 8002128:	d129      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	0151      	lsls	r1, r2, #5
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	440a      	add	r2, r1
 8002140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	212c      	movs	r1, #44	; 0x2c
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	3361      	adds	r3, #97	; 0x61
 8002158:	2206      	movs	r2, #6
 800215a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fd03 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	461a      	mov	r2, r3
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002194:	d122      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	0151      	lsls	r1, r2, #5
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	440a      	add	r2, r1
 80021ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fcd6 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021da:	e2ba      	b.n	8002752 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	f040 811b 	bne.w	800242a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d019      	beq.n	8002230 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3348      	adds	r3, #72	; 0x48
 800220a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	0159      	lsls	r1, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	440b      	add	r3, r1
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	202c      	movs	r0, #44	; 0x2c
 8002226:	fb00 f303 	mul.w	r3, r0, r3
 800222a:	440b      	add	r3, r1
 800222c:	3350      	adds	r3, #80	; 0x50
 800222e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2301      	movs	r3, #1
 8002264:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	333f      	adds	r3, #63	; 0x3f
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	333f      	adds	r3, #63	; 0x3f
 8002288:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800228a:	2b02      	cmp	r3, #2
 800228c:	d121      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	0151      	lsls	r1, r2, #5
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	440a      	add	r2, r1
 80022a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fc5a 	bl	8005b72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	2310      	movs	r3, #16
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	e066      	b.n	80023a0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	333f      	adds	r3, #63	; 0x3f
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d127      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	0151      	lsls	r1, r2, #5
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	440a      	add	r2, r1
 80022fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002300:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002304:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	b2d9      	uxtb	r1, r3
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	202c      	movs	r0, #44	; 0x2c
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	4413      	add	r3, r2
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f005 fddc 	bl	8007eec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002334:	e034      	b.n	80023a0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	333f      	adds	r3, #63	; 0x3f
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12a      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3354      	adds	r3, #84	; 0x54
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2d8      	uxtb	r0, r3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3354      	adds	r3, #84	; 0x54
 8002380:	4602      	mov	r2, r0
 8002382:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b2d9      	uxtb	r1, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	202c      	movs	r0, #44	; 0x2c
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	4413      	add	r3, r2
 8002394:	3360      	adds	r3, #96	; 0x60
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f005 fda6 	bl	8007eec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d12b      	bne.n	8002400 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3348      	adds	r3, #72	; 0x48
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	202c      	movs	r0, #44	; 0x2c
 80023be:	fb00 f202 	mul.w	r2, r0, r2
 80023c2:	440a      	add	r2, r1
 80023c4:	3240      	adds	r2, #64	; 0x40
 80023c6:	8812      	ldrh	r2, [r2, #0]
 80023c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 81be 	beq.w	8002752 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3354      	adds	r3, #84	; 0x54
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f083 0301 	eor.w	r3, r3, #1
 80023ea:	b2d8      	uxtb	r0, r3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3354      	adds	r3, #84	; 0x54
 80023fa:	4602      	mov	r2, r0
 80023fc:	701a      	strb	r2, [r3, #0]
}
 80023fe:	e1a8      	b.n	8002752 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3354      	adds	r3, #84	; 0x54
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2d8      	uxtb	r0, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3354      	adds	r3, #84	; 0x54
 8002424:	4602      	mov	r2, r0
 8002426:	701a      	strb	r2, [r3, #0]
}
 8002428:	e193      	b.n	8002752 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	f040 8106 	bne.w	800264e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	0151      	lsls	r1, r2, #5
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	440a      	add	r2, r1
 8002458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245c:	f023 0302 	bic.w	r3, r3, #2
 8002460:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3361      	adds	r3, #97	; 0x61
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d109      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e0c9      	b.n	800261e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3361      	adds	r3, #97	; 0x61
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d109      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3360      	adds	r3, #96	; 0x60
 80024ac:	2205      	movs	r2, #5
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e0b5      	b.n	800261e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3361      	adds	r3, #97	; 0x61
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d009      	beq.n	80024da <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3361      	adds	r3, #97	; 0x61
 80024d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d150      	bne.n	800257c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	335c      	adds	r3, #92	; 0x5c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	202c      	movs	r0, #44	; 0x2c
 80024f2:	fb00 f303 	mul.w	r3, r0, r3
 80024f6:	440b      	add	r3, r1
 80024f8:	335c      	adds	r3, #92	; 0x5c
 80024fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	335c      	adds	r3, #92	; 0x5c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d912      	bls.n	8002536 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	2204      	movs	r2, #4
 8002532:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002534:	e073      	b.n	800261e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3360      	adds	r3, #96	; 0x60
 8002544:	2202      	movs	r2, #2
 8002546:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002566:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257a:	e050      	b.n	800261e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3361      	adds	r3, #97	; 0x61
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d122      	bne.n	80025d6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e023      	b.n	800261e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3361      	adds	r3, #97	; 0x61
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b07      	cmp	r3, #7
 80025e8:	d119      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	202c      	movs	r0, #44	; 0x2c
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	440b      	add	r3, r1
 8002608:	335c      	adds	r3, #92	; 0x5c
 800260a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3360      	adds	r3, #96	; 0x60
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	b2d9      	uxtb	r1, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	202c      	movs	r0, #44	; 0x2c
 800263a:	fb00 f303 	mul.w	r3, r0, r3
 800263e:	4413      	add	r3, r2
 8002640:	3360      	adds	r3, #96	; 0x60
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f005 fc50 	bl	8007eec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800264c:	e081      	b.n	8002752 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b10      	cmp	r3, #16
 8002662:	d176      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	333f      	adds	r3, #63	; 0x3f
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d121      	bne.n	80026bc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	335c      	adds	r3, #92	; 0x5c
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 fa5c 	bl	8005b72 <USB_HC_Halt>
 80026ba:	e041      	b.n	8002740 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	333f      	adds	r3, #63	; 0x3f
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	333f      	adds	r3, #63	; 0x3f
 80026de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d12d      	bne.n	8002740 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	335c      	adds	r3, #92	; 0x5c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d120      	bne.n	8002740 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3361      	adds	r3, #97	; 0x61
 800270c:	2203      	movs	r2, #3
 800270e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	0151      	lsls	r1, r2, #5
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	440a      	add	r2, r1
 8002726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fa19 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	461a      	mov	r2, r3
 800274e:	2310      	movs	r3, #16
 8002750:	6093      	str	r3, [r2, #8]
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b04      	cmp	r3, #4
 8002788:	d119      	bne.n	80027be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2304      	movs	r3, #4
 800279a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	0151      	lsls	r1, r2, #5
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	440a      	add	r2, r1
 80027b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027bc:	e3ca      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d13e      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2320      	movs	r3, #32
 80027e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	f040 83ac 	bne.w	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	333d      	adds	r3, #61	; 0x3d
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3360      	adds	r3, #96	; 0x60
 800281c:	2202      	movs	r2, #2
 800281e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	0151      	lsls	r1, r2, #5
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	440a      	add	r2, r1
 8002836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f003 f991 	bl	8005b72 <USB_HC_Halt>
}
 8002850:	e380      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d122      	bne.n	80028b0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	440a      	add	r2, r1
 8002880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f003 f96c 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ac:	6093      	str	r3, [r2, #8]
}
 80028ae:	e351      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d150      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	335c      	adds	r3, #92	; 0x5c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b40      	cmp	r3, #64	; 0x40
 80028ec:	d111      	bne.n	8002912 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	0151      	lsls	r1, r2, #5
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	440a      	add	r2, r1
 8002928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f003 f918 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	461a      	mov	r2, r3
 8002950:	2301      	movs	r3, #1
 8002952:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	e2f5      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297a:	2b40      	cmp	r3, #64	; 0x40
 800297c:	d13c      	bne.n	80029f8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	3361      	adds	r3, #97	; 0x61
 800298c:	2204      	movs	r2, #4
 800298e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	333d      	adds	r3, #61	; 0x3d
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	335c      	adds	r3, #92	; 0x5c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	0151      	lsls	r1, r2, #5
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	440a      	add	r2, r1
 80029ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	4611      	mov	r1, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 f8c7 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	461a      	mov	r2, r3
 80029f2:	2340      	movs	r3, #64	; 0x40
 80029f4:	6093      	str	r3, [r2, #8]
}
 80029f6:	e2ad      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d12a      	bne.n	8002a64 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 f891 	bl	8005b72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3361      	adds	r3, #97	; 0x61
 8002a5e:	2205      	movs	r2, #5
 8002a60:	701a      	strb	r2, [r3, #0]
}
 8002a62:	e277      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d150      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	335c      	adds	r3, #92	; 0x5c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	333d      	adds	r3, #61	; 0x3d
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d112      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	333c      	adds	r3, #60	; 0x3c
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d108      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	333d      	adds	r3, #61	; 0x3d
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 f835 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2310      	movs	r3, #16
 8002b18:	6093      	str	r3, [r2, #8]
}
 8002b1a:	e21b      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d174      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3361      	adds	r3, #97	; 0x61
 8002b48:	2206      	movs	r2, #6
 8002b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fffb 	bl	8005b72 <USB_HC_Halt>
 8002b7c:	e044      	b.n	8002c08 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	335c      	adds	r3, #92	; 0x5c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	202c      	movs	r0, #44	; 0x2c
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	335c      	adds	r3, #92	; 0x5c
 8002b9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d920      	bls.n	8002bf6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	335c      	adds	r3, #92	; 0x5c
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3360      	adds	r3, #96	; 0x60
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	b2d9      	uxtb	r1, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	202c      	movs	r0, #44	; 0x2c
 8002be2:	fb00 f303 	mul.w	r3, r0, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3360      	adds	r3, #96	; 0x60
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f005 f97c 	bl	8007eec <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bf4:	e008      	b.n	8002c08 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	2202      	movs	r2, #2
 8002c06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	6093      	str	r3, [r2, #8]
}
 8002c1a:	e19b      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d134      	bne.n	8002c9e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 ff87 	bl	8005b72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	461a      	mov	r2, r3
 8002c72:	2310      	movs	r3, #16
 8002c74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3361      	adds	r3, #97	; 0x61
 8002c98:	2208      	movs	r2, #8
 8002c9a:	701a      	strb	r2, [r3, #0]
}
 8002c9c:	e15a      	b.n	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f040 814f 	bne.w	8002f54 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd0:	f023 0302 	bic.w	r3, r3, #2
 8002cd4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3361      	adds	r3, #97	; 0x61
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d17d      	bne.n	8002de6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	333f      	adds	r3, #63	; 0x3f
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d00a      	beq.n	8002d26 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	f040 8100 	bne.w	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d113      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3355      	adds	r3, #85	; 0x55
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2d8      	uxtb	r0, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3355      	adds	r3, #85	; 0x55
 8002d52:	4602      	mov	r2, r0
 8002d54:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	f040 80e3 	bne.w	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	334c      	adds	r3, #76	; 0x4c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80d8 	beq.w	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	334c      	adds	r3, #76	; 0x4c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f202 	mul.w	r2, r0, r2
 8002d90:	440a      	add	r2, r1
 8002d92:	3240      	adds	r2, #64	; 0x40
 8002d94:	8812      	ldrh	r2, [r2, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f202 	mul.w	r2, r0, r2
 8002da4:	440a      	add	r2, r1
 8002da6:	3240      	adds	r2, #64	; 0x40
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b5 	beq.w	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3355      	adds	r3, #85	; 0x55
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2d8      	uxtb	r0, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3355      	adds	r3, #85	; 0x55
 8002de0:	4602      	mov	r2, r0
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e09f      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3361      	adds	r3, #97	; 0x61
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d109      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	2202      	movs	r2, #2
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e08b      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3361      	adds	r3, #97	; 0x61
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d109      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e077      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3361      	adds	r3, #97	; 0x61
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d109      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	2205      	movs	r2, #5
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e063      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3361      	adds	r3, #97	; 0x61
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d009      	beq.n	8002e86 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3361      	adds	r3, #97	; 0x61
 8002e80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d14f      	bne.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	202c      	movs	r0, #44	; 0x2c
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	335c      	adds	r3, #92	; 0x5c
 8002ea6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	335c      	adds	r3, #92	; 0x5c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d912      	bls.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3360      	adds	r3, #96	; 0x60
 8002edc:	2204      	movs	r2, #4
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e021      	b.n	8002f26 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3360      	adds	r3, #96	; 0x60
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f0a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f12:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	2302      	movs	r3, #2
 8002f36:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	b2d9      	uxtb	r1, r3
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	202c      	movs	r0, #44	; 0x2c
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f004 ffcc 	bl	8007eec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	0c5b      	lsrs	r3, r3, #17
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f90:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d004      	beq.n	8002fa2 <HCD_RXQLVL_IRQHandler+0x46>
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	f000 80a9 	beq.w	80030f2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fa0:	e0aa      	b.n	80030f8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a6 	beq.w	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3344      	adds	r3, #68	; 0x44
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 809b 	beq.w	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3350      	adds	r3, #80	; 0x50
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	441a      	add	r2, r3
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	202c      	movs	r0, #44	; 0x2c
 8002fda:	fb00 f303 	mul.w	r3, r0, r3
 8002fde:	440b      	add	r3, r1
 8002fe0:	334c      	adds	r3, #76	; 0x4c
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d87a      	bhi.n	80030de <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3344      	adds	r3, #68	; 0x44
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	b292      	uxth	r2, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f002 f92f 	bl	8005264 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3344      	adds	r3, #68	; 0x44
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	441a      	add	r2, r3
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	202c      	movs	r0, #44	; 0x2c
 8003020:	fb00 f303 	mul.w	r3, r0, r3
 8003024:	440b      	add	r3, r1
 8003026:	3344      	adds	r3, #68	; 0x44
 8003028:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3350      	adds	r3, #80	; 0x50
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	441a      	add	r2, r3
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	202c      	movs	r0, #44	; 0x2c
 8003044:	fb00 f303 	mul.w	r3, r0, r3
 8003048:	440b      	add	r3, r1
 800304a:	3350      	adds	r3, #80	; 0x50
 800304c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	0cdb      	lsrs	r3, r3, #19
 800305e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003062:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3340      	adds	r3, #64	; 0x40
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4293      	cmp	r3, r2
 800307a:	d13c      	bne.n	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d039      	beq.n	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003098:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3354      	adds	r3, #84	; 0x54
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3354      	adds	r3, #84	; 0x54
 80030d8:	4602      	mov	r2, r0
 80030da:	701a      	strb	r2, [r3, #0]
      break;
 80030dc:	e00b      	b.n	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	212c      	movs	r1, #44	; 0x2c
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	4413      	add	r3, r2
 80030ea:	3360      	adds	r3, #96	; 0x60
 80030ec:	2204      	movs	r2, #4
 80030ee:	701a      	strb	r2, [r3, #0]
      break;
 80030f0:	e001      	b.n	80030f6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030f6:	bf00      	nop
  }
}
 80030f8:	bf00      	nop
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800312c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	d10b      	bne.n	8003150 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f004 feb6 	bl	8007eb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d132      	bne.n	80031c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f043 0308 	orr.w	r3, r3, #8
 8003160:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d126      	bne.n	80031ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d113      	bne.n	800319c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800317a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800317e:	d106      	bne.n	800318e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f002 f9cc 	bl	8005524 <USB_InitFSLSPClkSel>
 800318c:	e011      	b.n	80031b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2101      	movs	r1, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f002 f9c5 	bl	8005524 <USB_InitFSLSPClkSel>
 800319a:	e00a      	b.n	80031b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031aa:	461a      	mov	r2, r3
 80031ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f004 fea8 	bl	8007f08 <HAL_HCD_PortEnabled_Callback>
 80031b8:	e002      	b.n	80031c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f004 feb2 	bl	8007f24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d103      	bne.n	80031d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f043 0320 	orr.w	r3, r3, #32
 80031d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6013      	str	r3, [r2, #0]
}
 80031de:	bf00      	nop
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e12b      	b.n	8003452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fdac 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800324a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800324c:	f001 f9fc 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8003250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a81      	ldr	r2, [pc, #516]	; (800345c <HAL_I2C_Init+0x274>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d807      	bhi.n	800326c <HAL_I2C_Init+0x84>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a80      	ldr	r2, [pc, #512]	; (8003460 <HAL_I2C_Init+0x278>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e006      	b.n	800327a <HAL_I2C_Init+0x92>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a7d      	ldr	r2, [pc, #500]	; (8003464 <HAL_I2C_Init+0x27c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0e7      	b.n	8003452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a78      	ldr	r2, [pc, #480]	; (8003468 <HAL_I2C_Init+0x280>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0c9b      	lsrs	r3, r3, #18
 800328c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_I2C_Init+0x274>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d802      	bhi.n	80032bc <HAL_I2C_Init+0xd4>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3301      	adds	r3, #1
 80032ba:	e009      	b.n	80032d0 <HAL_I2C_Init+0xe8>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	4a69      	ldr	r2, [pc, #420]	; (800346c <HAL_I2C_Init+0x284>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	3301      	adds	r3, #1
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	495c      	ldr	r1, [pc, #368]	; (800345c <HAL_I2C_Init+0x274>)
 80032ec:	428b      	cmp	r3, r1
 80032ee:	d819      	bhi.n	8003324 <HAL_I2C_Init+0x13c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1e59      	subs	r1, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003304:	400b      	ands	r3, r1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_I2C_Init+0x138>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1e59      	subs	r1, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fbb1 f3f3 	udiv	r3, r1, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331e:	e051      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 8003320:	2304      	movs	r3, #4
 8003322:	e04f      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d111      	bne.n	8003350 <HAL_I2C_Init+0x168>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	440b      	add	r3, r1
 800333a:	fbb0 f3f3 	udiv	r3, r0, r3
 800333e:	3301      	adds	r3, #1
 8003340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e012      	b.n	8003376 <HAL_I2C_Init+0x18e>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Init+0x196>
 800337a:	2301      	movs	r3, #1
 800337c:	e022      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10e      	bne.n	80033a4 <HAL_I2C_Init+0x1bc>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1e58      	subs	r0, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	440b      	add	r3, r1
 8003394:	fbb0 f3f3 	udiv	r3, r0, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a2:	e00f      	b.n	80033c4 <HAL_I2C_Init+0x1dc>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	0099      	lsls	r1, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6911      	ldr	r1, [r2, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68d2      	ldr	r2, [r2, #12]
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	000186a0 	.word	0x000186a0
 8003460:	001e847f 	.word	0x001e847f
 8003464:	003d08ff 	.word	0x003d08ff
 8003468:	431bde83 	.word	0x431bde83
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e128      	b.n	80036d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a90      	ldr	r2, [pc, #576]	; (80036dc <HAL_I2S_Init+0x26c>)
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fcad 	bl	8000dfc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034b8:	f023 030f 	bic.w	r3, r3, #15
 80034bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2202      	movs	r2, #2
 80034c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d060      	beq.n	8003590 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034d6:	2310      	movs	r3, #16
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e001      	b.n	80034e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d802      	bhi.n	80034ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f001 f9d2 	bl	8004898 <HAL_RCCEx_GetPeriphCLKFreq>
 80034f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d125      	bne.n	800354c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	3305      	adds	r3, #5
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	e01f      	b.n	800356a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	fbb2 f2f3 	udiv	r2, r2, r3
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	3305      	adds	r3, #5
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e00e      	b.n	800356a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	3305      	adds	r3, #5
 8003568:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a5c      	ldr	r2, [pc, #368]	; (80036e0 <HAL_I2S_Init+0x270>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	08db      	lsrs	r3, r3, #3
 8003574:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e003      	b.n	8003598 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003590:	2302      	movs	r3, #2
 8003592:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d902      	bls.n	80035a4 <HAL_I2S_Init+0x134>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2bff      	cmp	r3, #255	; 0xff
 80035a2:	d907      	bls.n	80035b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e08f      	b.n	80036d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	ea42 0103 	orr.w	r1, r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035d2:	f023 030f 	bic.w	r3, r3, #15
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6851      	ldr	r1, [r2, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	4311      	orrs	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68d2      	ldr	r2, [r2, #12]
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6992      	ldr	r2, [r2, #24]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d161      	bne.n	80036c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_I2S_Init+0x274>)
 8003604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a37      	ldr	r2, [pc, #220]	; (80036e8 <HAL_I2S_Init+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_I2S_Init+0x1a4>
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003612:	e001      	b.n	8003618 <HAL_I2S_Init+0x1a8>
 8003614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4932      	ldr	r1, [pc, #200]	; (80036e8 <HAL_I2S_Init+0x278>)
 8003620:	428a      	cmp	r2, r1
 8003622:	d101      	bne.n	8003628 <HAL_I2S_Init+0x1b8>
 8003624:	4a31      	ldr	r2, [pc, #196]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003626:	e001      	b.n	800362c <HAL_I2S_Init+0x1bc>
 8003628:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800362c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003630:	f023 030f 	bic.w	r3, r3, #15
 8003634:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <HAL_I2S_Init+0x278>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_I2S_Init+0x1d4>
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003642:	e001      	b.n	8003648 <HAL_I2S_Init+0x1d8>
 8003644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003648:	2202      	movs	r2, #2
 800364a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_I2S_Init+0x278>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_I2S_Init+0x1ea>
 8003656:	4b25      	ldr	r3, [pc, #148]	; (80036ec <HAL_I2S_Init+0x27c>)
 8003658:	e001      	b.n	800365e <HAL_I2S_Init+0x1ee>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366a:	d003      	beq.n	8003674 <HAL_I2S_Init+0x204>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d103      	bne.n	800367c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	e001      	b.n	8003680 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800368a:	4313      	orrs	r3, r2
 800368c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003694:	4313      	orrs	r3, r2
 8003696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800369e:	4313      	orrs	r3, r2
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_I2S_Init+0x278>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_I2S_Init+0x24c>
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_I2S_Init+0x27c>)
 80036ba:	e001      	b.n	80036c0 <HAL_I2S_Init+0x250>
 80036bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c0:	897a      	ldrh	r2, [r7, #10]
 80036c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3720      	adds	r7, #32
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	080037e7 	.word	0x080037e7
 80036e0:	cccccccd 	.word	0xcccccccd
 80036e4:	080038fd 	.word	0x080038fd
 80036e8:	40003800 	.word	0x40003800
 80036ec:	40003400 	.word	0x40003400

080036f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003770:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffb8 	bl	80036f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	b292      	uxth	r2, r2
 800379c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff93 	bl	8003704 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d13a      	bne.n	8003878 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d109      	bne.n	8003820 <I2S_IRQHandler+0x3a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d102      	bne.n	8003820 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ffb4 	bl	8003788 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d126      	bne.n	8003878 <I2S_IRQHandler+0x92>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b20      	cmp	r3, #32
 8003836:	d11f      	bne.n	8003878 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003846:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff50 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d136      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d109      	bne.n	80038a2 <I2S_IRQHandler+0xbc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d102      	bne.n	80038a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff45 	bl	800372c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d122      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d11b      	bne.n	80038f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff13 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4aa2      	ldr	r2, [pc, #648]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003916:	4ba2      	ldr	r3, [pc, #648]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003918:	e001      	b.n	800391e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a9b      	ldr	r2, [pc, #620]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003934:	4b9a      	ldr	r3, [pc, #616]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003936:	e001      	b.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003948:	d004      	beq.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8099 	bne.w	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f925 	bl	8003bb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9c8 	bl	8003d18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d13a      	bne.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d035      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7e      	ldr	r2, [pc, #504]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d101      	bne.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039a6:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a8:	e001      	b.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4979      	ldr	r1, [pc, #484]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b6:	428b      	cmp	r3, r1
 80039b8:	d101      	bne.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ba:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039bc:	e001      	b.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f043 0202 	orr.w	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe88 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	f040 80be 	bne.w	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80b8 	beq.w	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a59      	ldr	r2, [pc, #356]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a3a:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3c:	e001      	b.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4954      	ldr	r1, [pc, #336]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4a:	428b      	cmp	r3, r1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fe4a 	bl	8003718 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a84:	e084      	b.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d107      	bne.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8be 	bl	8003c1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8fd 	bl	8003cb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d12f      	bne.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02a      	beq.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003adc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aea:	e001      	b.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4929      	ldr	r1, [pc, #164]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af8:	428b      	cmp	r3, r1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fdfa 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d131      	bne.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02c      	beq.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4912      	ldr	r1, [pc, #72]	; (8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b52:	428b      	cmp	r3, r1
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b72:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdc5 	bl	8003718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8e:	e000      	b.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b90:	bf00      	nop
}
 8003b92:	bf00      	nop
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40003800 	.word	0x40003800
 8003ba0:	40003400 	.word	0x40003400

08003ba4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c99      	adds	r1, r3, #2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d113      	bne.n	8003c12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ffc9 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c99      	adds	r1, r3, #2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c2e:	8819      	ldrh	r1, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <I2SEx_TxISR_I2SExt+0x22>
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c3c:	e001      	b.n	8003c42 <I2SEx_TxISR_I2SExt+0x26>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	460a      	mov	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <I2SEx_TxISR_I2SExt+0x50>
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_TxISR_I2SExt+0x54>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <I2SEx_TxISR_I2SExt+0x90>)
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_TxISR_I2SExt+0x64>
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_TxISR_I2SExt+0x68>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff81 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40003800 	.word	0x40003800
 8003cb0:	40003400 	.word	0x40003400

08003cb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68d8      	ldr	r0, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	1c99      	adds	r1, r3, #2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ccc:	b282      	uxth	r2, r0
 8003cce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d113      	bne.n	8003d10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff4a 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <I2SEx_RxISR_I2SExt+0x16>
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d2c:	e001      	b.n	8003d32 <I2SEx_RxISR_I2SExt+0x1a>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d32:	68d8      	ldr	r0, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	1c99      	adds	r1, r3, #2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d3e:	b282      	uxth	r2, r0
 8003d40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <I2SEx_RxISR_I2SExt+0x50>
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d66:	e001      	b.n	8003d6c <I2SEx_RxISR_I2SExt+0x54>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	490d      	ldr	r1, [pc, #52]	; (8003da8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d101      	bne.n	8003d7c <I2SEx_RxISR_I2SExt+0x64>
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <I2SEx_RxISR_I2SExt+0x94>)
 8003d7a:	e001      	b.n	8003d80 <I2SEx_RxISR_I2SExt+0x68>
 8003d7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff03 	bl	8003ba4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40003800 	.word	0x40003800
 8003dac:	40003400 	.word	0x40003400

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e264      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	4ba3      	ldr	r3, [pc, #652]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4ba0      	ldr	r3, [pc, #640]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b9d      	ldr	r3, [pc, #628]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b99      	ldr	r3, [pc, #612]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e23f      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b91      	ldr	r3, [pc, #580]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a90      	ldr	r2, [pc, #576]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b8b      	ldr	r3, [pc, #556]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a8a      	ldr	r2, [pc, #552]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b88      	ldr	r3, [pc, #544]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a87      	ldr	r2, [pc, #540]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b84      	ldr	r3, [pc, #528]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a83      	ldr	r2, [pc, #524]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b81      	ldr	r3, [pc, #516]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a80      	ldr	r2, [pc, #512]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fd f986 	bl	8001178 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fd f982 	bl	8001178 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e204      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b76      	ldr	r3, [pc, #472]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd f972 	bl	8001178 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fd f96e 	bl	8001178 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1f0      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c4      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b56      	ldr	r3, [pc, #344]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4952      	ldr	r1, [pc, #328]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fd f927 	bl	8001178 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fd f923 	bl	8001178 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a5      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4940      	ldr	r1, [pc, #256]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <HAL_RCC_OscConfig+0x2b0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fd f906 	bl	8001178 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fd f902 	bl	8001178 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e184      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d030      	beq.n	8003ffc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fd f8e6 	bl	8001178 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fd f8e2 	bl	8001178 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e164      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b26      	ldr	r3, [pc, #152]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e015      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_OscConfig+0x2b4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f8cf 	bl	8001178 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fd f8cb 	bl	8001178 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e14d      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400e:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_RCC_OscConfig+0x2ac>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004036:	2301      	movs	r3, #1
 8004038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d121      	bne.n	800408a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <HAL_RCC_OscConfig+0x2b8>)
 800404c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004052:	f7fd f891 	bl	8001178 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004058:	e011      	b.n	800407e <HAL_RCC_OscConfig+0x2ce>
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	42470000 	.word	0x42470000
 8004064:	42470e80 	.word	0x42470e80
 8004068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd f884 	bl	8001178 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e106      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b85      	ldr	r3, [pc, #532]	; (8004294 <HAL_RCC_OscConfig+0x4e4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2f0>
 8004092:	4b81      	ldr	r3, [pc, #516]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a80      	ldr	r2, [pc, #512]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
 800409e:	e01c      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCC_OscConfig+0x312>
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a7a      	ldr	r2, [pc, #488]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040ae:	f043 0304 	orr.w	r3, r3, #4
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	4b78      	ldr	r3, [pc, #480]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a77      	ldr	r2, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e00b      	b.n	80040da <HAL_RCC_OscConfig+0x32a>
 80040c2:	4b75      	ldr	r3, [pc, #468]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a74      	ldr	r2, [pc, #464]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	4b72      	ldr	r3, [pc, #456]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a71      	ldr	r2, [pc, #452]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	f023 0304 	bic.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d015      	beq.n	800410e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e2:	f7fd f849 	bl	8001178 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fd f845 	bl	8001178 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0c5      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b65      	ldr	r3, [pc, #404]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCC_OscConfig+0x33a>
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410e:	f7fd f833 	bl	8001178 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd f82f 	bl	8001178 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e0af      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a55      	ldr	r2, [pc, #340]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 809b 	beq.w	800428a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d05c      	beq.n	800421a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d141      	bne.n	80041ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fd f803 	bl	8001178 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fc ffff 	bl	8001178 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e081      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	4b43      	ldr	r3, [pc, #268]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	4937      	ldr	r1, [pc, #220]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fc ffd8 	bl	8001178 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fc ffd4 	bl	8001178 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e056      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x41c>
 80041ea:	e04e      	b.n	800428a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_OscConfig+0x4ec>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fc ffc1 	bl	8001178 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fc ffbd 	bl	8001178 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e03f      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420c:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <HAL_RCC_OscConfig+0x44a>
 8004218:	e037      	b.n	800428a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e032      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x4e8>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d028      	beq.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d121      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d11a      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800425c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425e:	4293      	cmp	r3, r2
 8004260:	d111      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d107      	bne.n	8004286 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d001      	beq.n	800428a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40007000 	.word	0x40007000
 8004298:	40023800 	.word	0x40023800
 800429c:	42470060 	.word	0x42470060

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cc      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90c      	bls.n	80042dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b65      	ldr	r3, [pc, #404]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b63      	ldr	r3, [pc, #396]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b8      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f4:	4b59      	ldr	r3, [pc, #356]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b50      	ldr	r3, [pc, #320]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	494d      	ldr	r1, [pc, #308]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d044      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	2b03      	cmp	r3, #3
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e067      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b37      	ldr	r3, [pc, #220]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4934      	ldr	r1, [pc, #208]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fc fef2 	bl	8001178 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fc feee 	bl	8001178 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b2b      	ldr	r3, [pc, #172]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20c      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b22      	ldr	r3, [pc, #136]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e032      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4916      	ldr	r1, [pc, #88]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	490e      	ldr	r1, [pc, #56]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004426:	f000 f821 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800442a:	4602      	mov	r2, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	490a      	ldr	r1, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	5ccb      	ldrb	r3, [r1, r3]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc fda0 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00
 800445c:	40023800 	.word	0x40023800
 8004460:	08008568 	.word	0x08008568
 8004464:	20000000 	.word	0x20000000
 8004468:	20000004 	.word	0x20000004

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	2300      	movs	r3, #0
 800447e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004484:	4b67      	ldr	r3, [pc, #412]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x40>
 8004490:	2b08      	cmp	r3, #8
 8004492:	f200 80bd 	bhi.w	8004610 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x34>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800449e:	e0b7      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b61      	ldr	r3, [pc, #388]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044a2:	60bb      	str	r3, [r7, #8]
       break;
 80044a4:	e0b7      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a6:	4b61      	ldr	r3, [pc, #388]	; (800462c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044a8:	60bb      	str	r3, [r7, #8]
      break;
 80044aa:	e0b4      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b6:	4b5b      	ldr	r3, [pc, #364]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d04d      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4b58      	ldr	r3, [pc, #352]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044d2:	f04f 0100 	mov.w	r1, #0
 80044d6:	ea02 0800 	and.w	r8, r2, r0
 80044da:	ea03 0901 	and.w	r9, r3, r1
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	014b      	lsls	r3, r1, #5
 80044ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f0:	0142      	lsls	r2, r0, #5
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	ebb0 0008 	subs.w	r0, r0, r8
 80044fa:	eb61 0109 	sbc.w	r1, r1, r9
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	018b      	lsls	r3, r1, #6
 8004508:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800450c:	0182      	lsls	r2, r0, #6
 800450e:	1a12      	subs	r2, r2, r0
 8004510:	eb63 0301 	sbc.w	r3, r3, r1
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	00d9      	lsls	r1, r3, #3
 800451e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004522:	00d0      	lsls	r0, r2, #3
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	eb12 0208 	adds.w	r2, r2, r8
 800452c:	eb43 0309 	adc.w	r3, r3, r9
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0259      	lsls	r1, r3, #9
 800453a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800453e:	0250      	lsls	r0, r2, #9
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f7fb fe3e 	bl	80001d0 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e04a      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800455e:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	461a      	mov	r2, r3
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	ea02 0400 	and.w	r4, r2, r0
 8004576:	ea03 0501 	and.w	r5, r3, r1
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	014b      	lsls	r3, r1, #5
 8004588:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800458c:	0142      	lsls	r2, r0, #5
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	1b00      	subs	r0, r0, r4
 8004594:	eb61 0105 	sbc.w	r1, r1, r5
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	018b      	lsls	r3, r1, #6
 80045a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045a6:	0182      	lsls	r2, r0, #6
 80045a8:	1a12      	subs	r2, r2, r0
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	f04f 0100 	mov.w	r1, #0
 80045b6:	00d9      	lsls	r1, r3, #3
 80045b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045bc:	00d0      	lsls	r0, r2, #3
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	1912      	adds	r2, r2, r4
 80045c4:	eb45 0303 	adc.w	r3, r5, r3
 80045c8:	f04f 0000 	mov.w	r0, #0
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	0299      	lsls	r1, r3, #10
 80045d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045d6:	0290      	lsls	r0, r2, #10
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4610      	mov	r0, r2
 80045de:	4619      	mov	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f7fb fdf2 	bl	80001d0 <__aeabi_uldivmod>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	4613      	mov	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	00f42400 	.word	0x00f42400
 800462c:	007a1200 	.word	0x007a1200

08004630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCC_GetHCLKFreq+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000000 	.word	0x20000000

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800464c:	f7ff fff0 	bl	8004630 <HAL_RCC_GetHCLKFreq>
 8004650:	4602      	mov	r2, r0
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	0a9b      	lsrs	r3, r3, #10
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	4903      	ldr	r1, [pc, #12]	; (800466c <HAL_RCC_GetPCLK1Freq+0x24>)
 800465e:	5ccb      	ldrb	r3, [r1, r3]
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	08008578 	.word	0x08008578

08004670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	220f      	movs	r2, #15
 800467e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0203 	and.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_GetClockConfig+0x5c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <HAL_RCC_GetClockConfig+0x60>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0207 	and.w	r2, r3, #7
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40023c00 	.word	0x40023c00

080046d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d035      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046fc:	4b62      	ldr	r3, [pc, #392]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004702:	f7fc fd39 	bl	8001178 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800470a:	f7fc fd35 	bl	8001178 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0b0      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471c:	4b5b      	ldr	r3, [pc, #364]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	019a      	lsls	r2, r3, #6
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	071b      	lsls	r3, r3, #28
 8004734:	4955      	ldr	r1, [pc, #340]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800473c:	4b52      	ldr	r3, [pc, #328]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004742:	f7fc fd19 	bl	8001178 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800474a:	f7fc fd15 	bl	8001178 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e090      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8083 	beq.w	800487c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a43      	ldr	r2, [pc, #268]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004792:	4b3f      	ldr	r3, [pc, #252]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a3e      	ldr	r2, [pc, #248]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479e:	f7fc fceb 	bl	8001178 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fc fce7 	bl	8001178 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e062      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c4:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02f      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d028      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ec:	4b29      	ldr	r3, [pc, #164]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f2:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f8:	4a24      	ldr	r2, [pc, #144]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d114      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800480a:	f7fc fcb5 	bl	8001178 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fc fcb1 	bl	8001178 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e02a      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ee      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004840:	d10d      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004856:	490d      	ldr	r1, [pc, #52]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004864:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004868:	6093      	str	r3, [r2, #8]
 800486a:	4b08      	ldr	r3, [pc, #32]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	4905      	ldr	r1, [pc, #20]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	42470068 	.word	0x42470068
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000
 8004894:	42470e40 	.word	0x42470e40

08004898 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d13e      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048b6:	4b23      	ldr	r3, [pc, #140]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d12f      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048ce:	617b      	str	r3, [r7, #20]
          break;
 80048d0:	e02f      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d108      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e007      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004908:	099b      	lsrs	r3, r3, #6
 800490a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
          break;
 800492a:	e002      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
          break;
 8004930:	bf00      	nop
        }
      }
      break;
 8004932:	bf00      	nop
    }
  }
  return frequency;
 8004934:	697b      	ldr	r3, [r7, #20]
}
 8004936:	4618      	mov	r0, r3
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	00bb8000 	.word	0x00bb8000
 800494c:	007a1200 	.word	0x007a1200
 8004950:	00f42400 	.word	0x00f42400

08004954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e07b      	b.n	8004a5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d108      	bne.n	8004980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d009      	beq.n	800498c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
 800497e:	e005      	b.n	800498c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fc faa8 	bl	8000efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	ea42 0103 	orr.w	r1, r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 0104 	and.w	r1, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f003 0210 	and.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e041      	b.n	8004afc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f839 	bl	8004b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	f000 f9d7 	bl	8004e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e04e      	b.n	8004bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIM_Base_Start_IT+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0202 	mvn.w	r2, #2
 8004c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8ee 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8e0 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8f1 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8c4 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f8b6 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8c7 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0208 	mvn.w	r2, #8
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f89a 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f88c 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f89d 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d122      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d11b      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0210 	mvn.w	r2, #16
 8004d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2208      	movs	r2, #8
 8004d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f870 	bl	8004e1c <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f862 	bl	8004e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f873 	bl	8004e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0201 	mvn.w	r2, #1
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb ffb8 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d10e      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d107      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f902 	bl	8004fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f838 	bl	8004e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0220 	mvn.w	r2, #32
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8cc 	bl	8004f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a40      	ldr	r2, [pc, #256]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d013      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e76:	d00f      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <TIM_Base_SetConfig+0x118>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	; (8004f74 <TIM_Base_SetConfig+0x11c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3b      	ldr	r2, [pc, #236]	; (8004f78 <TIM_Base_SetConfig+0x120>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d108      	bne.n	8004eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d02b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d027      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <TIM_Base_SetConfig+0x118>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d023      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2b      	ldr	r2, [pc, #172]	; (8004f74 <TIM_Base_SetConfig+0x11c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01f      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	; (8004f78 <TIM_Base_SetConfig+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a29      	ldr	r2, [pc, #164]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <TIM_Base_SetConfig+0x128>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a27      	ldr	r2, [pc, #156]	; (8004f84 <TIM_Base_SetConfig+0x12c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <TIM_Base_SetConfig+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <TIM_Base_SetConfig+0x134>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <TIM_Base_SetConfig+0x138>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a23      	ldr	r2, [pc, #140]	; (8004f94 <TIM_Base_SetConfig+0x13c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	615a      	str	r2, [r3, #20]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40010400 	.word	0x40010400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40014400 	.word	0x40014400
 8004f88:	40014800 	.word	0x40014800
 8004f8c:	40001800 	.word	0x40001800
 8004f90:	40001c00 	.word	0x40001c00
 8004f94:	40002000 	.word	0x40002000

08004f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	f107 001c 	add.w	r0, r7, #28
 8004fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d122      	bne.n	800501e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d105      	bne.n	8005012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9a0 	bl	8005358 <USB_CoreReset>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]
 800501c:	e01a      	b.n	8005054 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f994 	bl	8005358 <USB_CoreReset>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
 8005046:	e005      	b.n	8005054 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10b      	bne.n	8005072 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f043 0206 	orr.w	r2, r3, #6
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005072:	7bfb      	ldrb	r3, [r7, #15]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800507e:	b004      	add	sp, #16
 8005080:	4770      	bx	lr

08005082 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f043 0201 	orr.w	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 0201 	bic.w	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050e2:	78fb      	ldrb	r3, [r7, #3]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d115      	bne.n	8005114 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050f4:	2001      	movs	r0, #1
 80050f6:	f7fc f84b 	bl	8001190 <HAL_Delay>
      ms++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f91a 	bl	800533a <USB_GetMode>
 8005106:	4603      	mov	r3, r0
 8005108:	2b01      	cmp	r3, #1
 800510a:	d01e      	beq.n	800514a <USB_SetCurrentMode+0x84>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b31      	cmp	r3, #49	; 0x31
 8005110:	d9f0      	bls.n	80050f4 <USB_SetCurrentMode+0x2e>
 8005112:	e01a      	b.n	800514a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d115      	bne.n	8005146 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005126:	2001      	movs	r0, #1
 8005128:	f7fc f832 	bl	8001190 <HAL_Delay>
      ms++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f901 	bl	800533a <USB_GetMode>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <USB_SetCurrentMode+0x84>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b31      	cmp	r3, #49	; 0x31
 8005142:	d9f0      	bls.n	8005126 <USB_SetCurrentMode+0x60>
 8005144:	e001      	b.n	800514a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e005      	b.n	8005156 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b32      	cmp	r3, #50	; 0x32
 800514e:	d101      	bne.n	8005154 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	019b      	lsls	r3, r3, #6
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3301      	adds	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <USB_FlushTxFifo+0x44>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e006      	b.n	8005198 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b20      	cmp	r3, #32
 8005194:	d0f1      	beq.n	800517a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	00030d40 	.word	0x00030d40

080051a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2210      	movs	r2, #16
 80051b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3301      	adds	r3, #1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <USB_FlushRxFifo+0x3c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e006      	b.n	80051d8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d0f1      	beq.n	80051ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	00030d40 	.word	0x00030d40

080051e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	; 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	4611      	mov	r1, r2
 80051f4:	461a      	mov	r2, r3
 80051f6:	460b      	mov	r3, r1
 80051f8:	71fb      	strb	r3, [r7, #7]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800520a:	2b00      	cmp	r3, #0
 800520c:	d123      	bne.n	8005256 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800520e:	88bb      	ldrh	r3, [r7, #4]
 8005210:	3303      	adds	r3, #3
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	e018      	b.n	800524e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	031a      	lsls	r2, r3, #12
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005228:	461a      	mov	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3301      	adds	r3, #1
 800523a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	3301      	adds	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d3e2      	bcc.n	800521c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3724      	adds	r7, #36	; 0x24
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005264:	b480      	push	{r7}
 8005266:	b08b      	sub	sp, #44	; 0x2c
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	b29b      	uxth	r3, r3
 8005280:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	e014      	b.n	80052ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	601a      	str	r2, [r3, #0]
    pDest++;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	3301      	adds	r3, #1
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	3301      	adds	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	3301      	adds	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	3301      	adds	r3, #1
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	3301      	adds	r3, #1
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3e6      	bcc.n	8005290 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052c2:	8bfb      	ldrh	r3, [r7, #30]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01e      	beq.n	8005306 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d2:	461a      	mov	r2, r3
 80052d4:	f107 0310 	add.w	r3, r7, #16
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	701a      	strb	r2, [r3, #0]
      i++;
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	3301      	adds	r3, #1
 80052f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052fa:	8bfb      	ldrh	r3, [r7, #30]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005300:	8bfb      	ldrh	r3, [r7, #30]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1ea      	bne.n	80052dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005308:	4618      	mov	r0, r3
 800530a:	372c      	adds	r7, #44	; 0x2c
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0301 	and.w	r3, r3, #1
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <USB_CoreReset+0x60>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e01a      	b.n	80053aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	daf3      	bge.n	8005364 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f043 0201 	orr.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	3301      	adds	r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	4a09      	ldr	r2, [pc, #36]	; (80053b8 <USB_CoreReset+0x60>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d901      	bls.n	800539c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e006      	b.n	80053aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d0f1      	beq.n	800538c <USB_CoreReset+0x34>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	00030d40 	.word	0x00030d40

080053bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053bc:	b084      	sub	sp, #16
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	f107 001c 	add.w	r0, r7, #28
 80053ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d018      	beq.n	8005440 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d10a      	bne.n	800542a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005422:	f043 0304 	orr.w	r3, r3, #4
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e014      	b.n	8005454 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e009      	b.n	8005454 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544e:	f023 0304 	bic.w	r3, r3, #4
 8005452:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005454:	2110      	movs	r1, #16
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff fe82 	bl	8005160 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fea3 	bl	80051a8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e015      	b.n	8005494 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	461a      	mov	r2, r3
 8005476:	f04f 33ff 	mov.w	r3, #4294967295
 800547a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d3e5      	bcc.n	8005468 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <USB_HostInit+0x154>)
 80054c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <USB_HostInit+0x158>)
 80054c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054cc:	e009      	b.n	80054e2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <USB_HostInit+0x15c>)
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <USB_HostInit+0x160>)
 80054de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f043 0210 	orr.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <USB_HostInit+0x164>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800550c:	b004      	add	sp, #16
 800550e:	4770      	bx	lr
 8005510:	01000200 	.word	0x01000200
 8005514:	00e00300 	.word	0x00e00300
 8005518:	00600080 	.word	0x00600080
 800551c:	004000e0 	.word	0x004000e0
 8005520:	a3200008 	.word	0xa3200008

08005524 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556c:	461a      	mov	r2, r3
 800556e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005572:	6053      	str	r3, [r2, #4]
 8005574:	e009      	b.n	800558a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d106      	bne.n	800558a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005582:	461a      	mov	r2, r3
 8005584:	f241 7370 	movw	r3, #6000	; 0x1770
 8005588:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055c8:	2064      	movs	r0, #100	; 0x64
 80055ca:	f7fb fde1 	bl	8001190 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055dc:	200a      	movs	r0, #10
 80055de:	f7fb fdd7 	bl	8001190 <HAL_Delay>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005610:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <USB_DriveVbus+0x44>
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d106      	bne.n	8005630 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800562a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800562e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	d109      	bne.n	8005650 <USB_DriveVbus+0x64>
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800564a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800564e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	0c5b      	lsrs	r3, r3, #17
 800567c:	f003 0303 	and.w	r3, r3, #3
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	b29b      	uxth	r3, r3
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	4608      	mov	r0, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	70fb      	strb	r3, [r7, #3]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70bb      	strb	r3, [r7, #2]
 80056c6:	4613      	mov	r3, r2
 80056c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	461a      	mov	r2, r3
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d87e      	bhi.n	80057ec <USB_HC_Init+0x13c>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <USB_HC_Init+0x44>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005705 	.word	0x08005705
 80056f8:	080057af 	.word	0x080057af
 80056fc:	08005705 	.word	0x08005705
 8005700:	08005771 	.word	0x08005771
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	f240 439d 	movw	r3, #1181	; 0x49d
 8005716:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005718:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800571c:	2b00      	cmp	r3, #0
 800571e:	da10      	bge.n	8005742 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	440a      	add	r2, r1
 8005736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800573a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005740:	e057      	b.n	80057f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d051      	beq.n	80057f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005768:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800576c:	60d3      	str	r3, [r2, #12]
      break;
 800576e:	e040      	b.n	80057f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da34      	bge.n	80057f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057ac:	e023      	b.n	80057f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	461a      	mov	r2, r3
 80057bc:	f240 2325 	movw	r3, #549	; 0x225
 80057c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da17      	bge.n	80057fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80057e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057ea:	e006      	b.n	80057fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77fb      	strb	r3, [r7, #31]
      break;
 80057f0:	e004      	b.n	80057fc <USB_HC_Init+0x14c>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <USB_HC_Init+0x14c>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <USB_HC_Init+0x14c>
      break;
 80057fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	2101      	movs	r1, #1
 800580c:	fa01 f303 	lsl.w	r3, r1, r3
 8005810:	6939      	ldr	r1, [r7, #16]
 8005812:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005816:	4313      	orrs	r3, r2
 8005818:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005826:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da03      	bge.n	8005836 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e001      	b.n	800583a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ff0f 	bl	800565e <USB_GetHostSpeed>
 8005840:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005846:	2b02      	cmp	r3, #2
 8005848:	d106      	bne.n	8005858 <USB_HC_Init+0x1a8>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d003      	beq.n	8005858 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e001      	b.n	800585c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	059b      	lsls	r3, r3, #22
 8005860:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005864:	78bb      	ldrb	r3, [r7, #2]
 8005866:	02db      	lsls	r3, r3, #11
 8005868:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800586c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800586e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005872:	049b      	lsls	r3, r3, #18
 8005874:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005878:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800587a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800587c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005880:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	0159      	lsls	r1, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	440b      	add	r3, r1
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005898:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800589a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d10f      	bne.n	80058c2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08c      	sub	sp, #48	; 0x30
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80058e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02d      	beq.n	8005952 <USB_HC_StartXfer+0x86>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	791b      	ldrb	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d129      	bne.n	8005952 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d117      	bne.n	8005934 <USB_HC_StartXfer+0x68>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	79db      	ldrb	r3, [r3, #7]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <USB_HC_StartXfer+0x48>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	79db      	ldrb	r3, [r3, #7]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d10f      	bne.n	8005934 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	440a      	add	r2, r1
 800592a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <USB_HC_StartXfer+0x86>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	795b      	ldrb	r3, [r3, #5]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d107      	bne.n	8005952 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa2f 	bl	8005dac <USB_DoPing>
      return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e0f8      	b.n	8005b44 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d018      	beq.n	800598c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	8912      	ldrh	r2, [r2, #8]
 8005962:	4413      	add	r3, r2
 8005964:	3b01      	subs	r3, #1
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	8912      	ldrh	r2, [r2, #8]
 800596a:	fbb3 f3f2 	udiv	r3, r3, r2
 800596e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005970:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005972:	8b7b      	ldrh	r3, [r7, #26]
 8005974:	429a      	cmp	r2, r3
 8005976:	d90b      	bls.n	8005990 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005978:	8b7b      	ldrh	r3, [r7, #26]
 800597a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800597c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	8912      	ldrh	r2, [r2, #8]
 8005982:	fb02 f203 	mul.w	r2, r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	e001      	b.n	8005990 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800598c:	2301      	movs	r3, #1
 800598e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	78db      	ldrb	r3, [r3, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005998:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	8912      	ldrh	r2, [r2, #8]
 800599e:	fb02 f203 	mul.w	r2, r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	611a      	str	r2, [r3, #16]
 80059a6:	e003      	b.n	80059b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059ba:	04d9      	lsls	r1, r3, #19
 80059bc:	4b63      	ldr	r3, [pc, #396]	; (8005b4c <USB_HC_StartXfer+0x280>)
 80059be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	7a9b      	ldrb	r3, [r3, #10]
 80059c6:	075b      	lsls	r3, r3, #29
 80059c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059cc:	69f9      	ldr	r1, [r7, #28]
 80059ce:	0148      	lsls	r0, r1, #5
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	4401      	add	r1, r0
 80059d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	68d9      	ldr	r1, [r3, #12]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f2:	460a      	mov	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bf0c      	ite	eq
 8005a06:	2301      	moveq	r3, #1
 8005a08:	2300      	movne	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a2c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	7e7b      	ldrb	r3, [r7, #25]
 8005a3e:	075b      	lsls	r3, r3, #29
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	6a39      	ldr	r1, [r7, #32]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a66:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	e003      	b.n	8005a82 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a80:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	461a      	mov	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e04e      	b.n	8005b44 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	78db      	ldrb	r3, [r3, #3]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d149      	bne.n	8005b42 <USB_HC_StartXfer+0x276>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d045      	beq.n	8005b42 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	79db      	ldrb	r3, [r3, #7]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d830      	bhi.n	8005b20 <USB_HC_StartXfer+0x254>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <USB_HC_StartXfer+0x1f8>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ad5 	.word	0x08005ad5
 8005ac8:	08005af9 	.word	0x08005af9
 8005acc:	08005ad5 	.word	0x08005ad5
 8005ad0:	08005af9 	.word	0x08005af9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	089b      	lsrs	r3, r3, #2
 8005adc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ade:	8afa      	ldrh	r2, [r7, #22]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d91c      	bls.n	8005b24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f043 0220 	orr.w	r2, r3, #32
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005af6:	e015      	b.n	8005b24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	3303      	adds	r3, #3
 8005afe:	089b      	lsrs	r3, r3, #2
 8005b00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b02:	8afa      	ldrh	r2, [r7, #22]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d90a      	bls.n	8005b28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b1e:	e003      	b.n	8005b28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <USB_HC_StartXfer+0x25e>
        break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <USB_HC_StartXfer+0x25e>
        break;
 8005b28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	68d9      	ldr	r1, [r3, #12]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785a      	ldrb	r2, [r3, #1]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2000      	movs	r0, #0
 8005b3a:	9000      	str	r0, [sp, #0]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fb53 	bl	80051e8 <USB_WritePacket>
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	1ff80000 	.word	0x1ff80000

08005b50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	b29b      	uxth	r3, r3
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b089      	sub	sp, #36	; 0x24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	0c9b      	lsrs	r3, r3, #18
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	0fdb      	lsrs	r3, r3, #31
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d104      	bne.n	8005bcc <USB_HC_Halt+0x5a>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e0e8      	b.n	8005d9e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <USB_HC_Halt+0x66>
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d173      	bne.n	8005cc0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 80cb 	bne.w	8005d9c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d143      	bne.n	8005c9a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c50:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7e:	d81d      	bhi.n	8005cbc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c96:	d0ec      	beq.n	8005c72 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c98:	e080      	b.n	8005d9c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cba:	e06f      	b.n	8005d9c <USB_HC_Halt+0x22a>
            break;
 8005cbc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cbe:	e06d      	b.n	8005d9c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d143      	bne.n	8005d78 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	0151      	lsls	r1, r2, #5
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	440a      	add	r2, r1
 8005d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d5c:	d81d      	bhi.n	8005d9a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d0ec      	beq.n	8005d50 <USB_HC_Halt+0x1de>
 8005d76:	e011      	b.n	8005d9c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e000      	b.n	8005d9c <USB_HC_Halt+0x22a>
          break;
 8005d9a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3724      	adds	r7, #36	; 0x24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	04da      	lsls	r2, r3, #19
 8005dc8:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <USB_DoPing+0x74>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ddc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	1ff80000 	.word	0x1ff80000

08005e24 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff f935 	bl	80050a4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff f98f 	bl	8005160 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff f9b0 	bl	80051a8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e01f      	b.n	8005e8e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e74:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	461a      	mov	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d9dc      	bls.n	8005e4e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	e034      	b.n	8005f04 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ece:	461a      	mov	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee0:	d80c      	bhi.n	8005efc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef8:	d0ec      	beq.n	8005ed4 <USB_StopHost+0xb0>
 8005efa:	e000      	b.n	8005efe <USB_StopHost+0xda>
        break;
 8005efc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	d9c7      	bls.n	8005e9a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f10:	461a      	mov	r2, r3
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff f8ae 	bl	8005082 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f38:	2301      	movs	r3, #1
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fc66 	bl	8006810 <USBH_FindInterface>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2bff      	cmp	r3, #255	; 0xff
 8005f4c:	d002      	beq.n	8005f54 <USBH_CDC_InterfaceInit+0x24>
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d901      	bls.n	8005f58 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e13d      	b.n	80061d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fc3b 	bl	80067d8 <USBH_SelectInterface>
 8005f62:	4603      	mov	r3, r0
 8005f64:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e131      	b.n	80061d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f76:	2050      	movs	r0, #80	; 0x50
 8005f78:	f002 f9fa 	bl	8008370 <malloc>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f90:	2302      	movs	r3, #2
 8005f92:	e11f      	b.n	80061d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f94:	2250      	movs	r2, #80	; 0x50
 8005f96:	2100      	movs	r1, #0
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f002 f9f9 	bl	8008390 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	211a      	movs	r1, #26
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b25b      	sxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da15      	bge.n	8005fe2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	211a      	movs	r1, #26
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	211a      	movs	r1, #26
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fdc:	881a      	ldrh	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fe32 	bl	8007c52 <USBH_AllocPipe>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	7819      	ldrb	r1, [r3, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	7858      	ldrb	r0, [r3, #1]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	8952      	ldrh	r2, [r2, #10]
 800600e:	9202      	str	r2, [sp, #8]
 8006010:	2203      	movs	r2, #3
 8006012:	9201      	str	r2, [sp, #4]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	4623      	mov	r3, r4
 8006018:	4602      	mov	r2, r0
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 fdea 	bl	8007bf4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f002 f8f9 	bl	8008220 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800602e:	2300      	movs	r3, #0
 8006030:	2200      	movs	r2, #0
 8006032:	210a      	movs	r1, #10
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fbeb 	bl	8006810 <USBH_FindInterface>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2bff      	cmp	r3, #255	; 0xff
 8006042:	d002      	beq.n	800604a <USBH_CDC_InterfaceInit+0x11a>
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d901      	bls.n	800604e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800604a:	2302      	movs	r3, #2
 800604c:	e0c2      	b.n	80061d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	211a      	movs	r1, #26
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b25b      	sxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	da16      	bge.n	8006094 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	211a      	movs	r1, #26
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006076:	781a      	ldrb	r2, [r3, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	211a      	movs	r1, #26
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	4413      	add	r3, r2
 8006088:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	835a      	strh	r2, [r3, #26]
 8006092:	e015      	b.n	80060c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	211a      	movs	r1, #26
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	211a      	movs	r1, #26
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	211a      	movs	r1, #26
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b25b      	sxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da16      	bge.n	8006106 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	211a      	movs	r1, #26
 80060de:	fb01 f303 	mul.w	r3, r1, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	211a      	movs	r1, #26
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	835a      	strh	r2, [r3, #26]
 8006104:	e015      	b.n	8006132 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	211a      	movs	r1, #26
 800610c:	fb01 f303 	mul.w	r3, r1, r3
 8006110:	4413      	add	r3, r2
 8006112:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	211a      	movs	r1, #26
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	4413      	add	r3, r2
 8006128:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800612c:	881a      	ldrh	r2, [r3, #0]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	7b9b      	ldrb	r3, [r3, #14]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fd8a 	bl	8007c52 <USBH_AllocPipe>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	7bdb      	ldrb	r3, [r3, #15]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fd80 	bl	8007c52 <USBH_AllocPipe>
 8006152:	4603      	mov	r3, r0
 8006154:	461a      	mov	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	7b59      	ldrb	r1, [r3, #13]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	7b98      	ldrb	r0, [r3, #14]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	8b12      	ldrh	r2, [r2, #24]
 8006172:	9202      	str	r2, [sp, #8]
 8006174:	2202      	movs	r2, #2
 8006176:	9201      	str	r2, [sp, #4]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	4623      	mov	r3, r4
 800617c:	4602      	mov	r2, r0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fd38 	bl	8007bf4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	7b19      	ldrb	r1, [r3, #12]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	7bd8      	ldrb	r0, [r3, #15]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	8b52      	ldrh	r2, [r2, #26]
 800619c:	9202      	str	r2, [sp, #8]
 800619e:	2202      	movs	r2, #2
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	4623      	mov	r3, r4
 80061a6:	4602      	mov	r2, r0
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fd23 	bl	8007bf4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	7b5b      	ldrb	r3, [r3, #13]
 80061ba:	2200      	movs	r2, #0
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f002 f82e 	bl	8008220 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	7b1b      	ldrb	r3, [r3, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 f827 	bl	8008220 <USBH_LL_SetToggle>

  return USBH_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}

080061dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fd18 	bl	8007c32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 fd43 	bl	8007c94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	7b1b      	ldrb	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7b1b      	ldrb	r3, [r3, #12]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fd05 	bl	8007c32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	7b1b      	ldrb	r3, [r3, #12]
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f001 fd30 	bl	8007c94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	7b5b      	ldrb	r3, [r3, #13]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	7b5b      	ldrb	r3, [r3, #13]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fcf2 	bl	8007c32 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	7b5b      	ldrb	r3, [r3, #13]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fd1d 	bl	8007c94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	4618      	mov	r0, r3
 8006276:	f002 f883 	bl	8008380 <free>
    phost->pActiveClass->pData = 0U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006280:	2200      	movs	r2, #0
 8006282:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3340      	adds	r3, #64	; 0x40
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8b1 	bl	800640e <GetLineCoding>
 80062ac:	4603      	mov	r3, r0
 80062ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062b0:	7afb      	ldrb	r3, [r7, #11]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d105      	bne.n	80062c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062bc:	2102      	movs	r1, #2
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062c2:	7afb      	ldrb	r3, [r7, #11]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d877      	bhi.n	80063e0 <USBH_CDC_Process+0x114>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <USBH_CDC_Process+0x2c>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	0800630d 	.word	0x0800630d
 80062fc:	08006313 	.word	0x08006313
 8006300:	08006343 	.word	0x08006343
 8006304:	080063b7 	.word	0x080063b7
 8006308:	080063c5 	.word	0x080063c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
      break;
 8006310:	e06d      	b.n	80063ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f897 	bl	800644c <SetLineCoding>
 800631e:	4603      	mov	r3, r0
 8006320:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006330:	e058      	b.n	80063e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d055      	beq.n	80063e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2204      	movs	r2, #4
 800633c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006340:	e050      	b.n	80063e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	3340      	adds	r3, #64	; 0x40
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f860 	bl	800640e <GetLineCoding>
 800634e:	4603      	mov	r3, r0
 8006350:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d126      	bne.n	80063a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d13b      	bne.n	80063e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800637c:	429a      	cmp	r2, r3
 800637e:	d133      	bne.n	80063e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800638a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800638c:	429a      	cmp	r2, r3
 800638e:	d12b      	bne.n	80063e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006398:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800639a:	429a      	cmp	r2, r3
 800639c:	d124      	bne.n	80063e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f958 	bl	8006654 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063a4:	e020      	b.n	80063e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01d      	beq.n	80063e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2204      	movs	r2, #4
 80063b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063b4:	e018      	b.n	80063e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f867 	bl	800648a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8da 	bl	8006576 <CDC_ProcessReception>
      break;
 80063c2:	e014      	b.n	80063ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 ffe3 	bl	8007392 <USBH_ClrFeature>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063de:	e005      	b.n	80063ec <USBH_CDC_Process+0x120>

    default:
      break;
 80063e0:	bf00      	nop
 80063e2:	e004      	b.n	80063ee <USBH_CDC_Process+0x122>
      break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <USBH_CDC_Process+0x122>
      break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <USBH_CDC_Process+0x122>
      break;
 80063ec:	bf00      	nop

  }

  return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	22a1      	movs	r2, #161	; 0xa1
 800641c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2221      	movs	r2, #33	; 0x21
 8006422:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2207      	movs	r2, #7
 8006434:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2207      	movs	r2, #7
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 f988 	bl	8007752 <USBH_CtlReq>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2221      	movs	r2, #33	; 0x21
 800645a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2207      	movs	r2, #7
 8006472:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2207      	movs	r2, #7
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f969 	bl	8007752 <USBH_CtlReq>
 8006480:	4603      	mov	r3, r0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af02      	add	r7, sp, #8
 8006490:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800649c:	2300      	movs	r3, #0
 800649e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d002      	beq.n	80064b0 <CDC_ProcessTransmission+0x26>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d023      	beq.n	80064f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80064ae:	e05e      	b.n	800656e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	8b12      	ldrh	r2, [r2, #24]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d90b      	bls.n	80064d4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	69d9      	ldr	r1, [r3, #28]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8b1a      	ldrh	r2, [r3, #24]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	7b5b      	ldrb	r3, [r3, #13]
 80064c8:	2001      	movs	r0, #1
 80064ca:	9000      	str	r0, [sp, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 fb4e 	bl	8007b6e <USBH_BulkSendData>
 80064d2:	e00b      	b.n	80064ec <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	7b5b      	ldrb	r3, [r3, #13]
 80064e2:	2001      	movs	r0, #1
 80064e4:	9000      	str	r0, [sp, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fb41 	bl	8007b6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064f4:	e03b      	b.n	800656e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	7b5b      	ldrb	r3, [r3, #13]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fe65 	bl	80081cc <USBH_LL_GetURBState>
 8006502:	4603      	mov	r3, r0
 8006504:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006506:	7afb      	ldrb	r3, [r7, #11]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d128      	bne.n	800655e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	8b12      	ldrh	r2, [r2, #24]
 8006514:	4293      	cmp	r3, r2
 8006516:	d90e      	bls.n	8006536 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	8b12      	ldrh	r2, [r2, #24]
 8006520:	1a9a      	subs	r2, r3, r2
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	8b12      	ldrh	r2, [r2, #24]
 800652e:	441a      	add	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	61da      	str	r2, [r3, #28]
 8006534:	e002      	b.n	800653c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800654c:	e00e      	b.n	800656c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f868 	bl	800662c <USBH_CDC_TransmitCallback>
      break;
 800655c:	e006      	b.n	800656c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d103      	bne.n	800656c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800656c:	bf00      	nop
  }
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006588:	2300      	movs	r3, #0
 800658a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006592:	2b03      	cmp	r3, #3
 8006594:	d002      	beq.n	800659c <CDC_ProcessReception+0x26>
 8006596:	2b04      	cmp	r3, #4
 8006598:	d00e      	beq.n	80065b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800659a:	e043      	b.n	8006624 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	6a19      	ldr	r1, [r3, #32]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	8b5a      	ldrh	r2, [r3, #26]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	7b1b      	ldrb	r3, [r3, #12]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fb05 	bl	8007bb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2204      	movs	r2, #4
 80065b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065b6:	e035      	b.n	8006624 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	7b1b      	ldrb	r3, [r3, #12]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fe04 	bl	80081cc <USBH_LL_GetURBState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d129      	bne.n	8006622 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	7b1b      	ldrb	r3, [r3, #12]
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fd67 	bl	80080a8 <USBH_LL_GetLastXferSize>
 80065da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d016      	beq.n	8006614 <CDC_ProcessReception+0x9e>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	8b5b      	ldrh	r3, [r3, #26]
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d910      	bls.n	8006614 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	441a      	add	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2203      	movs	r2, #3
 800660e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006612:	e006      	b.n	8006622 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f80f 	bl	8006640 <USBH_CDC_ReceiveCallback>
      break;
 8006622:	bf00      	nop
  }
}
 8006624:	bf00      	nop
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800667c:	2302      	movs	r3, #2
 800667e:	e029      	b.n	80066d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	79fa      	ldrb	r2, [r7, #7]
 8006684:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f81f 	bl	80066dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 fc37 	bl	8007f40 <USBH_LL_Init>

  return USBH_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	e009      	b.n	8006702 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	33e0      	adds	r3, #224	; 0xe0
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	2200      	movs	r2, #0
 80066fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b0e      	cmp	r3, #14
 8006706:	d9f2      	bls.n	80066ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e009      	b.n	8006722 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006728:	d3f1      	bcc.n	800670e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2240      	movs	r2, #64	; 0x40
 800674e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d016      	beq.n	80067c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10e      	bne.n	80067c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	33de      	adds	r3, #222	; 0xde
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	e004      	b.n	80067ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067c0:	2302      	movs	r3, #2
 80067c2:	73fb      	strb	r3, [r7, #15]
 80067c4:	e001      	b.n	80067ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067c6:	2302      	movs	r3, #2
 80067c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d204      	bcs.n	80067fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80067fc:	e001      	b.n	8006802 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80067fe:	2302      	movs	r3, #2
 8006800:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	70fb      	strb	r3, [r7, #3]
 8006822:	460b      	mov	r3, r1
 8006824:	70bb      	strb	r3, [r7, #2]
 8006826:	4613      	mov	r3, r2
 8006828:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006838:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800683a:	e025      	b.n	8006888 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	221a      	movs	r2, #26
 8006840:	fb02 f303 	mul.w	r3, r2, r3
 8006844:	3308      	adds	r3, #8
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	3302      	adds	r3, #2
 800684c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	795b      	ldrb	r3, [r3, #5]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	429a      	cmp	r2, r3
 8006856:	d002      	beq.n	800685e <USBH_FindInterface+0x4e>
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d111      	bne.n	8006882 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006862:	78ba      	ldrb	r2, [r7, #2]
 8006864:	429a      	cmp	r2, r3
 8006866:	d002      	beq.n	800686e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006868:	78bb      	ldrb	r3, [r7, #2]
 800686a:	2bff      	cmp	r3, #255	; 0xff
 800686c:	d109      	bne.n	8006882 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006872:	787a      	ldrb	r2, [r7, #1]
 8006874:	429a      	cmp	r2, r3
 8006876:	d002      	beq.n	800687e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006878:	787b      	ldrb	r3, [r7, #1]
 800687a:	2bff      	cmp	r3, #255	; 0xff
 800687c:	d101      	bne.n	8006882 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	e006      	b.n	8006890 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	3301      	adds	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d9d6      	bls.n	800683c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800688e:	23ff      	movs	r3, #255	; 0xff
}
 8006890:	4618      	mov	r0, r3
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 fb87 	bl	8007fb8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80068aa:	2101      	movs	r1, #1
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fca0 	bl	80081f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af04      	add	r7, sp, #16
 80068c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d102      	bne.n	80068de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2203      	movs	r2, #3
 80068dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b0b      	cmp	r3, #11
 80068e6:	f200 81b3 	bhi.w	8006c50 <USBH_Process+0x394>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBH_Process+0x34>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006921 	.word	0x08006921
 80068f4:	08006953 	.word	0x08006953
 80068f8:	080069bb 	.word	0x080069bb
 80068fc:	08006beb 	.word	0x08006beb
 8006900:	08006c51 	.word	0x08006c51
 8006904:	08006a5f 	.word	0x08006a5f
 8006908:	08006b91 	.word	0x08006b91
 800690c:	08006a95 	.word	0x08006a95
 8006910:	08006ab5 	.word	0x08006ab5
 8006914:	08006ad5 	.word	0x08006ad5
 8006918:	08006b03 	.word	0x08006b03
 800691c:	08006bd3 	.word	0x08006bd3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8193 	beq.w	8006c54 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006934:	20c8      	movs	r0, #200	; 0xc8
 8006936:	f001 fca3 	bl	8008280 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fb99 	bl	8008072 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006950:	e180      	b.n	8006c54 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006958:	2b01      	cmp	r3, #1
 800695a:	d107      	bne.n	800696c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800696a:	e182      	b.n	8006c72 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006976:	d914      	bls.n	80069a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800697e:	3301      	adds	r3, #1
 8006980:	b2da      	uxtb	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800698e:	2b03      	cmp	r3, #3
 8006990:	d903      	bls.n	800699a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	220d      	movs	r2, #13
 8006996:	701a      	strb	r2, [r3, #0]
      break;
 8006998:	e16b      	b.n	8006c72 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
      break;
 80069a0:	e167      	b.n	8006c72 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80069a8:	f103 020a 	add.w	r2, r3, #10
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069b2:	200a      	movs	r0, #10
 80069b4:	f001 fc64 	bl	8008280 <USBH_Delay>
      break;
 80069b8:	e15b      	b.n	8006c72 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ca:	2104      	movs	r1, #4
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069d0:	2064      	movs	r0, #100	; 0x64
 80069d2:	f001 fc55 	bl	8008280 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 fb24 	bl	8008024 <USBH_LL_GetSpeed>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2205      	movs	r2, #5
 80069ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069ec:	2100      	movs	r1, #0
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f92f 	bl	8007c52 <USBH_AllocPipe>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 f927 	bl	8007c52 <USBH_AllocPipe>
 8006a04:	4603      	mov	r3, r0
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	7919      	ldrb	r1, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a20:	b292      	uxth	r2, r2
 8006a22:	9202      	str	r2, [sp, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 f8e0 	bl	8007bf4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7959      	ldrb	r1, [r3, #5]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a48:	b292      	uxth	r2, r2
 8006a4a:	9202      	str	r2, [sp, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	9201      	str	r2, [sp, #4]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	4603      	mov	r3, r0
 8006a54:	2200      	movs	r2, #0
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f8cc 	bl	8007bf4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a5c:	e109      	b.n	8006c72 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f90c 	bl	8006c7c <USBH_HandleEnum>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 80f3 	bne.w	8006c58 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d103      	bne.n	8006a8c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2208      	movs	r2, #8
 8006a88:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a8a:	e0e5      	b.n	8006c58 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2207      	movs	r2, #7
 8006a90:	701a      	strb	r2, [r3, #0]
      break;
 8006a92:	e0e1      	b.n	8006c58 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80de 	beq.w	8006c5c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2208      	movs	r2, #8
 8006ab0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ab2:	e0d3      	b.n	8006c5c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fc20 	bl	8007304 <USBH_SetCfg>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f040 80ca 	bne.w	8006c60 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2209      	movs	r2, #9
 8006ad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ad2:	e0c5      	b.n	8006c60 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fc30 	bl	800734a <USBH_SetFeature>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f040 80b9 	bne.w	8006c64 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	220a      	movs	r2, #10
 8006af6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006af8:	e0b4      	b.n	8006c64 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	220a      	movs	r2, #10
 8006afe:	701a      	strb	r2, [r3, #0]
      break;
 8006b00:	e0b0      	b.n	8006c64 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80ad 	beq.w	8006c68 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	e016      	b.n	8006b4a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b1c:	7bfa      	ldrb	r2, [r7, #15]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	32de      	adds	r2, #222	; 0xde
 8006b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b26:	791a      	ldrb	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d108      	bne.n	8006b44 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b32:	7bfa      	ldrb	r2, [r7, #15]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32de      	adds	r2, #222	; 0xde
 8006b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b42:	e005      	b.n	8006b50 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	3301      	adds	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d0e5      	beq.n	8006b1c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d016      	beq.n	8006b88 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2206      	movs	r2, #6
 8006b70:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b78:	2103      	movs	r1, #3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b7e:	e073      	b.n	8006c68 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	220d      	movs	r2, #13
 8006b84:	701a      	strb	r2, [r3, #0]
      break;
 8006b86:	e06f      	b.n	8006c68 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	220d      	movs	r2, #13
 8006b8c:	701a      	strb	r2, [r3, #0]
      break;
 8006b8e:	e06b      	b.n	8006c68 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d017      	beq.n	8006bca <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220b      	movs	r2, #11
 8006bb6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bb8:	e058      	b.n	8006c6c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d154      	bne.n	8006c6c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220d      	movs	r2, #13
 8006bc6:	701a      	strb	r2, [r3, #0]
      break;
 8006bc8:	e050      	b.n	8006c6c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	220d      	movs	r2, #13
 8006bce:	701a      	strb	r2, [r3, #0]
      break;
 8006bd0:	e04c      	b.n	8006c6c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d049      	beq.n	8006c70 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
      }
      break;
 8006be8:	e042      	b.n	8006c70 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fd72 	bl	80066dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c26:	2105      	movs	r1, #5
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d107      	bne.n	8006c48 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7ff fe2b 	bl	800689c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c46:	e014      	b.n	8006c72 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f9b5 	bl	8007fb8 <USBH_LL_Start>
      break;
 8006c4e:	e010      	b.n	8006c72 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c50:	bf00      	nop
 8006c52:	e00e      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c54:	bf00      	nop
 8006c56:	e00c      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e00a      	b.n	8006c72 <USBH_Process+0x3b6>
    break;
 8006c5c:	bf00      	nop
 8006c5e:	e008      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c60:	bf00      	nop
 8006c62:	e006      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c64:	bf00      	nop
 8006c66:	e004      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <USBH_Process+0x3b6>
      break;
 8006c70:	bf00      	nop
  }
  return USBH_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c84:	2301      	movs	r3, #1
 8006c86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	785b      	ldrb	r3, [r3, #1]
 8006c90:	2b07      	cmp	r3, #7
 8006c92:	f200 81c1 	bhi.w	8007018 <USBH_HandleEnum+0x39c>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBH_HandleEnum+0x20>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cbd 	.word	0x08006cbd
 8006ca0:	08006d7b 	.word	0x08006d7b
 8006ca4:	08006de5 	.word	0x08006de5
 8006ca8:	08006e73 	.word	0x08006e73
 8006cac:	08006edd 	.word	0x08006edd
 8006cb0:	08006f4d 	.word	0x08006f4d
 8006cb4:	08006f93 	.word	0x08006f93
 8006cb8:	08006fd9 	.word	0x08006fd9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006cbc:	2108      	movs	r1, #8
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa50 	bl	8007164 <USBH_Get_DevDesc>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d130      	bne.n	8006d30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7919      	ldrb	r1, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	9202      	str	r2, [sp, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	9201      	str	r2, [sp, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2280      	movs	r2, #128	; 0x80
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff77 	bl	8007bf4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7959      	ldrb	r1, [r3, #5]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	9202      	str	r2, [sp, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	9201      	str	r2, [sp, #4]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4603      	mov	r3, r0
 8006d26:	2200      	movs	r2, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 ff63 	bl	8007bf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d2e:	e175      	b.n	800701c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f040 8172 	bne.w	800701c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3e:	3301      	adds	r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d903      	bls.n	8006d5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220d      	movs	r2, #13
 8006d56:	701a      	strb	r2, [r3, #0]
      break;
 8006d58:	e160      	b.n	800701c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	795b      	ldrb	r3, [r3, #5]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 ff97 	bl	8007c94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 ff91 	bl	8007c94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
      break;
 8006d78:	e150      	b.n	800701c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d7a:	2112      	movs	r1, #18
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f9f1 	bl	8007164 <USBH_Get_DevDesc>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d92:	e145      	b.n	8007020 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	f040 8142 	bne.w	8007020 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da2:	3301      	adds	r3, #1
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d903      	bls.n	8006dbe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	220d      	movs	r2, #13
 8006dba:	701a      	strb	r2, [r3, #0]
      break;
 8006dbc:	e130      	b.n	8007020 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	795b      	ldrb	r3, [r3, #5]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 ff65 	bl	8007c94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	791b      	ldrb	r3, [r3, #4]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 ff5f 	bl	8007c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
      break;
 8006de2:	e11d      	b.n	8007020 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006de4:	2101      	movs	r1, #1
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa68 	bl	80072bc <USBH_SetAddress>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d132      	bne.n	8006e5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006df6:	2002      	movs	r0, #2
 8006df8:	f001 fa42 	bl	8008280 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2203      	movs	r2, #3
 8006e08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	7919      	ldrb	r1, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	9202      	str	r2, [sp, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	9201      	str	r2, [sp, #4]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2280      	movs	r2, #128	; 0x80
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fee1 	bl	8007bf4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7959      	ldrb	r1, [r3, #5]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e46:	b292      	uxth	r2, r2
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	9201      	str	r2, [sp, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	4603      	mov	r3, r0
 8006e52:	2200      	movs	r2, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fecd 	bl	8007bf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e5a:	e0e3      	b.n	8007024 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	f040 80e0 	bne.w	8007024 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	220d      	movs	r2, #13
 8006e68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	705a      	strb	r2, [r3, #1]
      break;
 8006e70:	e0d8      	b.n	8007024 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e72:	2109      	movs	r1, #9
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f99d 	bl	80071b4 <USBH_Get_CfgDesc>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2204      	movs	r2, #4
 8006e88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e8a:	e0cd      	b.n	8007028 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	f040 80ca 	bne.w	8007028 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d903      	bls.n	8006eb6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	220d      	movs	r2, #13
 8006eb2:	701a      	strb	r2, [r3, #0]
      break;
 8006eb4:	e0b8      	b.n	8007028 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	795b      	ldrb	r3, [r3, #5]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fee9 	bl	8007c94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	791b      	ldrb	r3, [r3, #4]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fee3 	bl	8007c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
      break;
 8006eda:	e0a5      	b.n	8007028 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f965 	bl	80071b4 <USBH_Get_CfgDesc>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2205      	movs	r2, #5
 8006ef8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006efa:	e097      	b.n	800702c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	f040 8094 	bne.w	800702c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d903      	bls.n	8006f26 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220d      	movs	r2, #13
 8006f22:	701a      	strb	r2, [r3, #0]
      break;
 8006f24:	e082      	b.n	800702c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	795b      	ldrb	r3, [r3, #5]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 feb1 	bl	8007c94 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	791b      	ldrb	r3, [r3, #4]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 feab 	bl	8007c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
      break;
 8006f4a:	e06f      	b.n	800702c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d019      	beq.n	8006f8a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f62:	23ff      	movs	r3, #255	; 0xff
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f949 	bl	80071fc <USBH_Get_StringDesc>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2206      	movs	r2, #6
 8006f78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f7a:	e059      	b.n	8007030 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d156      	bne.n	8007030 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2206      	movs	r2, #6
 8006f86:	705a      	strb	r2, [r3, #1]
      break;
 8006f88:	e052      	b.n	8007030 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	705a      	strb	r2, [r3, #1]
      break;
 8006f90:	e04e      	b.n	8007030 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d019      	beq.n	8006fd0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fa8:	23ff      	movs	r3, #255	; 0xff
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f926 	bl	80071fc <USBH_Get_StringDesc>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fc0:	e038      	b.n	8007034 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d135      	bne.n	8007034 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2207      	movs	r2, #7
 8006fcc:	705a      	strb	r2, [r3, #1]
      break;
 8006fce:	e031      	b.n	8007034 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2207      	movs	r2, #7
 8006fd4:	705a      	strb	r2, [r3, #1]
      break;
 8006fd6:	e02d      	b.n	8007034 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d017      	beq.n	8007012 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fee:	23ff      	movs	r3, #255	; 0xff
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f903 	bl	80071fc <USBH_Get_StringDesc>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d102      	bne.n	8007006 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007004:	e018      	b.n	8007038 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d115      	bne.n	8007038 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	e012      	b.n	8007038 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
      break;
 8007016:	e00f      	b.n	8007038 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007018:	bf00      	nop
 800701a:	e00e      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 800701c:	bf00      	nop
 800701e:	e00c      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007020:	bf00      	nop
 8007022:	e00a      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007024:	bf00      	nop
 8007026:	e008      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007028:	bf00      	nop
 800702a:	e006      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 800702c:	bf00      	nop
 800702e:	e004      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007030:	bf00      	nop
 8007032:	e002      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <USBH_HandleEnum+0x3be>
      break;
 8007038:	bf00      	nop
  }
  return Status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f804 	bl	8007086 <USBH_HandleSof>
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b0b      	cmp	r3, #11
 8007096:	d10a      	bne.n	80070ae <USBH_HandleSof+0x28>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
  }
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070c6:	bf00      	nop
}
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070e2:	bf00      	nop
}
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 ff56 	bl	8007fee <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	791b      	ldrb	r3, [r3, #4]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fda3 	bl	8007c94 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	795b      	ldrb	r3, [r3, #5]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd9d 	bl	8007c94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	b29b      	uxth	r3, r3
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007182:	2100      	movs	r1, #0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f864 	bl	8007252 <USBH_GetDescriptor>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f203 3026 	addw	r0, r3, #806	; 0x326
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	b292      	uxth	r2, r2
 80071a4:	4619      	mov	r1, r3
 80071a6:	f000 f918 	bl	80073da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	331c      	adds	r3, #28
 80071c4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071c6:	887b      	ldrh	r3, [r7, #2]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d0:	2100      	movs	r1, #0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f83d 	bl	8007252 <USBH_GetDescriptor>
 80071d8:	4603      	mov	r3, r0
 80071da:	72fb      	strb	r3, [r7, #11]
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d107      	bne.n	80071f2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f964 	bl	80074ba <USBH_ParseCfgDesc>
  }

  return status;
 80071f2:	7afb      	ldrb	r3, [r7, #11]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	461a      	mov	r2, r3
 8007208:	460b      	mov	r3, r1
 800720a:	72fb      	strb	r3, [r7, #11]
 800720c:	4613      	mov	r3, r2
 800720e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007218:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007220:	893b      	ldrh	r3, [r7, #8]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	460b      	mov	r3, r1
 8007226:	2100      	movs	r1, #0
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f812 	bl	8007252 <USBH_GetDescriptor>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d107      	bne.n	8007248 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800723e:	893a      	ldrh	r2, [r7, #8]
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fa37 	bl	80076b6 <USBH_ParseStringDesc>
  }

  return status;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	72fb      	strb	r3, [r7, #11]
 8007260:	4613      	mov	r3, r2
 8007262:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	789b      	ldrb	r3, [r3, #2]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d11c      	bne.n	80072a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2206      	movs	r2, #6
 800727c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	893a      	ldrh	r2, [r7, #8]
 8007282:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800728a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800728e:	d104      	bne.n	800729a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f240 4209 	movw	r2, #1033	; 0x409
 8007296:	829a      	strh	r2, [r3, #20]
 8007298:	e002      	b.n	80072a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8b3a      	ldrh	r2, [r7, #24]
 80072a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80072a6:	8b3b      	ldrh	r3, [r7, #24]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fa50 	bl	8007752 <USBH_CtlReq>
 80072b2:	4603      	mov	r3, r0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	789b      	ldrb	r3, [r3, #2]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10f      	bne.n	80072f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2205      	movs	r2, #5
 80072da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fa2c 	bl	8007752 <USBH_CtlReq>
 80072fa:	4603      	mov	r3, r0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	789b      	ldrb	r3, [r3, #2]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10e      	bne.n	8007336 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2209      	movs	r2, #9
 8007322:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	887a      	ldrh	r2, [r7, #2]
 8007328:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa09 	bl	8007752 <USBH_CtlReq>
 8007340:	4603      	mov	r3, r0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	789b      	ldrb	r3, [r3, #2]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10f      	bne.n	800737e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f9e5 	bl	8007752 <USBH_CtlReq>
 8007388:	4603      	mov	r3, r0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	789b      	ldrb	r3, [r3, #2]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d10f      	bne.n	80073c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9c1 	bl	8007752 <USBH_CtlReq>
 80073d0:	4603      	mov	r3, r0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	785a      	ldrb	r2, [r3, #1]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3302      	adds	r3, #2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	3303      	adds	r3, #3
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	b29b      	uxth	r3, r3
 800740c:	4313      	orrs	r3, r2
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	791a      	ldrb	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	795a      	ldrb	r2, [r3, #5]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	799a      	ldrb	r2, [r3, #6]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	79da      	ldrb	r2, [r3, #7]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b08      	cmp	r3, #8
 8007438:	d939      	bls.n	80074ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	3308      	adds	r3, #8
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	b29a      	uxth	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3309      	adds	r3, #9
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	b29b      	uxth	r3, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	330a      	adds	r3, #10
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29a      	uxth	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	330b      	adds	r3, #11
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	330c      	adds	r3, #12
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	b29a      	uxth	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	330d      	adds	r3, #13
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	b29b      	uxth	r3, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	7b9a      	ldrb	r2, [r3, #14]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	7bda      	ldrb	r2, [r3, #15]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	7c1a      	ldrb	r2, [r3, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	7c5a      	ldrb	r2, [r3, #17]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	745a      	strb	r2, [r3, #17]
  }
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08a      	sub	sp, #40	; 0x28
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	4613      	mov	r3, r2
 80074c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	785a      	ldrb	r2, [r3, #1]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	3302      	adds	r3, #2
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	3303      	adds	r3, #3
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	b29b      	uxth	r3, r3
 8007500:	4313      	orrs	r3, r2
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	791a      	ldrb	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	795a      	ldrb	r2, [r3, #5]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	799a      	ldrb	r2, [r3, #6]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	79da      	ldrb	r2, [r3, #7]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7a1a      	ldrb	r2, [r3, #8]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	2b09      	cmp	r3, #9
 8007534:	d95f      	bls.n	80075f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007536:	2309      	movs	r3, #9
 8007538:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800753e:	e051      	b.n	80075e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007540:	f107 0316 	add.w	r3, r7, #22
 8007544:	4619      	mov	r1, r3
 8007546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007548:	f000 f8e8 	bl	800771c <USBH_GetNextDesc>
 800754c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d146      	bne.n	80075e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800755a:	221a      	movs	r2, #26
 800755c:	fb02 f303 	mul.w	r3, r2, r3
 8007560:	3308      	adds	r3, #8
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	3302      	adds	r3, #2
 8007568:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800756a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800756c:	69f8      	ldr	r0, [r7, #28]
 800756e:	f000 f846 	bl	80075fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007578:	2300      	movs	r3, #0
 800757a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800757c:	e022      	b.n	80075c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800757e:	f107 0316 	add.w	r3, r7, #22
 8007582:	4619      	mov	r1, r3
 8007584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007586:	f000 f8c9 	bl	800771c <USBH_GetNextDesc>
 800758a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d117      	bne.n	80075c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800759c:	3201      	adds	r2, #1
 800759e:	00d2      	lsls	r2, r2, #3
 80075a0:	211a      	movs	r1, #26
 80075a2:	fb01 f303 	mul.w	r3, r1, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	3308      	adds	r3, #8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80075b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b4:	69b8      	ldr	r0, [r7, #24]
 80075b6:	f000 f851 	bl	800765c <USBH_ParseEPDesc>
            ep_ix++;
 80075ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075be:	3301      	adds	r3, #1
 80075c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d204      	bcs.n	80075da <USBH_ParseCfgDesc+0x120>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	885a      	ldrh	r2, [r3, #2]
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d8d1      	bhi.n	800757e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80075da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075de:	3301      	adds	r3, #1
 80075e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d804      	bhi.n	80075f6 <USBH_ParseCfgDesc+0x13c>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	885a      	ldrh	r2, [r3, #2]
 80075f0:	8afb      	ldrh	r3, [r7, #22]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d8a4      	bhi.n	8007540 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80075f6:	bf00      	nop
 80075f8:	3728      	adds	r7, #40	; 0x28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785a      	ldrb	r2, [r3, #1]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	789a      	ldrb	r2, [r3, #2]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	78da      	ldrb	r2, [r3, #3]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	791a      	ldrb	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	795a      	ldrb	r2, [r3, #5]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	799a      	ldrb	r2, [r3, #6]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	79da      	ldrb	r2, [r3, #7]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	7a1a      	ldrb	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	721a      	strb	r2, [r3, #8]
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785a      	ldrb	r2, [r3, #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	789a      	ldrb	r2, [r3, #2]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	78da      	ldrb	r2, [r3, #3]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	3304      	adds	r3, #4
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	3305      	adds	r3, #5
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	b29b      	uxth	r3, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	799a      	ldrb	r2, [r3, #6]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	719a      	strb	r2, [r3, #6]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b087      	sub	sp, #28
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d120      	bne.n	8007710 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	1e9a      	subs	r2, r3, #2
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	bf28      	it	cs
 80076da:	4613      	movcs	r3, r2
 80076dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3302      	adds	r3, #2
 80076e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076e4:	2300      	movs	r3, #0
 80076e6:	82fb      	strh	r3, [r7, #22]
 80076e8:	e00b      	b.n	8007702 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076ea:	8afb      	ldrh	r3, [r7, #22]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	781a      	ldrb	r2, [r3, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076fc:	8afb      	ldrh	r3, [r7, #22]
 80076fe:	3302      	adds	r3, #2
 8007700:	82fb      	strh	r3, [r7, #22]
 8007702:	8afa      	ldrh	r2, [r7, #22]
 8007704:	8abb      	ldrh	r3, [r7, #20]
 8007706:	429a      	cmp	r2, r3
 8007708:	d3ef      	bcc.n	80076ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
  }
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	4413      	add	r3, r2
 8007732:	b29a      	uxth	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007744:	68fb      	ldr	r3, [r7, #12]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	4613      	mov	r3, r2
 800775e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	789b      	ldrb	r3, [r3, #2]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d002      	beq.n	8007772 <USBH_CtlReq+0x20>
 800776c:	2b02      	cmp	r3, #2
 800776e:	d00f      	beq.n	8007790 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007770:	e027      	b.n	80077c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2202      	movs	r2, #2
 8007788:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800778a:	2301      	movs	r3, #1
 800778c:	75fb      	strb	r3, [r7, #23]
      break;
 800778e:	e018      	b.n	80077c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f81b 	bl	80077cc <USBH_HandleControl>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <USBH_CtlReq+0x54>
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d106      	bne.n	80077b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	761a      	strb	r2, [r3, #24]
      break;
 80077b2:	e005      	b.n	80077c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d102      	bne.n	80077c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2201      	movs	r2, #1
 80077be:	709a      	strb	r2, [r3, #2]
      break;
 80077c0:	bf00      	nop
  }
  return status;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077d8:	2300      	movs	r3, #0
 80077da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7e1b      	ldrb	r3, [r3, #24]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	2b0a      	cmp	r3, #10
 80077e4:	f200 8156 	bhi.w	8007a94 <USBH_HandleControl+0x2c8>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <USBH_HandleControl+0x24>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007837 	.word	0x08007837
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	080078c7 	.word	0x080078c7
 8007800:	080078ff 	.word	0x080078ff
 8007804:	08007929 	.word	0x08007929
 8007808:	0800797b 	.word	0x0800797b
 800780c:	0800799d 	.word	0x0800799d
 8007810:	080079d9 	.word	0x080079d9
 8007814:	080079ff 	.word	0x080079ff
 8007818:	08007a3d 	.word	0x08007a3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f103 0110 	add.w	r1, r3, #16
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	795b      	ldrb	r3, [r3, #5]
 8007826:	461a      	mov	r2, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f943 	bl	8007ab4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	761a      	strb	r2, [r3, #24]
      break;
 8007834:	e139      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fcc5 	bl	80081cc <USBH_LL_GetURBState>
 8007842:	4603      	mov	r3, r0
 8007844:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d11e      	bne.n	800788a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7c1b      	ldrb	r3, [r3, #16]
 8007850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007854:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8adb      	ldrh	r3, [r3, #22]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800785e:	7b7b      	ldrb	r3, [r7, #13]
 8007860:	2b80      	cmp	r3, #128	; 0x80
 8007862:	d103      	bne.n	800786c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2203      	movs	r2, #3
 8007868:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800786a:	e115      	b.n	8007a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2205      	movs	r2, #5
 8007870:	761a      	strb	r2, [r3, #24]
      break;
 8007872:	e111      	b.n	8007a98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007874:	7b7b      	ldrb	r3, [r7, #13]
 8007876:	2b80      	cmp	r3, #128	; 0x80
 8007878:	d103      	bne.n	8007882 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2209      	movs	r2, #9
 800787e:	761a      	strb	r2, [r3, #24]
      break;
 8007880:	e10a      	b.n	8007a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2207      	movs	r2, #7
 8007886:	761a      	strb	r2, [r3, #24]
      break;
 8007888:	e106      	b.n	8007a98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d003      	beq.n	8007898 <USBH_HandleControl+0xcc>
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b02      	cmp	r3, #2
 8007894:	f040 8100 	bne.w	8007a98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	220b      	movs	r2, #11
 800789c:	761a      	strb	r2, [r3, #24]
      break;
 800789e:	e0fb      	b.n	8007a98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6899      	ldr	r1, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	899a      	ldrh	r2, [r3, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	791b      	ldrb	r3, [r3, #4]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f93a 	bl	8007b32 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2204      	movs	r2, #4
 80078c2:	761a      	strb	r2, [r3, #24]
      break;
 80078c4:	e0f1      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc7d 	bl	80081cc <USBH_LL_GetURBState>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d102      	bne.n	80078e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2209      	movs	r2, #9
 80078e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d102      	bne.n	80078ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078e8:	2303      	movs	r3, #3
 80078ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078ec:	e0d6      	b.n	8007a9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	f040 80d3 	bne.w	8007a9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	220b      	movs	r2, #11
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e0ce      	b.n	8007a9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6899      	ldr	r1, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	899a      	ldrh	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	795b      	ldrb	r3, [r3, #5]
 800790a:	2001      	movs	r0, #1
 800790c:	9000      	str	r0, [sp, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f8ea 	bl	8007ae8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800791a:	b29a      	uxth	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2206      	movs	r2, #6
 8007924:	761a      	strb	r2, [r3, #24]
      break;
 8007926:	e0c0      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	795b      	ldrb	r3, [r3, #5]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fc4c 	bl	80081cc <USBH_LL_GetURBState>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d103      	bne.n	8007946 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2207      	movs	r2, #7
 8007942:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007944:	e0ac      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b05      	cmp	r3, #5
 800794a:	d105      	bne.n	8007958 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	220c      	movs	r2, #12
 8007950:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007952:	2303      	movs	r3, #3
 8007954:	73fb      	strb	r3, [r7, #15]
      break;
 8007956:	e0a3      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d103      	bne.n	8007966 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2205      	movs	r2, #5
 8007962:	761a      	strb	r2, [r3, #24]
      break;
 8007964:	e09c      	b.n	8007aa0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b04      	cmp	r3, #4
 800796a:	f040 8099 	bne.w	8007aa0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	220b      	movs	r2, #11
 8007972:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007974:	2302      	movs	r3, #2
 8007976:	73fb      	strb	r3, [r7, #15]
      break;
 8007978:	e092      	b.n	8007aa0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8d5 	bl	8007b32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2208      	movs	r2, #8
 8007998:	761a      	strb	r2, [r3, #24]

      break;
 800799a:	e086      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fc12 	bl	80081cc <USBH_LL_GetURBState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d105      	bne.n	80079be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	220d      	movs	r2, #13
 80079b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079bc:	e072      	b.n	8007aa4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d103      	bne.n	80079cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	220b      	movs	r2, #11
 80079c8:	761a      	strb	r2, [r3, #24]
      break;
 80079ca:	e06b      	b.n	8007aa4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b05      	cmp	r3, #5
 80079d0:	d168      	bne.n	8007aa4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80079d2:	2303      	movs	r3, #3
 80079d4:	73fb      	strb	r3, [r7, #15]
      break;
 80079d6:	e065      	b.n	8007aa4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	795b      	ldrb	r3, [r3, #5]
 80079dc:	2201      	movs	r2, #1
 80079de:	9200      	str	r2, [sp, #0]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f87f 	bl	8007ae8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220a      	movs	r2, #10
 80079fa:	761a      	strb	r2, [r3, #24]
      break;
 80079fc:	e055      	b.n	8007aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	795b      	ldrb	r3, [r3, #5]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fbe1 	bl	80081cc <USBH_LL_GetURBState>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d105      	bne.n	8007a20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	220d      	movs	r2, #13
 8007a1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a1e:	e043      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d103      	bne.n	8007a2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2209      	movs	r2, #9
 8007a2a:	761a      	strb	r2, [r3, #24]
      break;
 8007a2c:	e03c      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d139      	bne.n	8007aa8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	220b      	movs	r2, #11
 8007a38:	761a      	strb	r2, [r3, #24]
      break;
 8007a3a:	e035      	b.n	8007aa8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7e5b      	ldrb	r3, [r3, #25]
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	765a      	strb	r2, [r3, #25]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7e5b      	ldrb	r3, [r3, #25]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d806      	bhi.n	8007a5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a5c:	e025      	b.n	8007aaa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a64:	2106      	movs	r1, #6
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	795b      	ldrb	r3, [r3, #5]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f90c 	bl	8007c94 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f906 	bl	8007c94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	73fb      	strb	r3, [r7, #15]
      break;
 8007a92:	e00a      	b.n	8007aaa <USBH_HandleControl+0x2de>

    default:
      break;
 8007a94:	bf00      	nop
 8007a96:	e008      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e006      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e004      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa0:	bf00      	nop
 8007aa2:	e002      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <USBH_HandleControl+0x2de>
      break;
 8007aa8:	bf00      	nop
  }

  return status;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af04      	add	r7, sp, #16
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ac2:	79f9      	ldrb	r1, [r7, #7]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	2308      	movs	r3, #8
 8007aca:	9302      	str	r3, [sp, #8]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fb46 	bl	800816a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af04      	add	r7, sp, #16
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4611      	mov	r1, r2
 8007af4:	461a      	mov	r2, r3
 8007af6:	460b      	mov	r3, r1
 8007af8:	80fb      	strh	r3, [r7, #6]
 8007afa:	4613      	mov	r3, r2
 8007afc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b0c:	7979      	ldrb	r1, [r7, #5]
 8007b0e:	7e3b      	ldrb	r3, [r7, #24]
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	9302      	str	r3, [sp, #8]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 fb21 	bl	800816a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b088      	sub	sp, #32
 8007b36:	af04      	add	r7, sp, #16
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	461a      	mov	r2, r3
 8007b40:	460b      	mov	r3, r1
 8007b42:	80fb      	strh	r3, [r7, #6]
 8007b44:	4613      	mov	r3, r2
 8007b46:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b48:	7979      	ldrb	r1, [r7, #5]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9303      	str	r3, [sp, #12]
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	2301      	movs	r3, #1
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fb03 	bl	800816a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b64:	2300      	movs	r3, #0

}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af04      	add	r7, sp, #16
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	80fb      	strh	r3, [r7, #6]
 8007b80:	4613      	mov	r3, r2
 8007b82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b92:	7979      	ldrb	r1, [r7, #5]
 8007b94:	7e3b      	ldrb	r3, [r7, #24]
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	9302      	str	r3, [sp, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 fade 	bl	800816a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	80fb      	strh	r3, [r7, #6]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bce:	7979      	ldrb	r1, [r7, #5]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9303      	str	r3, [sp, #12]
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	9302      	str	r3, [sp, #8]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	2301      	movs	r3, #1
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2302      	movs	r3, #2
 8007be2:	2201      	movs	r2, #1
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fac0 	bl	800816a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af04      	add	r7, sp, #16
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	70fb      	strb	r3, [r7, #3]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70bb      	strb	r3, [r7, #2]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c0e:	7878      	ldrb	r0, [r7, #1]
 8007c10:	78ba      	ldrb	r2, [r7, #2]
 8007c12:	78f9      	ldrb	r1, [r7, #3]
 8007c14:	8b3b      	ldrh	r3, [r7, #24]
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	7d3b      	ldrb	r3, [r7, #20]
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	7c3b      	ldrb	r3, [r7, #16]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4603      	mov	r3, r0
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa53 	bl	80080ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa72 	bl	800812c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f836 	bl	8007cd0 <USBH_GetFreePipe>
 8007c64:	4603      	mov	r3, r0
 8007c66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c68:	89fb      	ldrh	r3, [r7, #14]
 8007c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00a      	beq.n	8007c88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c72:	78fa      	ldrb	r2, [r7, #3]
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	33e0      	adds	r3, #224	; 0xe0
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	b2db      	uxtb	r3, r3
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2b0a      	cmp	r3, #10
 8007ca4:	d80d      	bhi.n	8007cc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	33e0      	adds	r3, #224	; 0xe0
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	33e0      	adds	r3, #224	; 0xe0
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	440b      	add	r3, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	e00f      	b.n	8007d02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	33e0      	adds	r3, #224	; 0xe0
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d102      	bne.n	8007cfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	e007      	b.n	8007d0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	73fb      	strb	r3, [r7, #15]
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b0a      	cmp	r3, #10
 8007d06:	d9ec      	bls.n	8007ce2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	490e      	ldr	r1, [pc, #56]	; (8007d58 <MX_USB_HOST_Init+0x40>)
 8007d20:	480e      	ldr	r0, [pc, #56]	; (8007d5c <MX_USB_HOST_Init+0x44>)
 8007d22:	f7fe fca1 	bl	8006668 <USBH_Init>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d2c:	f7f8 fff0 	bl	8000d10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d30:	490b      	ldr	r1, [pc, #44]	; (8007d60 <MX_USB_HOST_Init+0x48>)
 8007d32:	480a      	ldr	r0, [pc, #40]	; (8007d5c <MX_USB_HOST_Init+0x44>)
 8007d34:	f7fe fd26 	bl	8006784 <USBH_RegisterClass>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d3e:	f7f8 ffe7 	bl	8000d10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d42:	4806      	ldr	r0, [pc, #24]	; (8007d5c <MX_USB_HOST_Init+0x44>)
 8007d44:	f7fe fdaa 	bl	800689c <USBH_Start>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d4e:	f7f8 ffdf 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	20000288 	.word	0x20000288
 8007d60:	2000000c 	.word	0x2000000c

08007d64 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d68:	4802      	ldr	r0, [pc, #8]	; (8007d74 <MX_USB_HOST_Process+0x10>)
 8007d6a:	f7fe fda7 	bl	80068bc <USBH_Process>
}
 8007d6e:	bf00      	nop
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000288 	.word	0x20000288

08007d78 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d819      	bhi.n	8007dc0 <USBH_UserProcess+0x48>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBH_UserProcess+0x1c>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dc1 	.word	0x08007dc1
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007db9 	.word	0x08007db9
 8007da4:	08007da9 	.word	0x08007da9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <USBH_UserProcess+0x58>)
 8007daa:	2203      	movs	r2, #3
 8007dac:	701a      	strb	r2, [r3, #0]
  break;
 8007dae:	e008      	b.n	8007dc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <USBH_UserProcess+0x58>)
 8007db2:	2202      	movs	r2, #2
 8007db4:	701a      	strb	r2, [r3, #0]
  break;
 8007db6:	e004      	b.n	8007dc2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <USBH_UserProcess+0x58>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	701a      	strb	r2, [r3, #0]
  break;
 8007dbe:	e000      	b.n	8007dc2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007dc0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000138 	.word	0x20000138

08007dd4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ddc:	f107 0314 	add.w	r3, r7, #20
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	609a      	str	r2, [r3, #8]
 8007de8:	60da      	str	r2, [r3, #12]
 8007dea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007df4:	d147      	bne.n	8007e86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	4a24      	ldr	r2, [pc, #144]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e00:	f043 0301 	orr.w	r3, r3, #1
 8007e04:	6313      	str	r3, [r2, #48]	; 0x30
 8007e06:	4b22      	ldr	r3, [pc, #136]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4619      	mov	r1, r3
 8007e26:	481b      	ldr	r0, [pc, #108]	; (8007e94 <HAL_HCD_MspInit+0xc0>)
 8007e28:	f7f9 fab8 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e32:	2302      	movs	r3, #2
 8007e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e3e:	230a      	movs	r3, #10
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e42:	f107 0314 	add.w	r3, r7, #20
 8007e46:	4619      	mov	r1, r3
 8007e48:	4812      	ldr	r0, [pc, #72]	; (8007e94 <HAL_HCD_MspInit+0xc0>)
 8007e4a:	f7f9 faa7 	bl	800139c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	4a0f      	ldr	r2, [pc, #60]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e58:	6353      	str	r3, [r2, #52]	; 0x34
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	4a0b      	ldr	r2, [pc, #44]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e68:	6453      	str	r3, [r2, #68]	; 0x44
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <HAL_HCD_MspInit+0xbc>)
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	2043      	movs	r0, #67	; 0x43
 8007e7c:	f7f9 fa64 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e80:	2043      	movs	r0, #67	; 0x43
 8007e82:	f7f9 fa7d 	bl	8001380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e86:	bf00      	nop
 8007e88:	3728      	adds	r7, #40	; 0x28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	40023800 	.word	0x40023800
 8007e94:	40020000 	.word	0x40020000

08007e98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f8db 	bl	8007062 <USBH_LL_IncTimer>
}
 8007eac:	bf00      	nop
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff f913 	bl	80070ee <USBH_LL_Connect>
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff f91c 	bl	800711c <USBH_LL_Disconnect>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff f8cd 	bl	80070b6 <USBH_LL_PortEnabled>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff f8cd 	bl	80070d2 <USBH_LL_PortDisabled>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d12a      	bne.n	8007fa8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f52:	4a18      	ldr	r2, [pc, #96]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f68:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f70:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f72:	2201      	movs	r2, #1
 8007f74:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f76:	4b0f      	ldr	r3, [pc, #60]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f7e:	2202      	movs	r2, #2
 8007f80:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f88:	480a      	ldr	r0, [pc, #40]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f8a:	f7f9 fbbc 	bl	8001706 <HAL_HCD_Init>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f94:	f7f8 febc 	bl	8000d10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f98:	4806      	ldr	r0, [pc, #24]	; (8007fb4 <USBH_LL_Init+0x74>)
 8007f9a:	f7f9 ffa0 	bl	8001ede <HAL_HCD_GetCurrentFrame>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff f84e 	bl	8007044 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000660 	.word	0x20000660

08007fb8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 ff0f 	bl	8001df2 <HAL_HCD_Start>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f95c 	bl	8008298 <USBH_Get_USB_Status>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008004:	4618      	mov	r0, r3
 8008006:	f7f9 ff17 	bl	8001e38 <HAL_HCD_Stop>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f941 	bl	8008298 <USBH_Get_USB_Status>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800802c:	2301      	movs	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008036:	4618      	mov	r0, r3
 8008038:	f7f9 ff5f 	bl	8001efa <HAL_HCD_GetCurrentSpeed>
 800803c:	4603      	mov	r3, r0
 800803e:	2b02      	cmp	r3, #2
 8008040:	d00c      	beq.n	800805c <USBH_LL_GetSpeed+0x38>
 8008042:	2b02      	cmp	r3, #2
 8008044:	d80d      	bhi.n	8008062 <USBH_LL_GetSpeed+0x3e>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <USBH_LL_GetSpeed+0x2c>
 800804a:	2b01      	cmp	r3, #1
 800804c:	d003      	beq.n	8008056 <USBH_LL_GetSpeed+0x32>
 800804e:	e008      	b.n	8008062 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
    break;
 8008054:	e008      	b.n	8008068 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008056:	2301      	movs	r3, #1
 8008058:	73fb      	strb	r3, [r7, #15]
    break;
 800805a:	e005      	b.n	8008068 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800805c:	2302      	movs	r3, #2
 800805e:	73fb      	strb	r3, [r7, #15]
    break;
 8008060:	e002      	b.n	8008068 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008062:	2301      	movs	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
    break;
 8008066:	bf00      	nop
  }
  return  speed;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008088:	4618      	mov	r0, r3
 800808a:	f7f9 fef2 	bl	8001e72 <HAL_HCD_ResetPort>
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 f8ff 	bl	8008298 <USBH_Get_USB_Status>
 800809a:	4603      	mov	r3, r0
 800809c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809e:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f9 fef9 	bl	8001eb6 <HAL_HCD_HC_GetXferCount>
 80080c4:	4603      	mov	r3, r0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080ce:	b590      	push	{r4, r7, lr}
 80080d0:	b089      	sub	sp, #36	; 0x24
 80080d2:	af04      	add	r7, sp, #16
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	461a      	mov	r2, r3
 80080dc:	4603      	mov	r3, r0
 80080de:	70fb      	strb	r3, [r7, #3]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70bb      	strb	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080f6:	787c      	ldrb	r4, [r7, #1]
 80080f8:	78ba      	ldrb	r2, [r7, #2]
 80080fa:	78f9      	ldrb	r1, [r7, #3]
 80080fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4623      	mov	r3, r4
 800810e:	f7f9 fb5c 	bl	80017ca <HAL_HCD_HC_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f8bd 	bl	8008298 <USBH_Get_USB_Status>
 800811e:	4603      	mov	r3, r0
 8008120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008122:	7bbb      	ldrb	r3, [r7, #14]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bd90      	pop	{r4, r7, pc}

0800812c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f7f9 fbcc 	bl	80018e8 <HAL_HCD_HC_Halt>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 f89e 	bl	8008298 <USBH_Get_USB_Status>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008160:	7bbb      	ldrb	r3, [r7, #14]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800816a:	b590      	push	{r4, r7, lr}
 800816c:	b089      	sub	sp, #36	; 0x24
 800816e:	af04      	add	r7, sp, #16
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	4608      	mov	r0, r1
 8008174:	4611      	mov	r1, r2
 8008176:	461a      	mov	r2, r3
 8008178:	4603      	mov	r3, r0
 800817a:	70fb      	strb	r3, [r7, #3]
 800817c:	460b      	mov	r3, r1
 800817e:	70bb      	strb	r3, [r7, #2]
 8008180:	4613      	mov	r3, r2
 8008182:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008192:	787c      	ldrb	r4, [r7, #1]
 8008194:	78ba      	ldrb	r2, [r7, #2]
 8008196:	78f9      	ldrb	r1, [r7, #3]
 8008198:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4623      	mov	r3, r4
 80081ae:	f7f9 fbbf 	bl	8001930 <HAL_HCD_HC_SubmitRequest>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f86d 	bl	8008298 <USBH_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd90      	pop	{r4, r7, pc}

080081cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	4611      	mov	r1, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f9 fe53 	bl	8001e8e <HAL_HCD_HC_GetURBState>
 80081e8:	4603      	mov	r3, r0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008204:	2b01      	cmp	r3, #1
 8008206:	d103      	bne.n	8008210 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f870 	bl	80082f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008210:	20c8      	movs	r0, #200	; 0xc8
 8008212:	f7f8 ffbd 	bl	8001190 <HAL_Delay>
  return USBH_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
 800822c:	4613      	mov	r3, r2
 800822e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008236:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	212c      	movs	r1, #44	; 0x2c
 800823e:	fb01 f303 	mul.w	r3, r1, r3
 8008242:	4413      	add	r3, r2
 8008244:	333b      	adds	r3, #59	; 0x3b
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d009      	beq.n	8008260 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	212c      	movs	r1, #44	; 0x2c
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	4413      	add	r3, r2
 8008258:	3354      	adds	r3, #84	; 0x54
 800825a:	78ba      	ldrb	r2, [r7, #2]
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e008      	b.n	8008272 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	212c      	movs	r1, #44	; 0x2c
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	4413      	add	r3, r2
 800826c:	3355      	adds	r3, #85	; 0x55
 800826e:	78ba      	ldrb	r2, [r7, #2]
 8008270:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7f8 ff81 	bl	8001190 <HAL_Delay>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d817      	bhi.n	80082dc <USBH_Get_USB_Status+0x44>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <USBH_Get_USB_Status+0x1c>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082cb 	.word	0x080082cb
 80082bc:	080082d1 	.word	0x080082d1
 80082c0:	080082d7 	.word	0x080082d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	e00b      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]
    break;
 80082ce:	e008      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	e005      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082d6:	2302      	movs	r3, #2
 80082d8:	73fb      	strb	r3, [r7, #15]
    break;
 80082da:	e002      	b.n	80082e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082dc:	2302      	movs	r3, #2
 80082de:	73fb      	strb	r3, [r7, #15]
    break;
 80082e0:	bf00      	nop
  }
  return usb_status;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
 8008308:	e001      	b.n	800830e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	461a      	mov	r2, r3
 8008312:	2101      	movs	r1, #1
 8008314:	4803      	ldr	r0, [pc, #12]	; (8008324 <MX_DriverVbusFS+0x34>)
 8008316:	f7f9 f9dd 	bl	80016d4 <HAL_GPIO_WritePin>
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	40020800 	.word	0x40020800

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f000 f906 	bl	800854c <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	08008588 	.word	0x08008588
 8008364:	08008588 	.word	0x08008588
 8008368:	08008588 	.word	0x08008588
 800836c:	0800858c 	.word	0x0800858c

08008370 <malloc>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <malloc+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f000 b863 	b.w	8008440 <_malloc_r>
 800837a:	bf00      	nop
 800837c:	2000002c 	.word	0x2000002c

08008380 <free>:
 8008380:	4b02      	ldr	r3, [pc, #8]	; (800838c <free+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f000 b80b 	b.w	80083a0 <_free_r>
 800838a:	bf00      	nop
 800838c:	2000002c 	.word	0x2000002c

08008390 <memset>:
 8008390:	4402      	add	r2, r0
 8008392:	4603      	mov	r3, r0
 8008394:	4293      	cmp	r3, r2
 8008396:	d100      	bne.n	800839a <memset+0xa>
 8008398:	4770      	bx	lr
 800839a:	f803 1b01 	strb.w	r1, [r3], #1
 800839e:	e7f9      	b.n	8008394 <memset+0x4>

080083a0 <_free_r>:
 80083a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083a2:	2900      	cmp	r1, #0
 80083a4:	d048      	beq.n	8008438 <_free_r+0x98>
 80083a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083aa:	9001      	str	r0, [sp, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f1a1 0404 	sub.w	r4, r1, #4
 80083b2:	bfb8      	it	lt
 80083b4:	18e4      	addlt	r4, r4, r3
 80083b6:	f000 f8ad 	bl	8008514 <__malloc_lock>
 80083ba:	4a20      	ldr	r2, [pc, #128]	; (800843c <_free_r+0x9c>)
 80083bc:	9801      	ldr	r0, [sp, #4]
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	4615      	mov	r5, r2
 80083c2:	b933      	cbnz	r3, 80083d2 <_free_r+0x32>
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	6014      	str	r4, [r2, #0]
 80083c8:	b003      	add	sp, #12
 80083ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ce:	f000 b8a7 	b.w	8008520 <__malloc_unlock>
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	d90b      	bls.n	80083ee <_free_r+0x4e>
 80083d6:	6821      	ldr	r1, [r4, #0]
 80083d8:	1862      	adds	r2, r4, r1
 80083da:	4293      	cmp	r3, r2
 80083dc:	bf04      	itt	eq
 80083de:	681a      	ldreq	r2, [r3, #0]
 80083e0:	685b      	ldreq	r3, [r3, #4]
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	bf04      	itt	eq
 80083e6:	1852      	addeq	r2, r2, r1
 80083e8:	6022      	streq	r2, [r4, #0]
 80083ea:	602c      	str	r4, [r5, #0]
 80083ec:	e7ec      	b.n	80083c8 <_free_r+0x28>
 80083ee:	461a      	mov	r2, r3
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b10b      	cbz	r3, 80083f8 <_free_r+0x58>
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d9fa      	bls.n	80083ee <_free_r+0x4e>
 80083f8:	6811      	ldr	r1, [r2, #0]
 80083fa:	1855      	adds	r5, r2, r1
 80083fc:	42a5      	cmp	r5, r4
 80083fe:	d10b      	bne.n	8008418 <_free_r+0x78>
 8008400:	6824      	ldr	r4, [r4, #0]
 8008402:	4421      	add	r1, r4
 8008404:	1854      	adds	r4, r2, r1
 8008406:	42a3      	cmp	r3, r4
 8008408:	6011      	str	r1, [r2, #0]
 800840a:	d1dd      	bne.n	80083c8 <_free_r+0x28>
 800840c:	681c      	ldr	r4, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	6053      	str	r3, [r2, #4]
 8008412:	4421      	add	r1, r4
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	e7d7      	b.n	80083c8 <_free_r+0x28>
 8008418:	d902      	bls.n	8008420 <_free_r+0x80>
 800841a:	230c      	movs	r3, #12
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	e7d3      	b.n	80083c8 <_free_r+0x28>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf04      	itt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	6063      	str	r3, [r4, #4]
 800842e:	bf04      	itt	eq
 8008430:	1949      	addeq	r1, r1, r5
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	6054      	str	r4, [r2, #4]
 8008436:	e7c7      	b.n	80083c8 <_free_r+0x28>
 8008438:	b003      	add	sp, #12
 800843a:	bd30      	pop	{r4, r5, pc}
 800843c:	2000013c 	.word	0x2000013c

08008440 <_malloc_r>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	1ccd      	adds	r5, r1, #3
 8008444:	f025 0503 	bic.w	r5, r5, #3
 8008448:	3508      	adds	r5, #8
 800844a:	2d0c      	cmp	r5, #12
 800844c:	bf38      	it	cc
 800844e:	250c      	movcc	r5, #12
 8008450:	2d00      	cmp	r5, #0
 8008452:	4606      	mov	r6, r0
 8008454:	db01      	blt.n	800845a <_malloc_r+0x1a>
 8008456:	42a9      	cmp	r1, r5
 8008458:	d903      	bls.n	8008462 <_malloc_r+0x22>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	2000      	movs	r0, #0
 8008460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008462:	f000 f857 	bl	8008514 <__malloc_lock>
 8008466:	4921      	ldr	r1, [pc, #132]	; (80084ec <_malloc_r+0xac>)
 8008468:	680a      	ldr	r2, [r1, #0]
 800846a:	4614      	mov	r4, r2
 800846c:	b99c      	cbnz	r4, 8008496 <_malloc_r+0x56>
 800846e:	4f20      	ldr	r7, [pc, #128]	; (80084f0 <_malloc_r+0xb0>)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	b923      	cbnz	r3, 800847e <_malloc_r+0x3e>
 8008474:	4621      	mov	r1, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f000 f83c 	bl	80084f4 <_sbrk_r>
 800847c:	6038      	str	r0, [r7, #0]
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f837 	bl	80084f4 <_sbrk_r>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	d123      	bne.n	80084d2 <_malloc_r+0x92>
 800848a:	230c      	movs	r3, #12
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	4630      	mov	r0, r6
 8008490:	f000 f846 	bl	8008520 <__malloc_unlock>
 8008494:	e7e3      	b.n	800845e <_malloc_r+0x1e>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	1b5b      	subs	r3, r3, r5
 800849a:	d417      	bmi.n	80084cc <_malloc_r+0x8c>
 800849c:	2b0b      	cmp	r3, #11
 800849e:	d903      	bls.n	80084a8 <_malloc_r+0x68>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	441c      	add	r4, r3
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	e004      	b.n	80084b2 <_malloc_r+0x72>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	42a2      	cmp	r2, r4
 80084ac:	bf0c      	ite	eq
 80084ae:	600b      	streq	r3, [r1, #0]
 80084b0:	6053      	strne	r3, [r2, #4]
 80084b2:	4630      	mov	r0, r6
 80084b4:	f000 f834 	bl	8008520 <__malloc_unlock>
 80084b8:	f104 000b 	add.w	r0, r4, #11
 80084bc:	1d23      	adds	r3, r4, #4
 80084be:	f020 0007 	bic.w	r0, r0, #7
 80084c2:	1ac2      	subs	r2, r0, r3
 80084c4:	d0cc      	beq.n	8008460 <_malloc_r+0x20>
 80084c6:	1a1b      	subs	r3, r3, r0
 80084c8:	50a3      	str	r3, [r4, r2]
 80084ca:	e7c9      	b.n	8008460 <_malloc_r+0x20>
 80084cc:	4622      	mov	r2, r4
 80084ce:	6864      	ldr	r4, [r4, #4]
 80084d0:	e7cc      	b.n	800846c <_malloc_r+0x2c>
 80084d2:	1cc4      	adds	r4, r0, #3
 80084d4:	f024 0403 	bic.w	r4, r4, #3
 80084d8:	42a0      	cmp	r0, r4
 80084da:	d0e3      	beq.n	80084a4 <_malloc_r+0x64>
 80084dc:	1a21      	subs	r1, r4, r0
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 f808 	bl	80084f4 <_sbrk_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d1dd      	bne.n	80084a4 <_malloc_r+0x64>
 80084e8:	e7cf      	b.n	800848a <_malloc_r+0x4a>
 80084ea:	bf00      	nop
 80084ec:	2000013c 	.word	0x2000013c
 80084f0:	20000140 	.word	0x20000140

080084f4 <_sbrk_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d06      	ldr	r5, [pc, #24]	; (8008510 <_sbrk_r+0x1c>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	f000 f816 	bl	8008530 <_sbrk>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_sbrk_r+0x1a>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_sbrk_r+0x1a>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	20000964 	.word	0x20000964

08008514 <__malloc_lock>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__malloc_lock+0x8>)
 8008516:	f000 b809 	b.w	800852c <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	2000096c 	.word	0x2000096c

08008520 <__malloc_unlock>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__malloc_unlock+0x8>)
 8008522:	f000 b804 	b.w	800852e <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	2000096c 	.word	0x2000096c

0800852c <__retarget_lock_acquire_recursive>:
 800852c:	4770      	bx	lr

0800852e <__retarget_lock_release_recursive>:
 800852e:	4770      	bx	lr

08008530 <_sbrk>:
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <_sbrk+0x14>)
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	4602      	mov	r2, r0
 8008536:	b909      	cbnz	r1, 800853c <_sbrk+0xc>
 8008538:	4903      	ldr	r1, [pc, #12]	; (8008548 <_sbrk+0x18>)
 800853a:	6019      	str	r1, [r3, #0]
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	4402      	add	r2, r0
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	4770      	bx	lr
 8008544:	20000144 	.word	0x20000144
 8008548:	20000978 	.word	0x20000978

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
