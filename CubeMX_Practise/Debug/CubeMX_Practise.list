
CubeMX_Practise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008124  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d0  080082d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080082d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000090  08008368  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  08008368  000208a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5e2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca4  00000000  00000000  0003b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0003f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ec8  00000000  00000000  000417b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018767  00000000  00000000  00065680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccf6  00000000  00000000  0007dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014aadd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000512c  00000000  00000000  0014ab30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008294 	.word	0x08008294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008294 	.word	0x08008294

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc64 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f810 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f94e 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8ba 	bl	800064c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8e8 	bl	80006ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f91c 	bl	8000718 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004e0:	f007 fac4 	bl	8007a6c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f007 fae8 	bl	8007ab8 <MX_USB_HOST_Process>
 80004e8:	e7fc      	b.n	80004e4 <main+0x24>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b098      	sub	sp, #96	; 0x60
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f007 fdfa 	bl	80080f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <SystemClock_Config+0xfc>)
 8000524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000526:	4a30      	ldr	r2, [pc, #192]	; (80005e8 <SystemClock_Config+0xfc>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	6413      	str	r3, [r2, #64]	; 0x40
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <SystemClock_Config+0xfc>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <SystemClock_Config+0x100>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2a      	ldr	r2, [pc, #168]	; (80005ec <SystemClock_Config+0x100>)
 8000544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0x100>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000556:	2301      	movs	r3, #1
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000564:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056a:	2308      	movs	r3, #8
 800056c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000580:	4618      	mov	r0, r3
 8000582:	f003 fa39 	bl	80039f8 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800058c:	f000 f9ec 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800059c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	2105      	movs	r1, #5
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fc92 	bl	8003ed8 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ba:	f000 f9d5 	bl	8000968 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005c2:	23c0      	movs	r3, #192	; 0xc0
 80005c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fe7e 	bl	80042d0 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005da:	f000 f9c5 	bl	8000968 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3760      	adds	r7, #96	; 0x60
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C1_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C1_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C1_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C1_Init+0x50>)
 800062e:	f002 fbff 	bl	8002e30 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f996 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000c0 	.word	0x200000c0
 8000644:	40005400 	.word	0x40005400
 8000648:	000186a0 	.word	0x000186a0

0800064c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <MX_I2S3_Init+0x58>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <MX_I2S3_Init+0x5c>)
 8000676:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_I2S3_Init+0x54>)
 800068c:	f002 fd14 	bl	80030b8 <HAL_I2S_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000696:	f000 f967 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001ac 	.word	0x200001ac
 80006a4:	40003c00 	.word	0x40003c00
 80006a8:	00017700 	.word	0x00017700

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_SPI1_Init+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_SPI1_Init+0x64>)
 80006f8:	220a      	movs	r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_SPI1_Init+0x64>)
 80006fe:	f003 ff27 	bl	8004550 <HAL_SPI_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f92e 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000114 	.word	0x20000114
 8000714:	40013000 	.word	0x40013000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f003 ff62 	bl	8004618 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f905 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000016c 	.word	0x2000016c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4b71      	ldr	r3, [pc, #452]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a70      	ldr	r2, [pc, #448]	; (800094c <MX_GPIO_Init+0x1e0>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b6e      	ldr	r3, [pc, #440]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a69      	ldr	r2, [pc, #420]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b67      	ldr	r3, [pc, #412]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b63      	ldr	r3, [pc, #396]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a62      	ldr	r2, [pc, #392]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b60      	ldr	r3, [pc, #384]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b5c      	ldr	r3, [pc, #368]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5b      	ldr	r2, [pc, #364]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b59      	ldr	r3, [pc, #356]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b55      	ldr	r3, [pc, #340]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a54      	ldr	r2, [pc, #336]	; (800094c <MX_GPIO_Init+0x1e0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b52      	ldr	r3, [pc, #328]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b4e      	ldr	r3, [pc, #312]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a4d      	ldr	r2, [pc, #308]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b4b      	ldr	r3, [pc, #300]	; (800094c <MX_GPIO_Init+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4848      	ldr	r0, [pc, #288]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000830:	f000 fdf2 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4846      	ldr	r0, [pc, #280]	; (8000954 <MX_GPIO_Init+0x1e8>)
 800083a:	f000 fded 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4844      	ldr	r0, [pc, #272]	; (8000958 <MX_GPIO_Init+0x1ec>)
 8000846:	f000 fde7 	bl	8001418 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	483b      	ldr	r0, [pc, #236]	; (8000950 <MX_GPIO_Init+0x1e4>)
 8000862:	f000 fc3d 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4835      	ldr	r0, [pc, #212]	; (8000954 <MX_GPIO_Init+0x1e8>)
 800087e:	f000 fc2f 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	482d      	ldr	r0, [pc, #180]	; (8000954 <MX_GPIO_Init+0x1e8>)
 800089e:	f000 fc1f 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_GPIO_Init+0x1f0>)
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x1f4>)
 80008b6:	f000 fc13 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ba:	2304      	movs	r3, #4
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4825      	ldr	r0, [pc, #148]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008ce:	f000 fc07 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481d      	ldr	r0, [pc, #116]	; (8000964 <MX_GPIO_Init+0x1f8>)
 80008f0:	f000 fbf6 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008f4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4812      	ldr	r0, [pc, #72]	; (8000958 <MX_GPIO_Init+0x1ec>)
 800090e:	f000 fbe7 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000912:	2320      	movs	r3, #32
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_GPIO_Init+0x1ec>)
 8000926:	f000 fbdb 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_GPIO_Init+0x1f0>)
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x1e4>)
 800093e:	f000 fbcf 	bl	80010e0 <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	10120000 	.word	0x10120000
 8000960:	40020000 	.word	0x40020000
 8000964:	40020400 	.word	0x40020400

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009b6:	2007      	movs	r0, #7
 80009b8:	f000 fb50 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <HAL_I2C_MspInit+0x84>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12c      	bne.n	8000a44 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0c:	2312      	movs	r3, #18
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <HAL_I2C_MspInit+0x8c>)
 8000a24:	f000 fb5c 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_I2C_MspInit+0x88>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <HAL_I2S_MspInit+0xc0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d14a      	bne.n	8000b10 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_I2S_MspInit+0xc4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <HAL_I2S_MspInit+0xc8>)
 8000aea:	f000 faf9 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aee:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b00:	2306      	movs	r3, #6
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_I2S_MspInit+0xcc>)
 8000b0c:	f000 fae8 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40003c00 	.word	0x40003c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b82:	23e0      	movs	r3, #224	; 0xe0
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b92:	2305      	movs	r3, #5
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	f000 fa9f 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f000 fa57 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f8ca 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <OTG_FS_IRQHandler+0x10>)
 8000caa:	f000 fe5d 	bl	8001968 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200005d0 	.word	0x200005d0

08000cb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x50>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x16>
		heap_end = &end;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <_sbrk+0x50>)
 8000cca:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <_sbrk+0x54>)
 8000ccc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <_sbrk+0x50>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <_sbrk+0x50>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	466a      	mov	r2, sp
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d907      	bls.n	8000cf2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ce2:	f007 f9cd 	bl	8008080 <__errno>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	220c      	movs	r2, #12
 8000cea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	e006      	b.n	8000d00 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <_sbrk+0x50>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <_sbrk+0x50>)
 8000cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	200008a8 	.word	0x200008a8

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <SystemInit+0x28>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <SystemInit+0x28>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SystemInit+0x28>)
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr  r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d5c:	f842 3b04 	str.w	r3, [r2], #4

08000d60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd3 	bl	8000d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f007 f98f 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fba7 	bl	80004c0 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d78:	080082d8 	.word	0x080082d8
  ldr  r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d80:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000d84:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000d88:	200008a4 	.word	0x200008a4

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f94f 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fdd8 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f967 	bl	80010c6 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f92f 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200001f4 	.word	0x200001f4

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001f4 	.word	0x200001f4

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff3e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff31 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e16b      	b.n	80013d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 815a 	bne.w	80013ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d00b      	beq.n	800113a <HAL_GPIO_Init+0x5a>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112e:	2b11      	cmp	r3, #17
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b12      	cmp	r3, #18
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0xfc>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d123      	bne.n	8001224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	69b9      	ldr	r1, [r7, #24]
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0203 	and.w	r2, r3, #3
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80b4 	beq.w	80013ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <HAL_GPIO_Init+0x30c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_GPIO_Init+0x30c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001282:	4a5b      	ldr	r2, [pc, #364]	; (80013f0 <HAL_GPIO_Init+0x310>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x314>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d02b      	beq.n	8001306 <HAL_GPIO_Init+0x226>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a51      	ldr	r2, [pc, #324]	; (80013f8 <HAL_GPIO_Init+0x318>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x222>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a50      	ldr	r2, [pc, #320]	; (80013fc <HAL_GPIO_Init+0x31c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x21e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <HAL_GPIO_Init+0x320>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x21a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_GPIO_Init+0x324>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x216>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_GPIO_Init+0x328>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x212>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	; (800140c <HAL_GPIO_Init+0x32c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x20e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <HAL_GPIO_Init+0x330>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x20a>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e00e      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x228>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x228>
 8001306:	2300      	movs	r3, #0
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001318:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x310>)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x334>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x334>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x334>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_GPIO_Init+0x334>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3301      	adds	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	f67f ae90 	bls.w	80010fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40021c00 	.word	0x40021c00
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800144a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144c:	b08f      	sub	sp, #60	; 0x3c
 800144e:	af0a      	add	r7, sp, #40	; 0x28
 8001450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e054      	b.n	8001506 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f006 fb56 	bl	8007b28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fd18 	bl	8004ed0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	687e      	ldr	r6, [r7, #4]
 80014a8:	466d      	mov	r5, sp
 80014aa:	f106 0410 	add.w	r4, r6, #16
 80014ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80014be:	1d33      	adds	r3, r6, #4
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	6838      	ldr	r0, [r7, #0]
 80014c4:	f003 fc92 	bl	8004dec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f003 fd0f 	bl	8004ef2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	687e      	ldr	r6, [r7, #4]
 80014dc:	466d      	mov	r5, sp
 80014de:	f106 0410 	add.w	r4, r6, #16
 80014e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f2:	1d33      	adds	r3, r6, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f003 fe22 	bl	8005140 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800150e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800150e:	b590      	push	{r4, r7, lr}
 8001510:	b089      	sub	sp, #36	; 0x24
 8001512:	af04      	add	r7, sp, #16
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	4608      	mov	r0, r1
 8001518:	4611      	mov	r1, r2
 800151a:	461a      	mov	r2, r3
 800151c:	4603      	mov	r3, r0
 800151e:	70fb      	strb	r3, [r7, #3]
 8001520:	460b      	mov	r3, r1
 8001522:	70bb      	strb	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_HCD_HC_Init+0x28>
 8001532:	2302      	movs	r3, #2
 8001534:	e07f      	b.n	8001636 <HAL_HCD_HC_Init+0x128>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	333d      	adds	r3, #61	; 0x3d
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3338      	adds	r3, #56	; 0x38
 8001562:	787a      	ldrb	r2, [r7, #1]
 8001564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3340      	adds	r3, #64	; 0x40
 8001576:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001578:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	3339      	adds	r3, #57	; 0x39
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	333f      	adds	r3, #63	; 0x3f
 800159e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	78bb      	ldrb	r3, [r7, #2]
 80015a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ac:	b2d8      	uxtb	r0, r3
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	440b      	add	r3, r1
 80015ba:	333a      	adds	r3, #58	; 0x3a
 80015bc:	4602      	mov	r2, r0
 80015be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da0a      	bge.n	80015de <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	333b      	adds	r3, #59	; 0x3b
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e009      	b.n	80015f2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	333b      	adds	r3, #59	; 0x3b
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	333c      	adds	r3, #60	; 0x3c
 8001602:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001606:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	787c      	ldrb	r4, [r7, #1]
 800160e:	78ba      	ldrb	r2, [r7, #2]
 8001610:	78f9      	ldrb	r1, [r7, #3]
 8001612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4623      	mov	r3, r4
 8001624:	f003 ff0e 	bl	8005444 <USB_HC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_HCD_HC_Halt+0x1e>
 8001658:	2302      	movs	r3, #2
 800165a:	e00f      	b.n	800167c <HAL_HCD_HC_Halt+0x3e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f948 	bl	8005902 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	70fb      	strb	r3, [r7, #3]
 8001696:	460b      	mov	r3, r1
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	333b      	adds	r3, #59	; 0x3b
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	333f      	adds	r3, #63	; 0x3f
 80016c2:	787a      	ldrb	r2, [r7, #1]
 80016c4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016c6:	7c3b      	ldrb	r3, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d114      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	3342      	adds	r3, #66	; 0x42
 80016dc:	2203      	movs	r2, #3
 80016de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	333d      	adds	r3, #61	; 0x3d
 80016f0:	7f3a      	ldrb	r2, [r7, #28]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e009      	b.n	800170a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3342      	adds	r3, #66	; 0x42
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800170a:	787b      	ldrb	r3, [r7, #1]
 800170c:	2b03      	cmp	r3, #3
 800170e:	f200 80d6 	bhi.w	80018be <HAL_HCD_HC_SubmitRequest+0x23a>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001729 	.word	0x08001729
 800171c:	080018a9 	.word	0x080018a9
 8001720:	08001795 	.word	0x08001795
 8001724:	0800181f 	.word	0x0800181f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 80c9 	bne.w	80018c2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001730:	78bb      	ldrb	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f040 80c5 	bne.w	80018c2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001738:	8b3b      	ldrh	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3351      	adds	r3, #81	; 0x51
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3351      	adds	r3, #81	; 0x51
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800177c:	e0a1      	b.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3342      	adds	r3, #66	; 0x42
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]
      break;
 8001792:	e096      	b.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001794:	78bb      	ldrb	r3, [r7, #2]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d120      	bne.n	80017dc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3351      	adds	r3, #81	; 0x51
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017c4:	e07e      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3342      	adds	r3, #66	; 0x42
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
      break;
 80017da:	e073      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	3350      	adds	r3, #80	; 0x50
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e05d      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3342      	adds	r3, #66	; 0x42
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
      break;
 800181c:	e052      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800181e:	78bb      	ldrb	r3, [r7, #2]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d120      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3351      	adds	r3, #81	; 0x51
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800184e:	e039      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3342      	adds	r3, #66	; 0x42
 8001860:	2202      	movs	r2, #2
 8001862:	701a      	strb	r2, [r3, #0]
      break;
 8001864:	e02e      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3350      	adds	r3, #80	; 0x50
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10a      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3342      	adds	r3, #66	; 0x42
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
      break;
 8001890:	e018      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
      break;
 80018a6:	e00d      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3342      	adds	r3, #66	; 0x42
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
      break;
 80018bc:	e002      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80018be:	bf00      	nop
 80018c0:	e000      	b.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80018c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3344      	adds	r3, #68	; 0x44
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	8b39      	ldrh	r1, [r7, #24]
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4403      	add	r3, r0
 80018e8:	3348      	adds	r3, #72	; 0x48
 80018ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	335c      	adds	r3, #92	; 0x5c
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	334c      	adds	r3, #76	; 0x4c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3339      	adds	r3, #57	; 0x39
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	335d      	adds	r3, #93	; 0x5d
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	3338      	adds	r3, #56	; 0x38
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	18d1      	adds	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	f003 fe7e 	bl	8005658 <USB_HC_StartXfer>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop

08001968 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 fb9b 	bl	80050ba <USB_GetMode>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 80ef 	bne.w	8001b6a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fb7f 	bl	8005094 <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80e5 	beq.w	8001b68 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 fb76 	bl	8005094 <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b2:	d104      	bne.n	80019be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fb66 	bl	8005094 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019d2:	d104      	bne.n	80019de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fb56 	bl	8005094 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019f2:	d104      	bne.n	80019fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fb46 	bl	8005094 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d103      	bne.n	8001a1a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fb38 	bl	8005094 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2e:	d115      	bne.n	8001a5c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a38:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f006 f8ea 	bl	8007c24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fc2e 	bl	80052b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fb17 	bl	8005094 <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d102      	bne.n	8001a78 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f001 f968 	bl	8002d48 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fb09 	bl	8005094 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d106      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f006 f8ad 	bl	8007bec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2208      	movs	r2, #8
 8001a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 faf8 	bl	8005094 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aae:	d138      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 ff13 	bl	80058e0 <USB_HC_ReadInterrupt>
 8001aba:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	e025      	b.n	8001b0e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d018      	beq.n	8001b08 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aec:	d106      	bne.n	8001afc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8cf 	bl	8001c98 <HCD_HC_IN_IRQHandler>
 8001afa:	e005      	b.n	8001b08 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fcfd 	bl	8002502 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d3d4      	bcc.n	8001ac2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fab4 	bl	8005094 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d101      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x1d2>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_HCD_IRQHandler+0x1d4>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d014      	beq.n	8001b6a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0210 	bic.w	r2, r2, #16
 8001b4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f001 f84b 	bl	8002bec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0210 	orr.w	r2, r2, #16
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e000      	b.n	8001b6a <HAL_HCD_IRQHandler+0x202>
      return;
 8001b68:	bf00      	nop
    }
  }
}
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_Start+0x16>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e013      	b.n	8001bae <HAL_HCD_Start+0x3e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f98b 	bl	8004eae <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fbee 	bl	8005380 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_HCD_Stop+0x16>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00d      	b.n	8001be8 <HAL_HCD_Stop+0x32>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 ffcd 	bl	8005b78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 fb95 	bl	800532c <USB_ResetPort>
 8001c02:	4603      	mov	r3, r0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	335c      	adds	r3, #92	; 0x5c
 8001c28:	781b      	ldrb	r3, [r3, #0]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	334c      	adds	r3, #76	; 0x4c
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fbd7 	bl	8005420 <USB_GetCurrentFrame>
 8001c72:	4603      	mov	r3, r0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fbb2 	bl	80053f2 <USB_GetHostSpeed>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d119      	bne.n	8001cfc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	0151      	lsls	r1, r2, #5
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	60d3      	str	r3, [r2, #12]
 8001cfa:	e0ce      	b.n	8001e9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	015a      	lsls	r2, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4413      	add	r3, r2
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d12:	d12c      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d20:	461a      	mov	r2, r3
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	335d      	adds	r3, #93	; 0x5d
 8001d38:	2207      	movs	r2, #7
 8001d3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	0151      	lsls	r1, r2, #5
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	440a      	add	r2, r1
 8001d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fdcb 	bl	8005902 <USB_HC_Halt>
 8001d6c:	e095      	b.n	8001e9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d109      	bne.n	8001d98 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	461a      	mov	r2, r3
 8001d92:	2320      	movs	r3, #32
 8001d94:	6093      	str	r3, [r2, #8]
 8001d96:	e080      	b.n	8001e9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d134      	bne.n	8001e18 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	0151      	lsls	r1, r2, #5
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	440a      	add	r2, r1
 8001dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	335d      	adds	r3, #93	; 0x5d
 8001dde:	2205      	movs	r2, #5
 8001de0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	461a      	mov	r2, r3
 8001df0:	2310      	movs	r3, #16
 8001df2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	2308      	movs	r3, #8
 8001e04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fd76 	bl	8005902 <USB_HC_Halt>
 8001e16:	e040      	b.n	8001e9a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2e:	d134      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	0151      	lsls	r1, r2, #5
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	440a      	add	r2, r1
 8001e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fd51 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2310      	movs	r3, #16
 8001e70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	335d      	adds	r3, #93	; 0x5d
 8001e82:	2208      	movs	r2, #8
 8001e84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	461a      	mov	r2, r3
 8001e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e98:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb0:	d122      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	0151      	lsls	r1, r2, #5
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	440a      	add	r2, r1
 8001ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fd10 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ef6:	e300      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	f040 80fd 	bne.w	800210a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3348      	adds	r3, #72	; 0x48
 8001f28:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	0159      	lsls	r1, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001f3c:	1ad1      	subs	r1, r2, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4403      	add	r3, r0
 8001f4c:	334c      	adds	r3, #76	; 0x4c
 8001f4e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	335d      	adds	r3, #93	; 0x5d
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3358      	adds	r3, #88	; 0x58
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2301      	movs	r3, #1
 8001f88:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	440b      	add	r3, r1
 8001f98:	333f      	adds	r3, #63	; 0x3f
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	333f      	adds	r3, #63	; 0x3f
 8001fb0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d121      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	0151      	lsls	r1, r2, #5
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	440a      	add	r2, r1
 8001fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fc8e 	bl	8005902 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2310      	movs	r3, #16
 8001ff6:	6093      	str	r3, [r2, #8]
 8001ff8:	e070      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	333f      	adds	r3, #63	; 0x3f
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d12a      	bne.n	8002066 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	0151      	lsls	r1, r2, #5
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	440a      	add	r2, r1
 8002026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800202e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	335c      	adds	r3, #92	; 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	b2d8      	uxtb	r0, r3
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	335c      	adds	r3, #92	; 0x5c
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4601      	mov	r1, r0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f005 fdee 	bl	8007c40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002064:	e03a      	b.n	80020dc <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	333f      	adds	r3, #63	; 0x3f
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d12f      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	335c      	adds	r3, #92	; 0x5c
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3350      	adds	r3, #80	; 0x50
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2d8      	uxtb	r0, r3
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	3350      	adds	r3, #80	; 0x50
 80020b8:	4602      	mov	r2, r0
 80020ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	b2d8      	uxtb	r0, r3
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335c      	adds	r3, #92	; 0x5c
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4601      	mov	r1, r0
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 fdb2 	bl	8007c40 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	3350      	adds	r3, #80	; 0x50
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2d8      	uxtb	r0, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3350      	adds	r3, #80	; 0x50
 8002104:	4602      	mov	r2, r0
 8002106:	701a      	strb	r2, [r3, #0]
}
 8002108:	e1f7      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	f040 811a 	bne.w	8002356 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	0151      	lsls	r1, r2, #5
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	440a      	add	r2, r1
 8002138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	335d      	adds	r3, #93	; 0x5d
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10a      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	335c      	adds	r3, #92	; 0x5c
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e0d9      	b.n	8002322 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	335d      	adds	r3, #93	; 0x5d
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10a      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	335c      	adds	r3, #92	; 0x5c
 8002194:	2205      	movs	r2, #5
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e0c3      	b.n	8002322 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335d      	adds	r3, #93	; 0x5d
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d00a      	beq.n	80021c6 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	335d      	adds	r3, #93	; 0x5d
 80021c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d156      	bne.n	8002274 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	3358      	adds	r3, #88	; 0x58
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4403      	add	r3, r0
 80021e8:	3358      	adds	r3, #88	; 0x58
 80021ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3358      	adds	r3, #88	; 0x58
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d914      	bls.n	800222c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3358      	adds	r3, #88	; 0x58
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	2204      	movs	r2, #4
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e009      	b.n	8002240 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	2202      	movs	r2, #2
 800223e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002256:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800225e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e056      	b.n	8002322 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	335d      	adds	r3, #93	; 0x5d
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d123      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	335c      	adds	r3, #92	; 0x5c
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022bc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e027      	b.n	8002322 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	335d      	adds	r3, #93	; 0x5d
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d11c      	bne.n	8002322 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3358      	adds	r3, #88	; 0x58
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4403      	add	r3, r0
 800230a:	3358      	adds	r3, #88	; 0x58
 800230c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	2204      	movs	r2, #4
 8002320:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	461a      	mov	r2, r3
 8002330:	2302      	movs	r3, #2
 8002332:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	b2d8      	uxtb	r0, r3
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	4601      	mov	r1, r0
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f005 fc76 	bl	8007c40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002354:	e0d1      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	2b80      	cmp	r3, #128	; 0x80
 800236a:	d13e      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	0151      	lsls	r1, r2, #5
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	440a      	add	r2, r1
 8002382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3358      	adds	r3, #88	; 0x58
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4403      	add	r3, r0
 80023ae:	3358      	adds	r3, #88	; 0x58
 80023b0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	335d      	adds	r3, #93	; 0x5d
 80023c2:	2206      	movs	r2, #6
 80023c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fa96 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	6093      	str	r3, [r2, #8]
}
 80023e8:	e087      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b10      	cmp	r3, #16
 80023fe:	d17c      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	333f      	adds	r3, #63	; 0x3f
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d122      	bne.n	800245c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3358      	adds	r3, #88	; 0x58
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	0151      	lsls	r1, r2, #5
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	440a      	add	r2, r1
 8002440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f003 fa54 	bl	8005902 <USB_HC_Halt>
 800245a:	e045      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	333f      	adds	r3, #63	; 0x3f
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	333f      	adds	r3, #63	; 0x3f
 8002482:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002484:	2b02      	cmp	r3, #2
 8002486:	d12f      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3358      	adds	r3, #88	; 0x58
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d121      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	335d      	adds	r3, #93	; 0x5d
 80024b4:	2203      	movs	r2, #3
 80024b6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fa0d 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2310      	movs	r3, #16
 80024f8:	6093      	str	r3, [r2, #8]
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b086      	sub	sp, #24
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d119      	bne.n	8002566 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	2304      	movs	r3, #4
 8002542:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	0151      	lsls	r1, r2, #5
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	440a      	add	r2, r1
 800255a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002564:	e33e      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b20      	cmp	r3, #32
 800257a:	d141      	bne.n	8002600 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	2320      	movs	r3, #32
 800258c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	333d      	adds	r3, #61	; 0x3d
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	f040 831f 	bne.w	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	333d      	adds	r3, #61	; 0x3d
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	440b      	add	r3, r1
 80025c8:	335c      	adds	r3, #92	; 0x5c
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	0151      	lsls	r1, r2, #5
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	440a      	add	r2, r1
 80025e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 f982 	bl	8005902 <USB_HC_Halt>
}
 80025fe:	e2f1      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d13f      	bne.n	8002696 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	335d      	adds	r3, #93	; 0x5d
 8002626:	2204      	movs	r2, #4
 8002628:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	333d      	adds	r3, #61	; 0x3d
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	3358      	adds	r3, #88	; 0x58
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	440a      	add	r2, r1
 8002668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f003 f940 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	6093      	str	r3, [r2, #8]
}
 8002694:	e2a6      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ac:	d122      	bne.n	80026f4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	0151      	lsls	r1, r2, #5
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	440a      	add	r2, r1
 80026c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f912 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f0:	6093      	str	r3, [r2, #8]
}
 80026f2:	e277      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d135      	bne.n	8002776 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3358      	adds	r3, #88	; 0x58
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	440a      	add	r2, r1
 8002734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 f8da 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2301      	movs	r3, #1
 800275e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	335d      	adds	r3, #93	; 0x5d
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
}
 8002774:	e236      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d12b      	bne.n	80027e4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	2308      	movs	r3, #8
 800279c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 f89a 	bl	8005902 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	335d      	adds	r3, #93	; 0x5d
 80027de:	2205      	movs	r2, #5
 80027e0:	701a      	strb	r2, [r3, #0]
}
 80027e2:	e1ff      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0310 	and.w	r3, r3, #16
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d155      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	3358      	adds	r3, #88	; 0x58
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	335d      	adds	r3, #93	; 0x5d
 800281e:	2203      	movs	r2, #3
 8002820:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	333d      	adds	r3, #61	; 0x3d
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d114      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	333c      	adds	r3, #60	; 0x3c
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	333d      	adds	r3, #61	; 0x3d
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	440a      	add	r2, r1
 8002878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f838 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	2310      	movs	r3, #16
 80028a2:	6093      	str	r3, [r2, #8]
}
 80028a4:	e19e      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b80      	cmp	r3, #128	; 0x80
 80028ba:	d12b      	bne.n	8002914 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d6:	f043 0302 	orr.w	r3, r3, #2
 80028da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 f80b 	bl	8005902 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	335d      	adds	r3, #93	; 0x5d
 80028fc:	2206      	movs	r2, #6
 80028fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	6093      	str	r3, [r2, #8]
}
 8002912:	e167      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d135      	bne.n	8002998 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	0151      	lsls	r1, r2, #5
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	440a      	add	r2, r1
 8002942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f002 ffd3 	bl	8005902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335d      	adds	r3, #93	; 0x5d
 8002992:	2208      	movs	r2, #8
 8002994:	701a      	strb	r2, [r3, #0]
}
 8002996:	e125      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	f040 811a 	bne.w	8002be4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	0151      	lsls	r1, r2, #5
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	440a      	add	r2, r1
 80029c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	335d      	adds	r3, #93	; 0x5d
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d137      	bne.n	8002a56 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	333f      	adds	r3, #63	; 0x3f
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d00b      	beq.n	8002a28 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	333f      	adds	r3, #63	; 0x3f
 8002a20:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	f040 80c5 	bne.w	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3351      	adds	r3, #81	; 0x51
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	f083 0301 	eor.w	r3, r3, #1
 8002a3e:	b2d8      	uxtb	r0, r3
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3351      	adds	r3, #81	; 0x51
 8002a50:	4602      	mov	r2, r0
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e0ad      	b.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	335d      	adds	r3, #93	; 0x5d
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d10a      	bne.n	8002a82 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	335c      	adds	r3, #92	; 0x5c
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e097      	b.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	335d      	adds	r3, #93	; 0x5d
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d10a      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e081      	b.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	335d      	adds	r3, #93	; 0x5d
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10a      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e06b      	b.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	335d      	adds	r3, #93	; 0x5d
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b06      	cmp	r3, #6
 8002aee:	d00a      	beq.n	8002b06 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4613      	mov	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	440b      	add	r3, r1
 8002afe:	335d      	adds	r3, #93	; 0x5d
 8002b00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d155      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	3358      	adds	r3, #88	; 0x58
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1c59      	adds	r1, r3, #1
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4403      	add	r3, r0
 8002b28:	3358      	adds	r3, #88	; 0x58
 8002b2a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3358      	adds	r3, #88	; 0x58
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d914      	bls.n	8002b6c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3358      	adds	r3, #88	; 0x58
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	2204      	movs	r2, #4
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e009      	b.n	8002b80 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	335c      	adds	r3, #92	; 0x5c
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	b2d8      	uxtb	r0, r3
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	335c      	adds	r3, #92	; 0x5c
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4601      	mov	r1, r0
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 f82e 	bl	8007c40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	0c5b      	lsrs	r3, r3, #17
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c20:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HCD_RXQLVL_IRQHandler+0x46>
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	f000 8082 	beq.w	8002d34 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c30:	e083      	b.n	8002d3a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d07f      	beq.n	8002d38 <HCD_RXQLVL_IRQHandler+0x14c>
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3344      	adds	r3, #68	; 0x44
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d074      	beq.n	8002d38 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3344      	adds	r3, #68	; 0x44
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	b292      	uxth	r2, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f002 f9ea 	bl	8005042 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3344      	adds	r3, #68	; 0x44
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	18d1      	adds	r1, r2, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4403      	add	r3, r0
 8002c92:	3344      	adds	r3, #68	; 0x44
 8002c94:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	334c      	adds	r3, #76	; 0x4c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	18d1      	adds	r1, r2, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4403      	add	r3, r0
 8002cba:	334c      	adds	r3, #76	; 0x4c
 8002cbc:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HCD_RXQLVL_IRQHandler+0x158>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d031      	beq.n	8002d38 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	3350      	adds	r3, #80	; 0x50
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2d8      	uxtb	r0, r3
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3350      	adds	r3, #80	; 0x50
 8002d2e:	4602      	mov	r2, r0
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e001      	b.n	8002d38 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8002d38:	bf00      	nop
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	1ff80000 	.word	0x1ff80000

08002d48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d74:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d10b      	bne.n	8002d98 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f004 ff3c 	bl	8007c08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d132      	bne.n	8002e08 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d126      	bne.n	8002e02 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d113      	bne.n	8002de4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dc6:	d106      	bne.n	8002dd6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2102      	movs	r1, #2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f002 fa72 	bl	80052b8 <USB_InitFSLSPClkSel>
 8002dd4:	e011      	b.n	8002dfa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fa6b 	bl	80052b8 <USB_InitFSLSPClkSel>
 8002de2:	e00a      	b.n	8002dfa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df2:	461a      	mov	r2, r3
 8002df4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002df8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f004 ff2e 	bl	8007c5c <HAL_HCD_PortEnabled_Callback>
 8002e00:	e002      	b.n	8002e08 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f004 ff38 	bl	8007c78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d103      	bne.n	8002e1a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f043 0320 	orr.w	r3, r3, #32
 8002e18:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e12b      	b.n	800309a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fdb6 	bl	80009c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e94:	f001 f9f4 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8002e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a81      	ldr	r2, [pc, #516]	; (80030a4 <HAL_I2C_Init+0x274>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d807      	bhi.n	8002eb4 <HAL_I2C_Init+0x84>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a80      	ldr	r2, [pc, #512]	; (80030a8 <HAL_I2C_Init+0x278>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e006      	b.n	8002ec2 <HAL_I2C_Init+0x92>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a7d      	ldr	r2, [pc, #500]	; (80030ac <HAL_I2C_Init+0x27c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0e7      	b.n	800309a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a78      	ldr	r2, [pc, #480]	; (80030b0 <HAL_I2C_Init+0x280>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	0c9b      	lsrs	r3, r3, #18
 8002ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a6a      	ldr	r2, [pc, #424]	; (80030a4 <HAL_I2C_Init+0x274>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d802      	bhi.n	8002f04 <HAL_I2C_Init+0xd4>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e009      	b.n	8002f18 <HAL_I2C_Init+0xe8>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	4a69      	ldr	r2, [pc, #420]	; (80030b4 <HAL_I2C_Init+0x284>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	3301      	adds	r3, #1
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	495c      	ldr	r1, [pc, #368]	; (80030a4 <HAL_I2C_Init+0x274>)
 8002f34:	428b      	cmp	r3, r1
 8002f36:	d819      	bhi.n	8002f6c <HAL_I2C_Init+0x13c>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e59      	subs	r1, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_I2C_Init+0x138>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e59      	subs	r1, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f66:	e051      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e04f      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <HAL_I2C_Init+0x168>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e012      	b.n	8002fbe <HAL_I2C_Init+0x18e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Init+0x196>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e022      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10e      	bne.n	8002fec <HAL_I2C_Init+0x1bc>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e58      	subs	r0, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	440b      	add	r3, r1
 8002fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Init+0x1dc>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	6809      	ldr	r1, [r1, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6911      	ldr	r1, [r2, #16]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68d2      	ldr	r2, [r2, #12]
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	000186a0 	.word	0x000186a0
 80030a8:	001e847f 	.word	0x001e847f
 80030ac:	003d08ff 	.word	0x003d08ff
 80030b0:	431bde83 	.word	0x431bde83
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e128      	b.n	800331c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a90      	ldr	r2, [pc, #576]	; (8003324 <HAL_I2S_Init+0x26c>)
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd fcb7 	bl	8000a58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003100:	f023 030f 	bic.w	r3, r3, #15
 8003104:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2202      	movs	r2, #2
 800310c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d060      	beq.n	80031d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800311e:	2310      	movs	r3, #16
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e001      	b.n	8003128 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d802      	bhi.n	8003136 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003136:	2001      	movs	r0, #1
 8003138:	f001 f9ac 	bl	8004494 <HAL_RCCEx_GetPeriphCLKFreq>
 800313c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003146:	d125      	bne.n	8003194 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	fbb2 f2f3 	udiv	r2, r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	3305      	adds	r3, #5
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e01f      	b.n	80031b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	fbb2 f2f3 	udiv	r2, r2, r3
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	461a      	mov	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	3305      	adds	r3, #5
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	e00e      	b.n	80031b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fbb2 f2f3 	udiv	r2, r2, r3
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	3305      	adds	r3, #5
 80031b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4a5c      	ldr	r2, [pc, #368]	; (8003328 <HAL_I2S_Init+0x270>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e003      	b.n	80031e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031d8:	2302      	movs	r3, #2
 80031da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d902      	bls.n	80031ec <HAL_I2S_Init+0x134>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2bff      	cmp	r3, #255	; 0xff
 80031ea:	d907      	bls.n	80031fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e08f      	b.n	800331c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	ea42 0103 	orr.w	r1, r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	430a      	orrs	r2, r1
 800320e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800321a:	f023 030f 	bic.w	r3, r3, #15
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6851      	ldr	r1, [r2, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68d2      	ldr	r2, [r2, #12]
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6992      	ldr	r2, [r2, #24]
 8003232:	430a      	orrs	r2, r1
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d161      	bne.n	800330c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_I2S_Init+0x274>)
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a37      	ldr	r2, [pc, #220]	; (8003330 <HAL_I2S_Init+0x278>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_I2S_Init+0x1a4>
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_I2S_Init+0x27c>)
 800325a:	e001      	b.n	8003260 <HAL_I2S_Init+0x1a8>
 800325c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	4932      	ldr	r1, [pc, #200]	; (8003330 <HAL_I2S_Init+0x278>)
 8003268:	428a      	cmp	r2, r1
 800326a:	d101      	bne.n	8003270 <HAL_I2S_Init+0x1b8>
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_I2S_Init+0x27c>)
 800326e:	e001      	b.n	8003274 <HAL_I2S_Init+0x1bc>
 8003270:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003278:	f023 030f 	bic.w	r3, r3, #15
 800327c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	; (8003330 <HAL_I2S_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_I2S_Init+0x1d4>
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_I2S_Init+0x27c>)
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x1d8>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003290:	2202      	movs	r2, #2
 8003292:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_I2S_Init+0x278>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_I2S_Init+0x1ea>
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_I2S_Init+0x27c>)
 80032a0:	e001      	b.n	80032a6 <HAL_I2S_Init+0x1ee>
 80032a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b2:	d003      	beq.n	80032bc <HAL_I2S_Init+0x204>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e001      	b.n	80032c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	b299      	uxth	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032de:	4303      	orrs	r3, r0
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	430b      	orrs	r3, r1
 80032e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <HAL_I2S_Init+0x278>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_I2S_Init+0x24c>
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_I2S_Init+0x27c>)
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0x250>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	897a      	ldrh	r2, [r7, #10]
 800330a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0800342f 	.word	0x0800342f
 8003328:	cccccccd 	.word	0xcccccccd
 800332c:	08003545 	.word	0x08003545
 8003330:	40003800 	.word	0x40003800
 8003334:	40003400 	.word	0x40003400

08003338 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffb8 	bl	8003338 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10e      	bne.n	8003426 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003416:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff93 	bl	800334c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b04      	cmp	r3, #4
 8003448:	d13a      	bne.n	80034c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d109      	bne.n	8003468 <I2S_IRQHandler+0x3a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d102      	bne.n	8003468 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffb4 	bl	80033d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d126      	bne.n	80034c0 <I2S_IRQHandler+0x92>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d11f      	bne.n	80034c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff50 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d136      	bne.n	800353a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d109      	bne.n	80034ea <I2S_IRQHandler+0xbc>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d102      	bne.n	80034ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff45 	bl	8003374 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d122      	bne.n	800353a <I2S_IRQHandler+0x10c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d11b      	bne.n	800353a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003510:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff13 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800353a:	bf00      	nop
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4aa2      	ldr	r2, [pc, #648]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800355e:	4ba2      	ldr	r3, [pc, #648]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003560:	e001      	b.n	8003566 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a9b      	ldr	r2, [pc, #620]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800357c:	4b9a      	ldr	r3, [pc, #616]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800357e:	e001      	b.n	8003584 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003590:	d004      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8099 	bne.w	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d107      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f925 	bl	8003800 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9c8 	bl	8003960 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d13a      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d035      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ee:	4b7e      	ldr	r3, [pc, #504]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4979      	ldr	r1, [pc, #484]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035fe:	428b      	cmp	r3, r1
 8003600:	d101      	bne.n	8003606 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003602:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003604:	e001      	b.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003606:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800360a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800360e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800361e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe88 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	f040 80be 	bne.w	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80b8 	beq.w	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003676:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003682:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003684:	e001      	b.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4954      	ldr	r1, [pc, #336]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003692:	428b      	cmp	r3, r1
 8003694:	d101      	bne.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003698:	e001      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fe4a 	bl	8003360 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036cc:	e084      	b.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d107      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8be 	bl	8003864 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d107      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8fd 	bl	80038fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d12f      	bne.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02a      	beq.n	800376c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003724:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2e      	ldr	r2, [pc, #184]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003732:	e001      	b.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4929      	ldr	r1, [pc, #164]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003740:	428b      	cmp	r3, r1
 8003742:	d101      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003744:	4b28      	ldr	r3, [pc, #160]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003746:	e001      	b.n	800374c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003750:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fdfa 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d131      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02c      	beq.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800378c:	e001      	b.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800378e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4912      	ldr	r1, [pc, #72]	; (80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379a:	428b      	cmp	r3, r1
 800379c:	d101      	bne.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fdc5 	bl	8003360 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d6:	e000      	b.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d8:	bf00      	nop
}
 80037da:	bf00      	nop
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40003800 	.word	0x40003800
 80037e8:	40003400 	.word	0x40003400

080037ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	1c99      	adds	r1, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6251      	str	r1, [r2, #36]	; 0x24
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d113      	bne.n	800385a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffc9 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c99      	adds	r1, r3, #2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6251      	str	r1, [r2, #36]	; 0x24
 8003876:	8819      	ldrh	r1, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <I2SEx_TxISR_I2SExt+0x22>
 8003882:	4b1d      	ldr	r3, [pc, #116]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 8003884:	e001      	b.n	800388a <I2SEx_TxISR_I2SExt+0x26>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	460a      	mov	r2, r1
 800388c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d121      	bne.n	80038ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <I2SEx_TxISR_I2SExt+0x50>
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 80038b2:	e001      	b.n	80038b8 <I2SEx_TxISR_I2SExt+0x54>
 80038b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <I2SEx_TxISR_I2SExt+0x90>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d101      	bne.n	80038c8 <I2SEx_TxISR_I2SExt+0x64>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <I2SEx_TxISR_I2SExt+0x94>)
 80038c6:	e001      	b.n	80038cc <I2SEx_TxISR_I2SExt+0x68>
 80038c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff81 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40003800 	.word	0x40003800
 80038f8:	40003400 	.word	0x40003400

080038fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68d8      	ldr	r0, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	1c99      	adds	r1, r3, #2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003914:	b282      	uxth	r2, r0
 8003916:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d113      	bne.n	8003958 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff4a 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <I2SEx_RxISR_I2SExt+0x16>
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 8003974:	e001      	b.n	800397a <I2SEx_RxISR_I2SExt+0x1a>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	68d8      	ldr	r0, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	1c99      	adds	r1, r3, #2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003986:	b282      	uxth	r2, r0
 8003988:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d121      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <I2SEx_RxISR_I2SExt+0x50>
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 80039ae:	e001      	b.n	80039b4 <I2SEx_RxISR_I2SExt+0x54>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	490d      	ldr	r1, [pc, #52]	; (80039f0 <I2SEx_RxISR_I2SExt+0x90>)
 80039bc:	428b      	cmp	r3, r1
 80039be:	d101      	bne.n	80039c4 <I2SEx_RxISR_I2SExt+0x64>
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <I2SEx_RxISR_I2SExt+0x94>)
 80039c2:	e001      	b.n	80039c8 <I2SEx_RxISR_I2SExt+0x68>
 80039c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff03 	bl	80037ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40003800 	.word	0x40003800
 80039f4:	40003400 	.word	0x40003400

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e25b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d075      	beq.n	8003b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	4ba3      	ldr	r3, [pc, #652]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a22:	4ba0      	ldr	r3, [pc, #640]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d112      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a2e:	4b9d      	ldr	r3, [pc, #628]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	4b99      	ldr	r3, [pc, #612]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d157      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e236      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b91      	ldr	r3, [pc, #580]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a90      	ldr	r2, [pc, #576]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a8a      	ldr	r2, [pc, #552]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a90:	4b84      	ldr	r3, [pc, #528]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a83      	ldr	r2, [pc, #524]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b81      	ldr	r3, [pc, #516]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a80      	ldr	r2, [pc, #512]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fd f9d4 	bl	8000e5c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd f9d0 	bl	8000e5c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e1fb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fd f9c0 	bl	8000e5c <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd f9bc 	bl	8000e5c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1e7      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af2:	4b6c      	ldr	r3, [pc, #432]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d063      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	4b65      	ldr	r3, [pc, #404]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1a:	4b62      	ldr	r3, [pc, #392]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11c      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	4b5c      	ldr	r3, [pc, #368]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e1bb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4952      	ldr	r1, [pc, #328]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5e:	e03a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b68:	4b4f      	ldr	r3, [pc, #316]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd f975 	bl	8000e5c <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fd f971 	bl	8000e5c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e19c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4940      	ldr	r1, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <HAL_RCC_OscConfig+0x2b0>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd f954 	bl	8000e5c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb8:	f7fd f950 	bl	8000e5c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e17b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d030      	beq.n	8003c44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fd f934 	bl	8000e5c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf8:	f7fd f930 	bl	8000e5c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e15b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0a:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
 8003c16:	e015      	b.n	8003c44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c18:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x2b4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd f91d 	bl	8000e5c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fd f919 	bl	8000e5c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e144      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1f0      	bne.n	8003c26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a0 	beq.w	8003d92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6413      	str	r3, [r2, #64]	; 0x40
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d121      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a07      	ldr	r2, [pc, #28]	; (8003cb0 <HAL_RCC_OscConfig+0x2b8>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd f8df 	bl	8000e5c <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	e011      	b.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	42470000 	.word	0x42470000
 8003cac:	42470e80 	.word	0x42470e80
 8003cb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb4:	f7fd f8d2 	bl	8000e5c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0fd      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCC_OscConfig+0x4d4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x2f0>
 8003cda:	4b7d      	ldr	r3, [pc, #500]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a7c      	ldr	r2, [pc, #496]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	e01c      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b05      	cmp	r3, #5
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x312>
 8003cf0:	4b77      	ldr	r3, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b74      	ldr	r3, [pc, #464]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a73      	ldr	r2, [pc, #460]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	e00b      	b.n	8003d22 <HAL_RCC_OscConfig+0x32a>
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a70      	ldr	r2, [pc, #448]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d015      	beq.n	8003d56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f897 	bl	8000e5c <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fd f893 	bl	8000e5c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0bc      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ee      	beq.n	8003d32 <HAL_RCC_OscConfig+0x33a>
 8003d54:	e014      	b.n	8003d80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fd f881 	bl	8000e5c <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd f87d 	bl	8000e5c <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e0a6      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a51      	ldr	r2, [pc, #324]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8092 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d05c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d141      	bne.n	8003e34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db0:	4b48      	ldr	r3, [pc, #288]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd f851 	bl	8000e5c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbe:	f7fd f84d 	bl	8000e5c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e078      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	019b      	lsls	r3, r3, #6
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	4933      	ldr	r1, [pc, #204]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e06:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f826 	bl	8000e5c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd f822 	bl	8000e5c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x41c>
 8003e32:	e045      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_OscConfig+0x4dc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fd f80f 	bl	8000e5c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fd f80b 	bl	8000e5c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e036      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x44a>
 8003e60:	e02e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e029      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x4d8>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470060 	.word	0x42470060

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0cc      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b68      	ldr	r3, [pc, #416]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d90c      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b63      	ldr	r3, [pc, #396]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0b8      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b59      	ldr	r3, [pc, #356]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b50      	ldr	r3, [pc, #320]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	494d      	ldr	r1, [pc, #308]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d044      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b47      	ldr	r3, [pc, #284]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d119      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e06f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e067      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 0203 	bic.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4934      	ldr	r1, [pc, #208]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7fc ff48 	bl	8000e5c <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd0:	f7fc ff44 	bl	8000e5c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e04f      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 020c 	and.w	r2, r3, #12
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d1eb      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b25      	ldr	r3, [pc, #148]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d20c      	bcs.n	8004020 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e032      	b.n	8004086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402c:	4b19      	ldr	r3, [pc, #100]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4916      	ldr	r1, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405e:	f000 f821 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004062:	4602      	mov	r2, r0
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	490a      	ldr	r1, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	5ccb      	ldrb	r3, [r1, r3]
 8004072:	fa22 f303 	lsr.w	r3, r2, r3
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1c8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fea8 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00
 8004094:	40023800 	.word	0x40023800
 8004098:	080082b0 	.word	0x080082b0
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	2300      	movs	r3, #0
 80040b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040bc:	4b67      	ldr	r3, [pc, #412]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d00d      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x40>
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	f200 80bd 	bhi.w	8004248 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x34>
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d003      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x3a>
 80040d6:	e0b7      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d8:	4b61      	ldr	r3, [pc, #388]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040da:	60bb      	str	r3, [r7, #8]
       break;
 80040dc:	e0b7      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040de:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040e0:	60bb      	str	r3, [r7, #8]
      break;
 80040e2:	e0b4      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e4:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ee:	4b5b      	ldr	r3, [pc, #364]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d04d      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fa:	4b58      	ldr	r3, [pc, #352]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	461a      	mov	r2, r3
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	ea02 0800 	and.w	r8, r2, r0
 8004112:	ea03 0901 	and.w	r9, r3, r1
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	014b      	lsls	r3, r1, #5
 8004124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004128:	0142      	lsls	r2, r0, #5
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	ebb0 0008 	subs.w	r0, r0, r8
 8004132:	eb61 0109 	sbc.w	r1, r1, r9
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	018b      	lsls	r3, r1, #6
 8004140:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004144:	0182      	lsls	r2, r0, #6
 8004146:	1a12      	subs	r2, r2, r0
 8004148:	eb63 0301 	sbc.w	r3, r3, r1
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	00d9      	lsls	r1, r3, #3
 8004156:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800415a:	00d0      	lsls	r0, r2, #3
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	eb12 0208 	adds.w	r2, r2, r8
 8004164:	eb43 0309 	adc.w	r3, r3, r9
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	0259      	lsls	r1, r3, #9
 8004172:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004176:	0250      	lsls	r0, r2, #9
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	461a      	mov	r2, r3
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	f7fc f81e 	bl	80001c8 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4613      	mov	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e04a      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	461a      	mov	r2, r3
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	ea02 0400 	and.w	r4, r2, r0
 80041ae:	ea03 0501 	and.w	r5, r3, r1
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	014b      	lsls	r3, r1, #5
 80041c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c4:	0142      	lsls	r2, r0, #5
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	1b00      	subs	r0, r0, r4
 80041cc:	eb61 0105 	sbc.w	r1, r1, r5
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	018b      	lsls	r3, r1, #6
 80041da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041de:	0182      	lsls	r2, r0, #6
 80041e0:	1a12      	subs	r2, r2, r0
 80041e2:	eb63 0301 	sbc.w	r3, r3, r1
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	00d9      	lsls	r1, r3, #3
 80041f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f4:	00d0      	lsls	r0, r2, #3
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	1912      	adds	r2, r2, r4
 80041fc:	eb45 0303 	adc.w	r3, r5, r3
 8004200:	f04f 0000 	mov.w	r0, #0
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	0299      	lsls	r1, r3, #10
 800420a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800420e:	0290      	lsls	r0, r2, #10
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	f7fb ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	60bb      	str	r3, [r7, #8]
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800424a:	60bb      	str	r3, [r7, #8]
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	68bb      	ldr	r3, [r7, #8]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40023800 	.word	0x40023800
 80042a4:	080082c0 	.word	0x080082c0

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffdc 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0b5b      	lsrs	r3, r3, #13
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40023800 	.word	0x40023800
 80042cc:	080082c0 	.word	0x080082c0

080042d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d035      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042f8:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042fe:	f7fc fdad 	bl	8000e5c <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004306:	f7fc fda9 	bl	8000e5c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0b0      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004318:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	019a      	lsls	r2, r3, #6
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	071b      	lsls	r3, r3, #28
 8004330:	4955      	ldr	r1, [pc, #340]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004338:	4b52      	ldr	r3, [pc, #328]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433e:	f7fc fd8d 	bl	8000e5c <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004346:	f7fc fd89 	bl	8000e5c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e090      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8083 	beq.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	4a43      	ldr	r2, [pc, #268]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6413      	str	r3, [r2, #64]	; 0x40
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a3e      	ldr	r2, [pc, #248]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800439a:	f7fc fd5f 	bl	8000e5c <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fc fd5b 	bl	8000e5c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e062      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c0:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02f      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d028      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043de:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e8:	4b29      	ldr	r3, [pc, #164]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ee:	4b28      	ldr	r3, [pc, #160]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043f4:	4a24      	ldr	r2, [pc, #144]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d114      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004406:	f7fc fd29 	bl	8000e5c <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fc fd25 	bl	8000e5c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e02a      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ee      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800443c:	d10d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	490d      	ldr	r1, [pc, #52]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	4313      	orrs	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
 8004458:	e005      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004472:	4905      	ldr	r1, [pc, #20]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	42470068 	.word	0x42470068
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000
 8004490:	42470e40 	.word	0x42470e40

08004494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d13e      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d12f      	bne.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044ca:	617b      	str	r3, [r7, #20]
          break;
 80044cc:	e02f      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044da:	d108      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	e007      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004504:	099b      	lsrs	r3, r3, #6
 8004506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004518:	0f1b      	lsrs	r3, r3, #28
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]
          break;
 8004526:	e002      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
          break;
 800452c:	bf00      	nop
        }
      }
      break;
 800452e:	bf00      	nop
    }
  }
  return frequency;
 8004530:	697b      	ldr	r3, [r7, #20]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00bb8000 	.word	0x00bb8000
 8004548:	007a1200 	.word	0x007a1200
 800454c:	00f42400 	.word	0x00f42400

08004550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e056      	b.n	8004610 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc fad3 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004598:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	ea42 0103 	orr.w	r1, r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 0104 	and.w	r1, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e03f      	b.n	80046aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc faba 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2224      	movs	r2, #36	; 0x24
 8004648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f829 	bl	80046b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	b0bd      	sub	sp, #244	; 0xf4
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d0:	68d9      	ldr	r1, [r3, #12]
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	ea40 0301 	orr.w	r3, r0, r1
 80046dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800470c:	f021 010c 	bic.w	r1, r1, #12
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800471a:	430b      	orrs	r3, r1
 800471c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	6999      	ldr	r1, [r3, #24]
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	ea40 0301 	orr.w	r3, r0, r1
 800473a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004746:	f040 81a5 	bne.w	8004a94 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4bcd      	ldr	r3, [pc, #820]	; (8004a88 <UART_SetConfig+0x3d4>)
 8004752:	429a      	cmp	r2, r3
 8004754:	d006      	beq.n	8004764 <UART_SetConfig+0xb0>
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4bcb      	ldr	r3, [pc, #812]	; (8004a8c <UART_SetConfig+0x3d8>)
 800475e:	429a      	cmp	r2, r3
 8004760:	f040 80cb 	bne.w	80048fa <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7ff fda0 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8004768:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004770:	461c      	mov	r4, r3
 8004772:	f04f 0500 	mov.w	r5, #0
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	1891      	adds	r1, r2, r2
 800477c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004780:	415b      	adcs	r3, r3
 8004782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004786:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800478a:	1912      	adds	r2, r2, r4
 800478c:	eb45 0303 	adc.w	r3, r5, r3
 8004790:	f04f 0000 	mov.w	r0, #0
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	00d9      	lsls	r1, r3, #3
 800479a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800479e:	00d0      	lsls	r0, r2, #3
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	1911      	adds	r1, r2, r4
 80047a6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80047aa:	416b      	adcs	r3, r5
 80047ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80047c2:	415b      	adcs	r3, r3
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047c8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80047cc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80047d0:	f7fb fcfa 	bl	80001c8 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4bad      	ldr	r3, [pc, #692]	; (8004a90 <UART_SetConfig+0x3dc>)
 80047da:	fba3 2302 	umull	r2, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	011e      	lsls	r6, r3, #4
 80047e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047e6:	461c      	mov	r4, r3
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	4622      	mov	r2, r4
 80047ee:	462b      	mov	r3, r5
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	67b9      	str	r1, [r7, #120]	; 0x78
 80047f4:	415b      	adcs	r3, r3
 80047f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80047fc:	1912      	adds	r2, r2, r4
 80047fe:	eb45 0303 	adc.w	r3, r5, r3
 8004802:	f04f 0000 	mov.w	r0, #0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	00d9      	lsls	r1, r3, #3
 800480c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004810:	00d0      	lsls	r0, r2, #3
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	1911      	adds	r1, r2, r4
 8004818:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800481c:	416b      	adcs	r3, r5
 800481e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	461a      	mov	r2, r3
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	1891      	adds	r1, r2, r2
 8004830:	6739      	str	r1, [r7, #112]	; 0x70
 8004832:	415b      	adcs	r3, r3
 8004834:	677b      	str	r3, [r7, #116]	; 0x74
 8004836:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800483a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800483e:	f7fb fcc3 	bl	80001c8 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4b92      	ldr	r3, [pc, #584]	; (8004a90 <UART_SetConfig+0x3dc>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a8d      	ldr	r2, [pc, #564]	; (8004a90 <UART_SetConfig+0x3dc>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004868:	441e      	add	r6, r3
 800486a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800486e:	4618      	mov	r0, r3
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	1894      	adds	r4, r2, r2
 800487a:	66bc      	str	r4, [r7, #104]	; 0x68
 800487c:	415b      	adcs	r3, r3
 800487e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004880:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004884:	1812      	adds	r2, r2, r0
 8004886:	eb41 0303 	adc.w	r3, r1, r3
 800488a:	f04f 0400 	mov.w	r4, #0
 800488e:	f04f 0500 	mov.w	r5, #0
 8004892:	00dd      	lsls	r5, r3, #3
 8004894:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004898:	00d4      	lsls	r4, r2, #3
 800489a:	4622      	mov	r2, r4
 800489c:	462b      	mov	r3, r5
 800489e:	1814      	adds	r4, r2, r0
 80048a0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80048a4:	414b      	adcs	r3, r1
 80048a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	1891      	adds	r1, r2, r2
 80048b8:	6639      	str	r1, [r7, #96]	; 0x60
 80048ba:	415b      	adcs	r3, r3
 80048bc:	667b      	str	r3, [r7, #100]	; 0x64
 80048be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80048c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048c6:	f7fb fc7f 	bl	80001c8 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4b70      	ldr	r3, [pc, #448]	; (8004a90 <UART_SetConfig+0x3dc>)
 80048d0:	fba3 1302 	umull	r1, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	2164      	movs	r1, #100	; 0x64
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	3332      	adds	r3, #50	; 0x32
 80048e2:	4a6b      	ldr	r2, [pc, #428]	; (8004a90 <UART_SetConfig+0x3dc>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	f003 0207 	and.w	r2, r3, #7
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4432      	add	r2, r6
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e26d      	b.n	8004dd6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7ff fcc1 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80048fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004902:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004906:	461c      	mov	r4, r3
 8004908:	f04f 0500 	mov.w	r5, #0
 800490c:	4622      	mov	r2, r4
 800490e:	462b      	mov	r3, r5
 8004910:	1891      	adds	r1, r2, r2
 8004912:	65b9      	str	r1, [r7, #88]	; 0x58
 8004914:	415b      	adcs	r3, r3
 8004916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004918:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800491c:	1912      	adds	r2, r2, r4
 800491e:	eb45 0303 	adc.w	r3, r5, r3
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	00d9      	lsls	r1, r3, #3
 800492c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004930:	00d0      	lsls	r0, r2, #3
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	1911      	adds	r1, r2, r4
 8004938:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800493c:	416b      	adcs	r3, r5
 800493e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	1891      	adds	r1, r2, r2
 8004950:	6539      	str	r1, [r7, #80]	; 0x50
 8004952:	415b      	adcs	r3, r3
 8004954:	657b      	str	r3, [r7, #84]	; 0x54
 8004956:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800495a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800495e:	f7fb fc33 	bl	80001c8 <__aeabi_uldivmod>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <UART_SetConfig+0x3dc>)
 8004968:	fba3 2302 	umull	r2, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	011e      	lsls	r6, r3, #4
 8004970:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004974:	461c      	mov	r4, r3
 8004976:	f04f 0500 	mov.w	r5, #0
 800497a:	4622      	mov	r2, r4
 800497c:	462b      	mov	r3, r5
 800497e:	1891      	adds	r1, r2, r2
 8004980:	64b9      	str	r1, [r7, #72]	; 0x48
 8004982:	415b      	adcs	r3, r3
 8004984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004986:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800498a:	1912      	adds	r2, r2, r4
 800498c:	eb45 0303 	adc.w	r3, r5, r3
 8004990:	f04f 0000 	mov.w	r0, #0
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	00d9      	lsls	r1, r3, #3
 800499a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499e:	00d0      	lsls	r0, r2, #3
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	1911      	adds	r1, r2, r4
 80049a6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80049aa:	416b      	adcs	r3, r5
 80049ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	6439      	str	r1, [r7, #64]	; 0x40
 80049c0:	415b      	adcs	r3, r3
 80049c2:	647b      	str	r3, [r7, #68]	; 0x44
 80049c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80049cc:	f7fb fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <UART_SetConfig+0x3dc>)
 80049d6:	fba3 1302 	umull	r1, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2164      	movs	r1, #100	; 0x64
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	3332      	adds	r3, #50	; 0x32
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <UART_SetConfig+0x3dc>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f6:	441e      	add	r6, r3
 80049f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049fc:	4618      	mov	r0, r3
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	1894      	adds	r4, r2, r2
 8004a08:	63bc      	str	r4, [r7, #56]	; 0x38
 8004a0a:	415b      	adcs	r3, r3
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a12:	1812      	adds	r2, r2, r0
 8004a14:	eb41 0303 	adc.w	r3, r1, r3
 8004a18:	f04f 0400 	mov.w	r4, #0
 8004a1c:	f04f 0500 	mov.w	r5, #0
 8004a20:	00dd      	lsls	r5, r3, #3
 8004a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a26:	00d4      	lsls	r4, r2, #3
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	1814      	adds	r4, r2, r0
 8004a2e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004a32:	414b      	adcs	r3, r1
 8004a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	6339      	str	r1, [r7, #48]	; 0x30
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a50:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a54:	f7fb fbb8 	bl	80001c8 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <UART_SetConfig+0x3dc>)
 8004a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	2164      	movs	r1, #100	; 0x64
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	3332      	adds	r3, #50	; 0x32
 8004a70:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <UART_SetConfig+0x3dc>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	f003 0207 	and.w	r2, r3, #7
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4432      	add	r2, r6
 8004a84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a86:	e1a6      	b.n	8004dd6 <UART_SetConfig+0x722>
 8004a88:	40011000 	.word	0x40011000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4bd1      	ldr	r3, [pc, #836]	; (8004de0 <UART_SetConfig+0x72c>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d006      	beq.n	8004aae <UART_SetConfig+0x3fa>
 8004aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4bcf      	ldr	r3, [pc, #828]	; (8004de4 <UART_SetConfig+0x730>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	f040 80ca 	bne.w	8004c42 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004aae:	f7ff fbfb 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8004ab2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aba:	461c      	mov	r4, r3
 8004abc:	f04f 0500 	mov.w	r5, #0
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad0:	1912      	adds	r2, r2, r4
 8004ad2:	eb45 0303 	adc.w	r3, r5, r3
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	00d9      	lsls	r1, r3, #3
 8004ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ae4:	00d0      	lsls	r0, r2, #3
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	eb12 0a04 	adds.w	sl, r2, r4
 8004aee:	eb43 0b05 	adc.w	fp, r3, r5
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	008b      	lsls	r3, r1, #2
 8004b08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b0c:	0082      	lsls	r2, r0, #2
 8004b0e:	4650      	mov	r0, sl
 8004b10:	4659      	mov	r1, fp
 8004b12:	f7fb fb59 	bl	80001c8 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4bb3      	ldr	r3, [pc, #716]	; (8004de8 <UART_SetConfig+0x734>)
 8004b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	011e      	lsls	r6, r3, #4
 8004b24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	1894      	adds	r4, r2, r2
 8004b34:	623c      	str	r4, [r7, #32]
 8004b36:	415b      	adcs	r3, r3
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3e:	1812      	adds	r2, r2, r0
 8004b40:	eb41 0303 	adc.w	r3, r1, r3
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	f04f 0500 	mov.w	r5, #0
 8004b4c:	00dd      	lsls	r5, r3, #3
 8004b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b52:	00d4      	lsls	r4, r2, #3
 8004b54:	4622      	mov	r2, r4
 8004b56:	462b      	mov	r3, r5
 8004b58:	1814      	adds	r4, r2, r0
 8004b5a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004b5e:	414b      	adcs	r3, r1
 8004b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	008b      	lsls	r3, r1, #2
 8004b7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b7e:	0082      	lsls	r2, r0, #2
 8004b80:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004b84:	f7fb fb20 	bl	80001c8 <__aeabi_uldivmod>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4b96      	ldr	r3, [pc, #600]	; (8004de8 <UART_SetConfig+0x734>)
 8004b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2164      	movs	r1, #100	; 0x64
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	3332      	adds	r3, #50	; 0x32
 8004ba0:	4a91      	ldr	r2, [pc, #580]	; (8004de8 <UART_SetConfig+0x734>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bac:	441e      	add	r6, r3
 8004bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	1894      	adds	r4, r2, r2
 8004bbe:	61bc      	str	r4, [r7, #24]
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc8:	1812      	adds	r2, r2, r0
 8004bca:	eb41 0303 	adc.w	r3, r1, r3
 8004bce:	f04f 0400 	mov.w	r4, #0
 8004bd2:	f04f 0500 	mov.w	r5, #0
 8004bd6:	00dd      	lsls	r5, r3, #3
 8004bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bdc:	00d4      	lsls	r4, r2, #3
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	1814      	adds	r4, r2, r0
 8004be4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004be8:	414b      	adcs	r3, r1
 8004bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c08:	0082      	lsls	r2, r0, #2
 8004c0a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004c0e:	f7fb fadb 	bl	80001c8 <__aeabi_uldivmod>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <UART_SetConfig+0x734>)
 8004c18:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	2164      	movs	r1, #100	; 0x64
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	3332      	adds	r3, #50	; 0x32
 8004c2a:	4a6f      	ldr	r2, [pc, #444]	; (8004de8 <UART_SetConfig+0x734>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4432      	add	r2, r6
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	e0c9      	b.n	8004dd6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c42:	f7ff fb1d 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8004c46:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c4e:	461c      	mov	r4, r3
 8004c50:	f04f 0500 	mov.w	r5, #0
 8004c54:	4622      	mov	r2, r4
 8004c56:	462b      	mov	r3, r5
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	6139      	str	r1, [r7, #16]
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c64:	1912      	adds	r2, r2, r4
 8004c66:	eb45 0303 	adc.w	r3, r5, r3
 8004c6a:	f04f 0000 	mov.w	r0, #0
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	00d9      	lsls	r1, r3, #3
 8004c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c78:	00d0      	lsls	r0, r2, #3
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	eb12 0804 	adds.w	r8, r2, r4
 8004c82:	eb43 0905 	adc.w	r9, r3, r5
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	008b      	lsls	r3, r1, #2
 8004c9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ca0:	0082      	lsls	r2, r0, #2
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	f7fb fa8f 	bl	80001c8 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4b4e      	ldr	r3, [pc, #312]	; (8004de8 <UART_SetConfig+0x734>)
 8004cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	011e      	lsls	r6, r3, #4
 8004cb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	1894      	adds	r4, r2, r2
 8004cc8:	60bc      	str	r4, [r7, #8]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd2:	1812      	adds	r2, r2, r0
 8004cd4:	eb41 0303 	adc.w	r3, r1, r3
 8004cd8:	f04f 0400 	mov.w	r4, #0
 8004cdc:	f04f 0500 	mov.w	r5, #0
 8004ce0:	00dd      	lsls	r5, r3, #3
 8004ce2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ce6:	00d4      	lsls	r4, r2, #3
 8004ce8:	4622      	mov	r2, r4
 8004cea:	462b      	mov	r3, r5
 8004cec:	1814      	adds	r4, r2, r0
 8004cee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004cf2:	414b      	adcs	r3, r1
 8004cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d12:	0082      	lsls	r2, r0, #2
 8004d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d18:	f7fb fa56 	bl	80001c8 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <UART_SetConfig+0x734>)
 8004d22:	fba3 1302 	umull	r1, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2164      	movs	r1, #100	; 0x64
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a2c      	ldr	r2, [pc, #176]	; (8004de8 <UART_SetConfig+0x734>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	441e      	add	r6, r3
 8004d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	1894      	adds	r4, r2, r2
 8004d52:	603c      	str	r4, [r7, #0]
 8004d54:	415b      	adcs	r3, r3
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d5c:	1812      	adds	r2, r2, r0
 8004d5e:	eb41 0303 	adc.w	r3, r1, r3
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	f04f 0500 	mov.w	r5, #0
 8004d6a:	00dd      	lsls	r5, r3, #3
 8004d6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d70:	00d4      	lsls	r4, r2, #3
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	1814      	adds	r4, r2, r0
 8004d78:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d7c:	414b      	adcs	r3, r1
 8004d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f04f 0100 	mov.w	r1, #0
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	008b      	lsls	r3, r1, #2
 8004d98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d9c:	0082      	lsls	r2, r0, #2
 8004d9e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004da2:	f7fb fa11 	bl	80001c8 <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <UART_SetConfig+0x734>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2164      	movs	r1, #100	; 0x64
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	3332      	adds	r3, #50	; 0x32
 8004dbe:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <UART_SetConfig+0x734>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4432      	add	r2, r6
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	e7ff      	b.n	8004dd6 <UART_SetConfig+0x722>
 8004dd6:	bf00      	nop
 8004dd8:	37f4      	adds	r7, #244	; 0xf4
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de0:	40011000 	.word	0x40011000
 8004de4:	40011400 	.word	0x40011400
 8004de8:	51eb851f 	.word	0x51eb851f

08004dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dec:	b084      	sub	sp, #16
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	f107 001c 	add.w	r0, r7, #28
 8004dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d122      	bne.n	8004e4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f94a 	bl	80050d8 <USB_CoreReset>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e01a      	b.n	8004e80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f93e 	bl	80050d8 <USB_CoreReset>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
 8004e72:	e005      	b.n	8004e80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10b      	bne.n	8004e9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0206 	orr.w	r2, r3, #6
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eaa:	b004      	add	sp, #16
 8004eac:	4770      	bx	lr

08004eae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 0201 	bic.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d106      	bne.n	8004f1e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	e00b      	b.n	8004f36 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]
 8004f30:	e001      	b.n	8004f36 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e003      	b.n	8004f3e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f36:	2032      	movs	r0, #50	; 0x32
 8004f38:	f7fb ff9c 	bl	8000e74 <HAL_Delay>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <USB_FlushTxFifo+0x48>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e006      	b.n	8004f82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d0f0      	beq.n	8004f62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	00030d40 	.word	0x00030d40

08004f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <USB_FlushRxFifo+0x40>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d0f0      	beq.n	8004fa6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	00030d40 	.word	0x00030d40

08004fd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	71fb      	strb	r3, [r7, #7]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11a      	bne.n	8005034 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ffe:	88bb      	ldrh	r3, [r7, #4]
 8005000:	3303      	adds	r3, #3
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e00f      	b.n	800502c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	461a      	mov	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	3304      	adds	r3, #4
 8005024:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	3301      	adds	r3, #1
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d3eb      	bcc.n	800500c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005042:	b480      	push	{r7}
 8005044:	b089      	sub	sp, #36	; 0x24
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	3303      	adds	r3, #3
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e00b      	b.n	800507e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	601a      	str	r2, [r3, #0]
    pDest++;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3304      	adds	r3, #4
 8005076:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	3301      	adds	r3, #1
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	429a      	cmp	r2, r3
 8005084:	d3ef      	bcc.n	8005066 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005086:	69fb      	ldr	r3, [r7, #28]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3724      	adds	r7, #36	; 0x24
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050ac:	68fb      	ldr	r3, [r7, #12]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0301 	and.w	r3, r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <USB_CoreReset+0x64>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e01b      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4a09      	ldr	r2, [pc, #36]	; (800513c <USB_CoreReset+0x64>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d0f0      	beq.n	800510e <USB_CoreReset+0x36>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	00030d40 	.word	0x00030d40

08005140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005140:	b084      	sub	sp, #16
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	f107 001c 	add.w	r0, r7, #28
 800514e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10a      	bne.n	80051ae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	e014      	b.n	80051d8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e009      	b.n	80051d8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051d2:	f023 0304 	bic.w	r3, r3, #4
 80051d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80051d8:	2110      	movs	r1, #16
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff feb4 	bl	8004f48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fed7 	bl	8004f94 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e015      	b.n	8005218 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	429a      	cmp	r2, r3
 800521e:	d3e5      	bcc.n	80051ec <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005220:	2101      	movs	r1, #1
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8ac 	bl	8005380 <USB_DriveVbus>

  HAL_Delay(200U);
 8005228:	20c8      	movs	r0, #200	; 0xc8
 800522a:	f7fb fe23 	bl	8000e74 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f04f 32ff 	mov.w	r2, #4294967295
 800523a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00b      	beq.n	8005260 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800524e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <USB_HostInit+0x164>)
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <USB_HostInit+0x168>)
 800525a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800525e:	e009      	b.n	8005274 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2280      	movs	r2, #128	; 0x80
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a10      	ldr	r2, [pc, #64]	; (80052ac <USB_HostInit+0x16c>)
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <USB_HostInit+0x170>)
 8005270:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <USB_HostInit+0x174>)
 800528c:	4313      	orrs	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800529e:	b004      	add	sp, #16
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	01000200 	.word	0x01000200
 80052a8:	00e00300 	.word	0x00e00300
 80052ac:	00600080 	.word	0x00600080
 80052b0:	004000e0 	.word	0x004000e0
 80052b4:	a3200008 	.word	0xa3200008

080052b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052f0:	4313      	orrs	r3, r2
 80052f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d107      	bne.n	800530a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005300:	461a      	mov	r2, r3
 8005302:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005306:	6053      	str	r3, [r2, #4]
 8005308:	e009      	b.n	800531e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d106      	bne.n	800531e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005316:	461a      	mov	r2, r3
 8005318:	f241 7370 	movw	r3, #6000	; 0x1770
 800531c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800534c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800535c:	2064      	movs	r0, #100	; 0x64
 800535e:	f7fb fd89 	bl	8000e74 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800536a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005370:	200a      	movs	r0, #10
 8005372:	f7fb fd7f 	bl	8000e74 <HAL_Delay>

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	460b      	mov	r3, r1
 800538a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <USB_DriveVbus+0x44>
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d106      	bne.n	80053c4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053c2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ce:	d109      	bne.n	80053e4 <USB_DriveVbus+0x64>
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	0c5b      	lsrs	r3, r3, #17
 8005410:	f003 0303 	and.w	r3, r3, #3
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	b29b      	uxth	r3, r3
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4603      	mov	r3, r0
 8005454:	70fb      	strb	r3, [r7, #3]
 8005456:	460b      	mov	r3, r1
 8005458:	70bb      	strb	r3, [r7, #2]
 800545a:	4613      	mov	r3, r2
 800545c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005466:	78fb      	ldrb	r3, [r7, #3]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	461a      	mov	r2, r3
 8005474:	f04f 33ff 	mov.w	r3, #4294967295
 8005478:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800547a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800547e:	2b03      	cmp	r3, #3
 8005480:	d87e      	bhi.n	8005580 <USB_HC_Init+0x13c>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <USB_HC_Init+0x44>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	08005543 	.word	0x08005543
 8005490:	08005499 	.word	0x08005499
 8005494:	08005505 	.word	0x08005505
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	461a      	mov	r2, r3
 80054a6:	f240 439d 	movw	r3, #1181	; 0x49d
 80054aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80054ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da10      	bge.n	80054d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80054d4:	e057      	b.n	8005586 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d051      	beq.n	8005586 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	78fa      	ldrb	r2, [r7, #3]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005500:	60d3      	str	r3, [r2, #12]
      break;
 8005502:	e040      	b.n	8005586 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	f240 639d 	movw	r3, #1693	; 0x69d
 8005516:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005518:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da34      	bge.n	800558a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4413      	add	r3, r2
 8005528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	440a      	add	r2, r1
 8005536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005540:	e023      	b.n	800558a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	461a      	mov	r2, r3
 8005550:	f240 2325 	movw	r3, #549	; 0x225
 8005554:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005556:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800555a:	2b00      	cmp	r3, #0
 800555c:	da17      	bge.n	800558e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	440a      	add	r2, r1
 8005574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005578:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800557c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800557e:	e006      	b.n	800558e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
      break;
 8005584:	e004      	b.n	8005590 <USB_HC_Init+0x14c>
      break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <USB_HC_Init+0x14c>
      break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <USB_HC_Init+0x14c>
      break;
 800558e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055aa:	4313      	orrs	r3, r2
 80055ac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da03      	bge.n	80055ca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	e001      	b.n	80055ce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80055ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d103      	bne.n	80055de <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80055d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e001      	b.n	80055e2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055e2:	787b      	ldrb	r3, [r7, #1]
 80055e4:	059b      	lsls	r3, r3, #22
 80055e6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055ea:	78bb      	ldrb	r3, [r7, #2]
 80055ec:	02db      	lsls	r3, r3, #11
 80055ee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80055f2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80055f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055f8:	049b      	lsls	r3, r3, #18
 80055fa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80055fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005602:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005606:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	0159      	lsls	r1, r3, #5
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	440b      	add	r3, r1
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800561e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005620:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005624:	2b03      	cmp	r3, #3
 8005626:	d10f      	bne.n	8005648 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005642:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005646:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
}
 800564a:	4618      	mov	r0, r3
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005674:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d028      	beq.n	80056d4 <USB_HC_StartXfer+0x7c>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	791b      	ldrb	r3, [r3, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d124      	bne.n	80056d4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <USB_HC_StartXfer+0x50>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	795b      	ldrb	r3, [r3, #5]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	4619      	mov	r1, r3
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fa2e 	bl	8005b00 <USB_DoPing>
      return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e113      	b.n	80058d0 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d112      	bne.n	80056d4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80056cc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d018      	beq.n	800570e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	8912      	ldrh	r2, [r2, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	3b01      	subs	r3, #1
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	8912      	ldrh	r2, [r2, #8]
 80056ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80056f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80056f4:	8b7b      	ldrh	r3, [r7, #26]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d90b      	bls.n	8005712 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80056fa:	8b7b      	ldrh	r3, [r7, #26]
 80056fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80056fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	8912      	ldrh	r2, [r2, #8]
 8005704:	fb02 f203 	mul.w	r2, r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	e001      	b.n	8005712 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800570e:	2301      	movs	r3, #1
 8005710:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d006      	beq.n	8005728 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800571a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	8912      	ldrh	r2, [r2, #8]
 8005720:	fb02 f203 	mul.w	r2, r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005732:	04d9      	lsls	r1, r3, #19
 8005734:	4b68      	ldr	r3, [pc, #416]	; (80058d8 <USB_HC_StartXfer+0x280>)
 8005736:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005738:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7a9b      	ldrb	r3, [r3, #10]
 800573e:	075b      	lsls	r3, r3, #29
 8005740:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005744:	69f9      	ldr	r1, [r7, #28]
 8005746:	0148      	lsls	r0, r1, #5
 8005748:	6a39      	ldr	r1, [r7, #32]
 800574a:	4401      	add	r1, r0
 800574c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005750:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005752:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	68d9      	ldr	r1, [r3, #12]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	460a      	mov	r2, r1
 800576c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	440a      	add	r2, r1
 800579c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	7e7b      	ldrb	r3, [r7, #25]
 80057b6:	075b      	lsls	r3, r3, #29
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	0148      	lsls	r0, r1, #5
 80057bc:	6a39      	ldr	r1, [r7, #32]
 80057be:	4401      	add	r1, r0
 80057c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a41      	ldr	r2, [pc, #260]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057d8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057da:	4b40      	ldr	r3, [pc, #256]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057e2:	4a3e      	ldr	r2, [pc, #248]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057e4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80057ee:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	4a39      	ldr	r2, [pc, #228]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e005      	b.n	8005808 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <USB_HC_StartXfer+0x284>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005804:	4a35      	ldr	r2, [pc, #212]	; (80058dc <USB_HC_StartXfer+0x284>)
 8005806:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <USB_HC_StartXfer+0x284>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005810:	4a32      	ldr	r2, [pc, #200]	; (80058dc <USB_HC_StartXfer+0x284>)
 8005812:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <USB_HC_StartXfer+0x284>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e04e      	b.n	80058d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	78db      	ldrb	r3, [r3, #3]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d149      	bne.n	80058ce <USB_HC_StartXfer+0x276>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d045      	beq.n	80058ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	79db      	ldrb	r3, [r3, #7]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d830      	bhi.n	80058ac <USB_HC_StartXfer+0x254>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <USB_HC_StartXfer+0x1f8>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005861 	.word	0x08005861
 8005854:	08005885 	.word	0x08005885
 8005858:	08005861 	.word	0x08005861
 800585c:	08005885 	.word	0x08005885
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	3303      	adds	r3, #3
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800586a:	8afa      	ldrh	r2, [r7, #22]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	b29b      	uxth	r3, r3
 8005872:	429a      	cmp	r2, r3
 8005874:	d91c      	bls.n	80058b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	619a      	str	r2, [r3, #24]
        }
        break;
 8005882:	e015      	b.n	80058b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	3303      	adds	r3, #3
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800588e:	8afa      	ldrh	r2, [r7, #22]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	b29b      	uxth	r3, r3
 800589a:	429a      	cmp	r2, r3
 800589c:	d90a      	bls.n	80058b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80058aa:	e003      	b.n	80058b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058ac:	bf00      	nop
 80058ae:	e002      	b.n	80058b6 <USB_HC_StartXfer+0x25e>
        break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <USB_HC_StartXfer+0x25e>
        break;
 80058b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	68d9      	ldr	r1, [r3, #12]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	785a      	ldrb	r2, [r3, #1]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2000      	movs	r0, #0
 80058c6:	9000      	str	r0, [sp, #0]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f7ff fb85 	bl	8004fd8 <USB_WritePacket>
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3728      	adds	r7, #40	; 0x28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	1ff80000 	.word	0x1ff80000
 80058dc:	200000b0 	.word	0x200000b0

080058e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	b29b      	uxth	r3, r3
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	0c9b      	lsrs	r3, r3, #18
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <USB_HC_Halt+0x3a>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d16c      	bne.n	8005a16 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	440a      	add	r2, r1
 8005952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005956:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800595a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d143      	bne.n	80059f0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	0151      	lsls	r1, r2, #5
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	440a      	add	r2, r1
 800597e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005986:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d4:	d81d      	bhi.n	8005a12 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ec:	d0ec      	beq.n	80059c8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059ee:	e080      	b.n	8005af2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a0e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a10:	e06f      	b.n	8005af2 <USB_HC_Halt+0x1f0>
          break;
 8005a12:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a14:	e06d      	b.n	8005af2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a34:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d143      	bne.n	8005ace <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a84:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aa4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab2:	d81d      	bhi.n	8005af0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aca:	d0ec      	beq.n	8005aa6 <USB_HC_Halt+0x1a4>
 8005acc:	e011      	b.n	8005af2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e000      	b.n	8005af2 <USB_HC_Halt+0x1f0>
          break;
 8005af0:	bf00      	nop
    }
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b14:	2301      	movs	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	04da      	lsls	r2, r3, #19
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <USB_DoPing+0x74>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	1ff80000 	.word	0x1ff80000

08005b78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff f9a1 	bl	8004ed0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b8e:	2110      	movs	r1, #16
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff f9d9 	bl	8004f48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff f9fc 	bl	8004f94 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e01f      	b.n	8005be2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bc8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3301      	adds	r3, #1
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b0f      	cmp	r3, #15
 8005be6:	d9dc      	bls.n	8005ba2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	e034      	b.n	8005c58 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	461a      	mov	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c34:	d80c      	bhi.n	8005c50 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4c:	d0ec      	beq.n	8005c28 <USB_StopHost+0xb0>
 8005c4e:	e000      	b.n	8005c52 <USB_StopHost+0xda>
        break;
 8005c50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3301      	adds	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d9c7      	bls.n	8005bee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c64:	461a      	mov	r2, r3
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff f91a 	bl	8004eae <USB_EnableGlobalInt>

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c84:	b590      	push	{r4, r7, lr}
 8005c86:	b089      	sub	sp, #36	; 0x24
 8005c88:	af04      	add	r7, sp, #16
 8005c8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	2202      	movs	r2, #2
 8005c90:	2102      	movs	r1, #2
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fc66 	bl	8006564 <USBH_FindInterface>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2bff      	cmp	r3, #255	; 0xff
 8005ca0:	d002      	beq.n	8005ca8 <USBH_CDC_InterfaceInit+0x24>
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d901      	bls.n	8005cac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e13d      	b.n	8005f28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc3b 	bl	800652c <USBH_SelectInterface>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e131      	b.n	8005f28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cca:	2050      	movs	r0, #80	; 0x50
 8005ccc:	f002 fa02 	bl	80080d4 <malloc>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cda:	69db      	ldr	r3, [r3, #28]
 8005cdc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e11f      	b.n	8005f28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005ce8:	2250      	movs	r2, #80	; 0x50
 8005cea:	2100      	movs	r1, #0
 8005cec:	68b8      	ldr	r0, [r7, #8]
 8005cee:	f002 fa01 	bl	80080f4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	211a      	movs	r1, #26
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	b25b      	sxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da15      	bge.n	8005d36 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	211a      	movs	r1, #26
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	211a      	movs	r1, #26
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fe32 	bl	80079a6 <USBH_AllocPipe>
 8005d42:	4603      	mov	r3, r0
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	7819      	ldrb	r1, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	7858      	ldrb	r0, [r3, #1]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	8952      	ldrh	r2, [r2, #10]
 8005d62:	9202      	str	r2, [sp, #8]
 8005d64:	2203      	movs	r2, #3
 8005d66:	9201      	str	r2, [sp, #4]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fdea 	bl	8007948 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f002 f8f9 	bl	8007f74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005d82:	2300      	movs	r3, #0
 8005d84:	2200      	movs	r2, #0
 8005d86:	210a      	movs	r1, #10
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fbeb 	bl	8006564 <USBH_FindInterface>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2bff      	cmp	r3, #255	; 0xff
 8005d96:	d002      	beq.n	8005d9e <USBH_CDC_InterfaceInit+0x11a>
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d901      	bls.n	8005da2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e0c2      	b.n	8005f28 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	211a      	movs	r1, #26
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da16      	bge.n	8005de8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	211a      	movs	r1, #26
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	211a      	movs	r1, #26
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	835a      	strh	r2, [r3, #26]
 8005de6:	e015      	b.n	8005e14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	211a      	movs	r1, #26
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	211a      	movs	r1, #26
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e0e:	881a      	ldrh	r2, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	211a      	movs	r1, #26
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	da16      	bge.n	8005e5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	211a      	movs	r1, #26
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	211a      	movs	r1, #26
 8005e48:	fb01 f303 	mul.w	r3, r1, r3
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e52:	881a      	ldrh	r2, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	835a      	strh	r2, [r3, #26]
 8005e58:	e015      	b.n	8005e86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	211a      	movs	r1, #26
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	211a      	movs	r1, #26
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	7b9b      	ldrb	r3, [r3, #14]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 fd8a 	bl	80079a6 <USBH_AllocPipe>
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	7bdb      	ldrb	r3, [r3, #15]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fd80 	bl	80079a6 <USBH_AllocPipe>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	7b59      	ldrb	r1, [r3, #13]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	7b98      	ldrb	r0, [r3, #14]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	8b12      	ldrh	r2, [r2, #24]
 8005ec6:	9202      	str	r2, [sp, #8]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	9201      	str	r2, [sp, #4]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4623      	mov	r3, r4
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f001 fd38 	bl	8007948 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	7b19      	ldrb	r1, [r3, #12]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	7bd8      	ldrb	r0, [r3, #15]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	8b52      	ldrh	r2, [r2, #26]
 8005ef0:	9202      	str	r2, [sp, #8]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	9201      	str	r2, [sp, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4623      	mov	r3, r4
 8005efa:	4602      	mov	r2, r0
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fd23 	bl	8007948 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	7b5b      	ldrb	r3, [r3, #13]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f002 f82e 	bl	8007f74 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	7b1b      	ldrb	r3, [r3, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f002 f827 	bl	8007f74 <USBH_LL_SetToggle>

  return USBH_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd90      	pop	{r4, r7, pc}

08005f30 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fd18 	bl	8007986 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 fd43 	bl	80079e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7b1b      	ldrb	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	7b1b      	ldrb	r3, [r3, #12]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 fd05 	bl	8007986 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	7b1b      	ldrb	r3, [r3, #12]
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fd30 	bl	80079e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	7b5b      	ldrb	r3, [r3, #13]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	7b5b      	ldrb	r3, [r3, #13]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fcf2 	bl	8007986 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	7b5b      	ldrb	r3, [r3, #13]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 fd1d 	bl	80079e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00b      	beq.n	8005fd8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f002 f88b 	bl	80080e4 <free>
    phost->pActiveClass->pData = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3340      	adds	r3, #64	; 0x40
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8b1 	bl	8006162 <GetLineCoding>
 8006000:	4603      	mov	r3, r0
 8006002:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006004:	7afb      	ldrb	r3, [r7, #11]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006010:	2102      	movs	r1, #2
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006016:	7afb      	ldrb	r3, [r7, #11]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006040:	2b04      	cmp	r3, #4
 8006042:	d877      	bhi.n	8006134 <USBH_CDC_Process+0x114>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <USBH_CDC_Process+0x2c>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006061 	.word	0x08006061
 8006050:	08006067 	.word	0x08006067
 8006054:	08006097 	.word	0x08006097
 8006058:	0800610b 	.word	0x0800610b
 800605c:	08006119 	.word	0x08006119
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e06d      	b.n	8006142 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f897 	bl	80061a0 <SetLineCoding>
 8006072:	4603      	mov	r3, r0
 8006074:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006084:	e058      	b.n	8006138 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d055      	beq.n	8006138 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2204      	movs	r2, #4
 8006090:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006094:	e050      	b.n	8006138 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3340      	adds	r3, #64	; 0x40
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f860 	bl	8006162 <GetLineCoding>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d126      	bne.n	80060fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060be:	791b      	ldrb	r3, [r3, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d13b      	bne.n	800613c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d133      	bne.n	800613c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d12b      	bne.n	800613c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d124      	bne.n	800613c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f958 	bl	80063a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80060f8:	e020      	b.n	800613c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d01d      	beq.n	800613c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2204      	movs	r2, #4
 8006104:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006108:	e018      	b.n	800613c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f867 	bl	80061de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f8da 	bl	80062ca <CDC_ProcessReception>
      break;
 8006116:	e014      	b.n	8006142 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006118:	2100      	movs	r1, #0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 ffe3 	bl	80070e6 <USBH_ClrFeature>
 8006120:	4603      	mov	r3, r0
 8006122:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006132:	e005      	b.n	8006140 <USBH_CDC_Process+0x120>

    default:
      break;
 8006134:	bf00      	nop
 8006136:	e004      	b.n	8006142 <USBH_CDC_Process+0x122>
      break;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <USBH_CDC_Process+0x122>
      break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <USBH_CDC_Process+0x122>
      break;
 8006140:	bf00      	nop

  }

  return status;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	22a1      	movs	r2, #161	; 0xa1
 8006170:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2207      	movs	r2, #7
 8006188:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2207      	movs	r2, #7
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 f988 	bl	80074a6 <USBH_CtlReq>
 8006196:	4603      	mov	r3, r0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2221      	movs	r2, #33	; 0x21
 80061ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2207      	movs	r2, #7
 80061c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2207      	movs	r2, #7
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f969 	bl	80074a6 <USBH_CtlReq>
 80061d4:	4603      	mov	r3, r0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b086      	sub	sp, #24
 80061e2:	af02      	add	r7, sp, #8
 80061e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d002      	beq.n	8006204 <CDC_ProcessTransmission+0x26>
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d023      	beq.n	800624a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006202:	e05e      	b.n	80062c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	8b12      	ldrh	r2, [r2, #24]
 800620c:	4293      	cmp	r3, r2
 800620e:	d90b      	bls.n	8006228 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8b1a      	ldrh	r2, [r3, #24]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	7b5b      	ldrb	r3, [r3, #13]
 800621c:	2001      	movs	r0, #1
 800621e:	9000      	str	r0, [sp, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fb4e 	bl	80078c2 <USBH_BulkSendData>
 8006226:	e00b      	b.n	8006240 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	7b5b      	ldrb	r3, [r3, #13]
 8006236:	2001      	movs	r0, #1
 8006238:	9000      	str	r0, [sp, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fb41 	bl	80078c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006248:	e03b      	b.n	80062c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	7b5b      	ldrb	r3, [r3, #13]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fe65 	bl	8007f20 <USBH_LL_GetURBState>
 8006256:	4603      	mov	r3, r0
 8006258:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d128      	bne.n	80062b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	8b12      	ldrh	r2, [r2, #24]
 8006268:	4293      	cmp	r3, r2
 800626a:	d90e      	bls.n	800628a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	8b12      	ldrh	r2, [r2, #24]
 8006274:	1a9a      	subs	r2, r3, r2
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	8b12      	ldrh	r2, [r2, #24]
 8006282:	441a      	add	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61da      	str	r2, [r3, #28]
 8006288:	e002      	b.n	8006290 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062a0:	e00e      	b.n	80062c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f868 	bl	8006380 <USBH_CDC_TransmitCallback>
      break;
 80062b0:	e006      	b.n	80062c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d103      	bne.n	80062c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062c0:	bf00      	nop
  }
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062dc:	2300      	movs	r3, #0
 80062de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d002      	beq.n	80062f0 <CDC_ProcessReception+0x26>
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d00e      	beq.n	800630c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80062ee:	e043      	b.n	8006378 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	6a19      	ldr	r1, [r3, #32]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	8b5a      	ldrh	r2, [r3, #26]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	7b1b      	ldrb	r3, [r3, #12]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fb05 	bl	800790c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2204      	movs	r2, #4
 8006306:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800630a:	e035      	b.n	8006378 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	7b1b      	ldrb	r3, [r3, #12]
 8006310:	4619      	mov	r1, r3
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 fe04 	bl	8007f20 <USBH_LL_GetURBState>
 8006318:	4603      	mov	r3, r0
 800631a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d129      	bne.n	8006376 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	7b1b      	ldrb	r3, [r3, #12]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fd67 	bl	8007dfc <USBH_LL_GetLastXferSize>
 800632e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	429a      	cmp	r2, r3
 8006338:	d016      	beq.n	8006368 <CDC_ProcessReception+0x9e>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	8b5b      	ldrh	r3, [r3, #26]
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4293      	cmp	r3, r2
 8006344:	d910      	bls.n	8006368 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	6a1a      	ldr	r2, [r3, #32]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	441a      	add	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2203      	movs	r2, #3
 8006362:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006366:	e006      	b.n	8006376 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f80f 	bl	8006394 <USBH_CDC_ReceiveCallback>
      break;
 8006376:	bf00      	nop
  }
}
 8006378:	bf00      	nop
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80063d0:	2302      	movs	r3, #2
 80063d2:	e029      	b.n	8006428 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	79fa      	ldrb	r2, [r7, #7]
 80063d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f81f 	bl	8006430 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f001 fc37 	bl	8007c94 <USBH_LL_Init>

  return USBH_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e009      	b.n	8006456 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	33e0      	adds	r3, #224	; 0xe0
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	2200      	movs	r2, #0
 800644e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b0e      	cmp	r3, #14
 800645a:	d9f2      	bls.n	8006442 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e009      	b.n	8006476 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647c:	d3f1      	bcc.n	8006462 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d016      	beq.n	800651a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10e      	bne.n	8006514 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80064fc:	1c59      	adds	r1, r3, #1
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	33de      	adds	r3, #222	; 0xde
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	e004      	b.n	800651e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006514:	2302      	movs	r3, #2
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	e001      	b.n	800651e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800651a:	2302      	movs	r3, #2
 800651c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	429a      	cmp	r2, r3
 8006546:	d204      	bcs.n	8006552 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006550:	e001      	b.n	8006556 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006552:	2302      	movs	r3, #2
 8006554:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4603      	mov	r3, r0
 8006574:	70fb      	strb	r3, [r7, #3]
 8006576:	460b      	mov	r3, r1
 8006578:	70bb      	strb	r3, [r7, #2]
 800657a:	4613      	mov	r3, r2
 800657c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800658c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800658e:	e025      	b.n	80065dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	221a      	movs	r2, #26
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	3308      	adds	r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	3302      	adds	r3, #2
 80065a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	795b      	ldrb	r3, [r3, #5]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d002      	beq.n	80065b2 <USBH_FindInterface+0x4e>
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	d111      	bne.n	80065d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80065b6:	78ba      	ldrb	r2, [r7, #2]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d002      	beq.n	80065c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065bc:	78bb      	ldrb	r3, [r7, #2]
 80065be:	2bff      	cmp	r3, #255	; 0xff
 80065c0:	d109      	bne.n	80065d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80065c6:	787a      	ldrb	r2, [r7, #1]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d002      	beq.n	80065d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80065cc:	787b      	ldrb	r3, [r7, #1]
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d101      	bne.n	80065d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	e006      	b.n	80065e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	3301      	adds	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d9d6      	bls.n	8006590 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80065e2:	23ff      	movs	r3, #255	; 0xff
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fb87 	bl	8007d0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80065fe:	2101      	movs	r1, #1
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fca0 	bl	8007f46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af04      	add	r7, sp, #16
 8006616:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006618:	2302      	movs	r3, #2
 800661a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	d102      	bne.n	8006632 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2203      	movs	r2, #3
 8006630:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b0b      	cmp	r3, #11
 800663a:	f200 81b3 	bhi.w	80069a4 <USBH_Process+0x394>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <USBH_Process+0x34>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006675 	.word	0x08006675
 8006648:	080066a7 	.word	0x080066a7
 800664c:	0800670f 	.word	0x0800670f
 8006650:	0800693f 	.word	0x0800693f
 8006654:	080069a5 	.word	0x080069a5
 8006658:	080067b3 	.word	0x080067b3
 800665c:	080068e5 	.word	0x080068e5
 8006660:	080067e9 	.word	0x080067e9
 8006664:	08006809 	.word	0x08006809
 8006668:	08006829 	.word	0x08006829
 800666c:	08006857 	.word	0x08006857
 8006670:	08006927 	.word	0x08006927
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8193 	beq.w	80069a8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006688:	20c8      	movs	r0, #200	; 0xc8
 800668a:	f001 fca6 	bl	8007fda <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fb99 	bl	8007dc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80066a4:	e180      	b.n	80069a8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d107      	bne.n	80066c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80066be:	e182      	b.n	80069c6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ca:	d914      	bls.n	80066f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066d2:	3301      	adds	r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d903      	bls.n	80066ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	220d      	movs	r2, #13
 80066ea:	701a      	strb	r2, [r3, #0]
      break;
 80066ec:	e16b      	b.n	80069c6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
      break;
 80066f4:	e167      	b.n	80069c6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80066fc:	f103 020a 	add.w	r2, r3, #10
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006706:	200a      	movs	r0, #10
 8006708:	f001 fc67 	bl	8007fda <USBH_Delay>
      break;
 800670c:	e15b      	b.n	80069c6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800671e:	2104      	movs	r1, #4
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006724:	2064      	movs	r0, #100	; 0x64
 8006726:	f001 fc58 	bl	8007fda <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 fb24 	bl	8007d78 <USBH_LL_GetSpeed>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2205      	movs	r2, #5
 800673e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006740:	2100      	movs	r1, #0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 f92f 	bl	80079a6 <USBH_AllocPipe>
 8006748:	4603      	mov	r3, r0
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006750:	2180      	movs	r1, #128	; 0x80
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f927 	bl	80079a6 <USBH_AllocPipe>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	7919      	ldrb	r1, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006774:	b292      	uxth	r2, r2
 8006776:	9202      	str	r2, [sp, #8]
 8006778:	2200      	movs	r2, #0
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4603      	mov	r3, r0
 8006780:	2280      	movs	r2, #128	; 0x80
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 f8e0 	bl	8007948 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	7959      	ldrb	r1, [r3, #5]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800679c:	b292      	uxth	r2, r2
 800679e:	9202      	str	r2, [sp, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4603      	mov	r3, r0
 80067a8:	2200      	movs	r2, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f8cc 	bl	8007948 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80067b0:	e109      	b.n	80069c6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f90c 	bl	80069d0 <USBH_HandleEnum>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 80f3 	bne.w	80069ac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d103      	bne.n	80067e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2208      	movs	r2, #8
 80067dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067de:	e0e5      	b.n	80069ac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2207      	movs	r2, #7
 80067e4:	701a      	strb	r2, [r3, #0]
      break;
 80067e6:	e0e1      	b.n	80069ac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80de 	beq.w	80069b0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067fa:	2101      	movs	r1, #1
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2208      	movs	r2, #8
 8006804:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006806:	e0d3      	b.n	80069b0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800680e:	b29b      	uxth	r3, r3
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc20 	bl	8007058 <USBH_SetCfg>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 80ca 	bne.w	80069b4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2209      	movs	r2, #9
 8006824:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006826:	e0c5      	b.n	80069b4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006836:	2101      	movs	r1, #1
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc30 	bl	800709e <USBH_SetFeature>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 80b9 	bne.w	80069b8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	220a      	movs	r2, #10
 800684a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800684c:	e0b4      	b.n	80069b8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	220a      	movs	r2, #10
 8006852:	701a      	strb	r2, [r3, #0]
      break;
 8006854:	e0b0      	b.n	80069b8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80ad 	beq.w	80069bc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
 800686e:	e016      	b.n	800689e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006870:	7bfa      	ldrb	r2, [r7, #15]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	32de      	adds	r2, #222	; 0xde
 8006876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687a:	791a      	ldrb	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006882:	429a      	cmp	r2, r3
 8006884:	d108      	bne.n	8006898 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006886:	7bfa      	ldrb	r2, [r7, #15]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32de      	adds	r2, #222	; 0xde
 800688c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006896:	e005      	b.n	80068a4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	3301      	adds	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0e5      	beq.n	8006870 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2206      	movs	r2, #6
 80068c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068cc:	2103      	movs	r1, #3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80068d2:	e073      	b.n	80069bc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	220d      	movs	r2, #13
 80068d8:	701a      	strb	r2, [r3, #0]
      break;
 80068da:	e06f      	b.n	80069bc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	220d      	movs	r2, #13
 80068e0:	701a      	strb	r2, [r3, #0]
      break;
 80068e2:	e06b      	b.n	80069bc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d017      	beq.n	800691e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	4798      	blx	r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	220b      	movs	r2, #11
 800690a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800690c:	e058      	b.n	80069c0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d154      	bne.n	80069c0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	220d      	movs	r2, #13
 800691a:	701a      	strb	r2, [r3, #0]
      break;
 800691c:	e050      	b.n	80069c0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	220d      	movs	r2, #13
 8006922:	701a      	strb	r2, [r3, #0]
      break;
 8006924:	e04c      	b.n	80069c0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d049      	beq.n	80069c4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
      }
      break;
 800693c:	e042      	b.n	80069c4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff fd72 	bl	8006430 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800697a:	2105      	movs	r1, #5
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d107      	bne.n	800699c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fe2b 	bl	80065f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800699a:	e014      	b.n	80069c6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 f9b5 	bl	8007d0c <USBH_LL_Start>
      break;
 80069a2:	e010      	b.n	80069c6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80069a4:	bf00      	nop
 80069a6:	e00e      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069a8:	bf00      	nop
 80069aa:	e00c      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069ac:	bf00      	nop
 80069ae:	e00a      	b.n	80069c6 <USBH_Process+0x3b6>
    break;
 80069b0:	bf00      	nop
 80069b2:	e008      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069b4:	bf00      	nop
 80069b6:	e006      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069b8:	bf00      	nop
 80069ba:	e004      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069bc:	bf00      	nop
 80069be:	e002      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069c0:	bf00      	nop
 80069c2:	e000      	b.n	80069c6 <USBH_Process+0x3b6>
      break;
 80069c4:	bf00      	nop
  }
  return USBH_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af04      	add	r7, sp, #16
 80069d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80069dc:	2301      	movs	r3, #1
 80069de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b07      	cmp	r3, #7
 80069e6:	f200 81c1 	bhi.w	8006d6c <USBH_HandleEnum+0x39c>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_HandleEnum+0x20>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a11 	.word	0x08006a11
 80069f4:	08006acf 	.word	0x08006acf
 80069f8:	08006b39 	.word	0x08006b39
 80069fc:	08006bc7 	.word	0x08006bc7
 8006a00:	08006c31 	.word	0x08006c31
 8006a04:	08006ca1 	.word	0x08006ca1
 8006a08:	08006ce7 	.word	0x08006ce7
 8006a0c:	08006d2d 	.word	0x08006d2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006a10:	2108      	movs	r1, #8
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa50 	bl	8006eb8 <USBH_Get_DevDesc>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d130      	bne.n	8006a84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7919      	ldrb	r1, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006a46:	b292      	uxth	r2, r2
 8006a48:	9202      	str	r2, [sp, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	9201      	str	r2, [sp, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4603      	mov	r3, r0
 8006a52:	2280      	movs	r2, #128	; 0x80
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ff77 	bl	8007948 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7959      	ldrb	r1, [r3, #5]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a6e:	b292      	uxth	r2, r2
 8006a70:	9202      	str	r2, [sp, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	9201      	str	r2, [sp, #4]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 ff63 	bl	8007948 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a82:	e175      	b.n	8006d70 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	f040 8172 	bne.w	8006d70 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a92:	3301      	adds	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d903      	bls.n	8006aae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	220d      	movs	r2, #13
 8006aaa:	701a      	strb	r2, [r3, #0]
      break;
 8006aac:	e160      	b.n	8006d70 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	795b      	ldrb	r3, [r3, #5]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 ff97 	bl	80079e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 ff91 	bl	80079e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
      break;
 8006acc:	e150      	b.n	8006d70 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006ace:	2112      	movs	r1, #18
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9f1 	bl	8006eb8 <USBH_Get_DevDesc>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ae6:	e145      	b.n	8006d74 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	f040 8142 	bne.w	8006d74 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006af6:	3301      	adds	r3, #1
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d903      	bls.n	8006b12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	220d      	movs	r2, #13
 8006b0e:	701a      	strb	r2, [r3, #0]
      break;
 8006b10:	e130      	b.n	8006d74 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	795b      	ldrb	r3, [r3, #5]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 ff65 	bl	80079e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	791b      	ldrb	r3, [r3, #4]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 ff5f 	bl	80079e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	701a      	strb	r2, [r3, #0]
      break;
 8006b36:	e11d      	b.n	8006d74 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006b38:	2101      	movs	r1, #1
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa68 	bl	8007010 <USBH_SetAddress>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d132      	bne.n	8006bb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006b4a:	2002      	movs	r0, #2
 8006b4c:	f001 fa45 	bl	8007fda <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7919      	ldrb	r1, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006b72:	b292      	uxth	r2, r2
 8006b74:	9202      	str	r2, [sp, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	9201      	str	r2, [sp, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2280      	movs	r2, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fee1 	bl	8007948 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	7959      	ldrb	r1, [r3, #5]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	9202      	str	r2, [sp, #8]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	9201      	str	r2, [sp, #4]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fecd 	bl	8007948 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bae:	e0e3      	b.n	8006d78 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	f040 80e0 	bne.w	8006d78 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	220d      	movs	r2, #13
 8006bbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	705a      	strb	r2, [r3, #1]
      break;
 8006bc4:	e0d8      	b.n	8006d78 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006bc6:	2109      	movs	r1, #9
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f99d 	bl	8006f08 <USBH_Get_CfgDesc>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bd2:	7bbb      	ldrb	r3, [r7, #14]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bde:	e0cd      	b.n	8006d7c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	f040 80ca 	bne.w	8006d7c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d903      	bls.n	8006c0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	220d      	movs	r2, #13
 8006c06:	701a      	strb	r2, [r3, #0]
      break;
 8006c08:	e0b8      	b.n	8006d7c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	795b      	ldrb	r3, [r3, #5]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fee9 	bl	80079e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fee3 	bl	80079e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e0a5      	b.n	8006d7c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f965 	bl	8006f08 <USBH_Get_CfgDesc>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2205      	movs	r2, #5
 8006c4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c4e:	e097      	b.n	8006d80 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	f040 8094 	bne.w	8006d80 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5e:	3301      	adds	r3, #1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d903      	bls.n	8006c7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	220d      	movs	r2, #13
 8006c76:	701a      	strb	r2, [r3, #0]
      break;
 8006c78:	e082      	b.n	8006d80 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	795b      	ldrb	r3, [r3, #5]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 feb1 	bl	80079e8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 feab 	bl	80079e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
      break;
 8006c9e:	e06f      	b.n	8006d80 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d019      	beq.n	8006cde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006cb6:	23ff      	movs	r3, #255	; 0xff
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f949 	bl	8006f50 <USBH_Get_StringDesc>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2206      	movs	r2, #6
 8006ccc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006cce:	e059      	b.n	8006d84 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d156      	bne.n	8006d84 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2206      	movs	r2, #6
 8006cda:	705a      	strb	r2, [r3, #1]
      break;
 8006cdc:	e052      	b.n	8006d84 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2206      	movs	r2, #6
 8006ce2:	705a      	strb	r2, [r3, #1]
      break;
 8006ce4:	e04e      	b.n	8006d84 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006cfc:	23ff      	movs	r3, #255	; 0xff
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f926 	bl	8006f50 <USBH_Get_StringDesc>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d103      	bne.n	8006d16 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2207      	movs	r2, #7
 8006d12:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d14:	e038      	b.n	8006d88 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d135      	bne.n	8006d88 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2207      	movs	r2, #7
 8006d20:	705a      	strb	r2, [r3, #1]
      break;
 8006d22:	e031      	b.n	8006d88 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2207      	movs	r2, #7
 8006d28:	705a      	strb	r2, [r3, #1]
      break;
 8006d2a:	e02d      	b.n	8006d88 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006d42:	23ff      	movs	r3, #255	; 0xff
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f903 	bl	8006f50 <USBH_Get_StringDesc>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006d58:	e018      	b.n	8006d8c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d115      	bne.n	8006d8c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
      break;
 8006d64:	e012      	b.n	8006d8c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6a:	e00f      	b.n	8006d8c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e00e      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d70:	bf00      	nop
 8006d72:	e00c      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d74:	bf00      	nop
 8006d76:	e00a      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d78:	bf00      	nop
 8006d7a:	e008      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d7c:	bf00      	nop
 8006d7e:	e006      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d80:	bf00      	nop
 8006d82:	e004      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <USBH_HandleEnum+0x3be>
      break;
 8006d8c:	bf00      	nop
  }
  return Status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f804 	bl	8006dda <USBH_HandleSof>
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b0b      	cmp	r3, #11
 8006dea:	d10a      	bne.n	8006e02 <USBH_HandleSof+0x28>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	4798      	blx	r3
  }
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006e1a:	bf00      	nop
}
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006e36:	bf00      	nop
}
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 ff56 	bl	8007d42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	791b      	ldrb	r3, [r3, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fda3 	bl	80079e8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	795b      	ldrb	r3, [r3, #5]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fd9d 	bl	80079e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f864 	bl	8006fa6 <USBH_GetDescriptor>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	b292      	uxth	r2, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	f000 f918 	bl	800712e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	331c      	adds	r3, #28
 8006f18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006f1a:	887b      	ldrh	r3, [r7, #2]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f83d 	bl	8006fa6 <USBH_GetDescriptor>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	72fb      	strb	r3, [r7, #11]
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d107      	bne.n	8006f46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f3c:	887a      	ldrh	r2, [r7, #2]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f964 	bl	800720e <USBH_ParseCfgDesc>
  }

  return status;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	72fb      	strb	r3, [r7, #11]
 8006f60:	4613      	mov	r3, r2
 8006f62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006f74:	893b      	ldrh	r3, [r7, #8]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f812 	bl	8006fa6 <USBH_GetDescriptor>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d107      	bne.n	8006f9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f92:	893a      	ldrh	r2, [r7, #8]
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fa37 	bl	800740a <USBH_ParseStringDesc>
  }

  return status;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	607b      	str	r3, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	72fb      	strb	r3, [r7, #11]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	789b      	ldrb	r3, [r3, #2]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d11c      	bne.n	8006ffa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006fc0:	7afb      	ldrb	r3, [r7, #11]
 8006fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2206      	movs	r2, #6
 8006fd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	893a      	ldrh	r2, [r7, #8]
 8006fd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006fd8:	893b      	ldrh	r3, [r7, #8]
 8006fda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe2:	d104      	bne.n	8006fee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f240 4209 	movw	r2, #1033	; 0x409
 8006fea:	829a      	strh	r2, [r3, #20]
 8006fec:	e002      	b.n	8006ff4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8b3a      	ldrh	r2, [r7, #24]
 8006ff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006ffa:	8b3b      	ldrh	r3, [r7, #24]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fa50 	bl	80074a6 <USBH_CtlReq>
 8007006:	4603      	mov	r3, r0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	789b      	ldrb	r3, [r3, #2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10f      	bne.n	8007044 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2205      	movs	r2, #5
 800702e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007044:	2200      	movs	r2, #0
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa2c 	bl	80074a6 <USBH_CtlReq>
 800704e:	4603      	mov	r3, r0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	789b      	ldrb	r3, [r3, #2]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d10e      	bne.n	800708a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2209      	movs	r2, #9
 8007076:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	887a      	ldrh	r2, [r7, #2]
 800707c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa09 	bl	80074a6 <USBH_CtlReq>
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	789b      	ldrb	r3, [r3, #2]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d10f      	bne.n	80070d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2203      	movs	r2, #3
 80070bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9e5 	bl	80074a6 <USBH_CtlReq>
 80070dc:	4603      	mov	r3, r0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	789b      	ldrb	r3, [r3, #2]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10f      	bne.n	800711a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f9c1 	bl	80074a6 <USBH_CtlReq>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	4613      	mov	r3, r2
 800713a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	785a      	ldrb	r2, [r3, #1]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3302      	adds	r3, #2
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b29a      	uxth	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3303      	adds	r3, #3
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	b29b      	uxth	r3, r3
 8007160:	4313      	orrs	r3, r2
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	791a      	ldrb	r2, [r3, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	795a      	ldrb	r2, [r3, #5]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	799a      	ldrb	r2, [r3, #6]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	79da      	ldrb	r2, [r3, #7]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	2b08      	cmp	r3, #8
 800718c:	d939      	bls.n	8007202 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3308      	adds	r3, #8
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b29a      	uxth	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3309      	adds	r3, #9
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	330a      	adds	r3, #10
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	330b      	adds	r3, #11
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	b29b      	uxth	r3, r3
 80071be:	4313      	orrs	r3, r2
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	330c      	adds	r3, #12
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	330d      	adds	r3, #13
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	7b9a      	ldrb	r2, [r3, #14]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	7bda      	ldrb	r2, [r3, #15]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	7c1a      	ldrb	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	7c5a      	ldrb	r2, [r3, #17]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	745a      	strb	r2, [r3, #17]
  }
}
 8007202:	bf00      	nop
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08a      	sub	sp, #40	; 0x28
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	4613      	mov	r3, r2
 800721a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	785a      	ldrb	r2, [r3, #1]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	3302      	adds	r3, #2
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b29a      	uxth	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3303      	adds	r3, #3
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b29b      	uxth	r3, r3
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	b29b      	uxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	791a      	ldrb	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	795a      	ldrb	r2, [r3, #5]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	799a      	ldrb	r2, [r3, #6]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	79da      	ldrb	r2, [r3, #7]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	7a1a      	ldrb	r2, [r3, #8]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b09      	cmp	r3, #9
 8007288:	d95f      	bls.n	800734a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800728a:	2309      	movs	r3, #9
 800728c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800728e:	2300      	movs	r3, #0
 8007290:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007292:	e051      	b.n	8007338 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007294:	f107 0316 	add.w	r3, r7, #22
 8007298:	4619      	mov	r1, r3
 800729a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800729c:	f000 f8e8 	bl	8007470 <USBH_GetNextDesc>
 80072a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d146      	bne.n	8007338 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80072aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ae:	221a      	movs	r2, #26
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	3308      	adds	r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	3302      	adds	r3, #2
 80072bc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80072be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072c0:	69f8      	ldr	r0, [r7, #28]
 80072c2:	f000 f846 	bl	8007352 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80072d0:	e022      	b.n	8007318 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072d2:	f107 0316 	add.w	r3, r7, #22
 80072d6:	4619      	mov	r1, r3
 80072d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072da:	f000 f8c9 	bl	8007470 <USBH_GetNextDesc>
 80072de:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b05      	cmp	r3, #5
 80072e6:	d117      	bne.n	8007318 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80072e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80072f0:	3201      	adds	r2, #1
 80072f2:	00d2      	lsls	r2, r2, #3
 80072f4:	211a      	movs	r1, #26
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	3308      	adds	r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	3304      	adds	r3, #4
 8007304:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007308:	69b8      	ldr	r0, [r7, #24]
 800730a:	f000 f851 	bl	80073b0 <USBH_ParseEPDesc>
            ep_ix++;
 800730e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007312:	3301      	adds	r3, #1
 8007314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	791b      	ldrb	r3, [r3, #4]
 800731c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007320:	429a      	cmp	r2, r3
 8007322:	d204      	bcs.n	800732e <USBH_ParseCfgDesc+0x120>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	885a      	ldrh	r2, [r3, #2]
 8007328:	8afb      	ldrh	r3, [r7, #22]
 800732a:	429a      	cmp	r2, r3
 800732c:	d8d1      	bhi.n	80072d2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800732e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007332:	3301      	adds	r3, #1
 8007334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800733c:	2b01      	cmp	r3, #1
 800733e:	d804      	bhi.n	800734a <USBH_ParseCfgDesc+0x13c>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	885a      	ldrh	r2, [r3, #2]
 8007344:	8afb      	ldrh	r3, [r7, #22]
 8007346:	429a      	cmp	r2, r3
 8007348:	d8a4      	bhi.n	8007294 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800734a:	bf00      	nop
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781a      	ldrb	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	785a      	ldrb	r2, [r3, #1]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	789a      	ldrb	r2, [r3, #2]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	78da      	ldrb	r2, [r3, #3]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	791a      	ldrb	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	795a      	ldrb	r2, [r3, #5]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	799a      	ldrb	r2, [r3, #6]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	79da      	ldrb	r2, [r3, #7]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	7a1a      	ldrb	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	721a      	strb	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781a      	ldrb	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	785a      	ldrb	r2, [r3, #1]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	789a      	ldrb	r2, [r3, #2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	78da      	ldrb	r2, [r3, #3]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	3304      	adds	r3, #4
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	3305      	adds	r3, #5
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	4313      	orrs	r3, r2
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	799a      	ldrb	r2, [r3, #6]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	719a      	strb	r2, [r3, #6]
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800740a:	b480      	push	{r7}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	4613      	mov	r3, r2
 8007416:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d120      	bne.n	8007464 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	1e9a      	subs	r2, r3, #2
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	4293      	cmp	r3, r2
 800742c:	bf28      	it	cs
 800742e:	4613      	movcs	r3, r2
 8007430:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3302      	adds	r3, #2
 8007436:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007438:	2300      	movs	r3, #0
 800743a:	82fb      	strh	r3, [r7, #22]
 800743c:	e00b      	b.n	8007456 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800743e:	8afb      	ldrh	r3, [r7, #22]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	701a      	strb	r2, [r3, #0]
      pdest++;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	3301      	adds	r3, #1
 800744e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007450:	8afb      	ldrh	r3, [r7, #22]
 8007452:	3302      	adds	r3, #2
 8007454:	82fb      	strh	r3, [r7, #22]
 8007456:	8afa      	ldrh	r2, [r7, #22]
 8007458:	8abb      	ldrh	r3, [r7, #20]
 800745a:	429a      	cmp	r2, r3
 800745c:	d3ef      	bcc.n	800743e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
  }
}
 8007464:	bf00      	nop
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	881a      	ldrh	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	4413      	add	r3, r2
 8007486:	b29a      	uxth	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4413      	add	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	4613      	mov	r3, r2
 80074b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80074b4:	2301      	movs	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	789b      	ldrb	r3, [r3, #2]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d002      	beq.n	80074c6 <USBH_CtlReq+0x20>
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d00f      	beq.n	80074e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80074c4:	e027      	b.n	8007516 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	88fa      	ldrh	r2, [r7, #6]
 80074d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2202      	movs	r2, #2
 80074dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80074de:	2301      	movs	r3, #1
 80074e0:	75fb      	strb	r3, [r7, #23]
      break;
 80074e2:	e018      	b.n	8007516 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f81b 	bl	8007520 <USBH_HandleControl>
 80074ea:	4603      	mov	r3, r0
 80074ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <USBH_CtlReq+0x54>
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d106      	bne.n	8007508 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2201      	movs	r2, #1
 80074fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	761a      	strb	r2, [r3, #24]
      break;
 8007506:	e005      	b.n	8007514 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d102      	bne.n	8007514 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	709a      	strb	r2, [r3, #2]
      break;
 8007514:	bf00      	nop
  }
  return status;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af02      	add	r7, sp, #8
 8007526:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007528:	2301      	movs	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800752c:	2300      	movs	r3, #0
 800752e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7e1b      	ldrb	r3, [r3, #24]
 8007534:	3b01      	subs	r3, #1
 8007536:	2b0a      	cmp	r3, #10
 8007538:	f200 8156 	bhi.w	80077e8 <USBH_HandleControl+0x2c8>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBH_HandleControl+0x24>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007571 	.word	0x08007571
 8007548:	0800758b 	.word	0x0800758b
 800754c:	080075f5 	.word	0x080075f5
 8007550:	0800761b 	.word	0x0800761b
 8007554:	08007653 	.word	0x08007653
 8007558:	0800767d 	.word	0x0800767d
 800755c:	080076cf 	.word	0x080076cf
 8007560:	080076f1 	.word	0x080076f1
 8007564:	0800772d 	.word	0x0800772d
 8007568:	08007753 	.word	0x08007753
 800756c:	08007791 	.word	0x08007791
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f103 0110 	add.w	r1, r3, #16
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	795b      	ldrb	r3, [r3, #5]
 800757a:	461a      	mov	r2, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f943 	bl	8007808 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2202      	movs	r2, #2
 8007586:	761a      	strb	r2, [r3, #24]
      break;
 8007588:	e139      	b.n	80077fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fcc5 	bl	8007f20 <USBH_LL_GetURBState>
 8007596:	4603      	mov	r3, r0
 8007598:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d11e      	bne.n	80075de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7c1b      	ldrb	r3, [r3, #16]
 80075a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	8adb      	ldrh	r3, [r3, #22]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80075b2:	7b7b      	ldrb	r3, [r7, #13]
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d103      	bne.n	80075c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2203      	movs	r2, #3
 80075bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80075be:	e115      	b.n	80077ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2205      	movs	r2, #5
 80075c4:	761a      	strb	r2, [r3, #24]
      break;
 80075c6:	e111      	b.n	80077ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80075c8:	7b7b      	ldrb	r3, [r7, #13]
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d103      	bne.n	80075d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2209      	movs	r2, #9
 80075d2:	761a      	strb	r2, [r3, #24]
      break;
 80075d4:	e10a      	b.n	80077ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2207      	movs	r2, #7
 80075da:	761a      	strb	r2, [r3, #24]
      break;
 80075dc:	e106      	b.n	80077ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d003      	beq.n	80075ec <USBH_HandleControl+0xcc>
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	f040 8100 	bne.w	80077ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220b      	movs	r2, #11
 80075f0:	761a      	strb	r2, [r3, #24]
      break;
 80075f2:	e0fb      	b.n	80077ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6899      	ldr	r1, [r3, #8]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	899a      	ldrh	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	791b      	ldrb	r3, [r3, #4]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f93a 	bl	8007886 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2204      	movs	r2, #4
 8007616:	761a      	strb	r2, [r3, #24]
      break;
 8007618:	e0f1      	b.n	80077fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc7d 	bl	8007f20 <USBH_LL_GetURBState>
 8007626:	4603      	mov	r3, r0
 8007628:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d102      	bne.n	8007636 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2209      	movs	r2, #9
 8007634:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	2b05      	cmp	r3, #5
 800763a:	d102      	bne.n	8007642 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800763c:	2303      	movs	r3, #3
 800763e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007640:	e0d6      	b.n	80077f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b04      	cmp	r3, #4
 8007646:	f040 80d3 	bne.w	80077f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	220b      	movs	r2, #11
 800764e:	761a      	strb	r2, [r3, #24]
      break;
 8007650:	e0ce      	b.n	80077f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6899      	ldr	r1, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	899a      	ldrh	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	795b      	ldrb	r3, [r3, #5]
 800765e:	2001      	movs	r0, #1
 8007660:	9000      	str	r0, [sp, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8ea 	bl	800783c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2206      	movs	r2, #6
 8007678:	761a      	strb	r2, [r3, #24]
      break;
 800767a:	e0c0      	b.n	80077fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	795b      	ldrb	r3, [r3, #5]
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fc4c 	bl	8007f20 <USBH_LL_GetURBState>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d103      	bne.n	800769a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2207      	movs	r2, #7
 8007696:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007698:	e0ac      	b.n	80077f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	2b05      	cmp	r3, #5
 800769e:	d105      	bne.n	80076ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	220c      	movs	r2, #12
 80076a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80076a6:	2303      	movs	r3, #3
 80076a8:	73fb      	strb	r3, [r7, #15]
      break;
 80076aa:	e0a3      	b.n	80077f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d103      	bne.n	80076ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2205      	movs	r2, #5
 80076b6:	761a      	strb	r2, [r3, #24]
      break;
 80076b8:	e09c      	b.n	80077f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	2b04      	cmp	r3, #4
 80076be:	f040 8099 	bne.w	80077f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	220b      	movs	r2, #11
 80076c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80076c8:	2302      	movs	r3, #2
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e092      	b.n	80077f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8d5 	bl	8007886 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2208      	movs	r2, #8
 80076ec:	761a      	strb	r2, [r3, #24]

      break;
 80076ee:	e086      	b.n	80077fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fc12 	bl	8007f20 <USBH_LL_GetURBState>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d105      	bne.n	8007712 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007710:	e072      	b.n	80077f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	2b04      	cmp	r3, #4
 8007716:	d103      	bne.n	8007720 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	220b      	movs	r2, #11
 800771c:	761a      	strb	r2, [r3, #24]
      break;
 800771e:	e06b      	b.n	80077f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b05      	cmp	r3, #5
 8007724:	d168      	bne.n	80077f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007726:	2303      	movs	r3, #3
 8007728:	73fb      	strb	r3, [r7, #15]
      break;
 800772a:	e065      	b.n	80077f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	795b      	ldrb	r3, [r3, #5]
 8007730:	2201      	movs	r2, #1
 8007732:	9200      	str	r2, [sp, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	2100      	movs	r1, #0
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f87f 	bl	800783c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007744:	b29a      	uxth	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	220a      	movs	r2, #10
 800774e:	761a      	strb	r2, [r3, #24]
      break;
 8007750:	e055      	b.n	80077fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fbe1 	bl	8007f20 <USBH_LL_GetURBState>
 800775e:	4603      	mov	r3, r0
 8007760:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d105      	bne.n	8007774 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	220d      	movs	r2, #13
 8007770:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007772:	e043      	b.n	80077fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d103      	bne.n	8007782 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2209      	movs	r2, #9
 800777e:	761a      	strb	r2, [r3, #24]
      break;
 8007780:	e03c      	b.n	80077fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b04      	cmp	r3, #4
 8007786:	d139      	bne.n	80077fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	220b      	movs	r2, #11
 800778c:	761a      	strb	r2, [r3, #24]
      break;
 800778e:	e035      	b.n	80077fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7e5b      	ldrb	r3, [r3, #25]
 8007794:	3301      	adds	r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	765a      	strb	r2, [r3, #25]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	7e5b      	ldrb	r3, [r3, #25]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d806      	bhi.n	80077b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80077b0:	e025      	b.n	80077fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b8:	2106      	movs	r1, #6
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	795b      	ldrb	r3, [r3, #5]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f90c 	bl	80079e8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	791b      	ldrb	r3, [r3, #4]
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f906 	bl	80079e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	73fb      	strb	r3, [r7, #15]
      break;
 80077e6:	e00a      	b.n	80077fe <USBH_HandleControl+0x2de>

    default:
      break;
 80077e8:	bf00      	nop
 80077ea:	e008      	b.n	80077fe <USBH_HandleControl+0x2de>
      break;
 80077ec:	bf00      	nop
 80077ee:	e006      	b.n	80077fe <USBH_HandleControl+0x2de>
      break;
 80077f0:	bf00      	nop
 80077f2:	e004      	b.n	80077fe <USBH_HandleControl+0x2de>
      break;
 80077f4:	bf00      	nop
 80077f6:	e002      	b.n	80077fe <USBH_HandleControl+0x2de>
      break;
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <USBH_HandleControl+0x2de>
      break;
 80077fc:	bf00      	nop
  }

  return status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007816:	79f9      	ldrb	r1, [r7, #7]
 8007818:	2300      	movs	r3, #0
 800781a:	9303      	str	r3, [sp, #12]
 800781c:	2308      	movs	r3, #8
 800781e:	9302      	str	r3, [sp, #8]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	2300      	movs	r3, #0
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	2200      	movs	r2, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fb46 	bl	8007ebe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af04      	add	r7, sp, #16
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	4611      	mov	r1, r2
 8007848:	461a      	mov	r2, r3
 800784a:	460b      	mov	r3, r1
 800784c:	80fb      	strh	r3, [r7, #6]
 800784e:	4613      	mov	r3, r2
 8007850:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007860:	7979      	ldrb	r1, [r7, #5]
 8007862:	7e3b      	ldrb	r3, [r7, #24]
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	2301      	movs	r3, #1
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	2200      	movs	r2, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fb21 	bl	8007ebe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b088      	sub	sp, #32
 800788a:	af04      	add	r7, sp, #16
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	4611      	mov	r1, r2
 8007892:	461a      	mov	r2, r3
 8007894:	460b      	mov	r3, r1
 8007896:	80fb      	strh	r3, [r7, #6]
 8007898:	4613      	mov	r3, r2
 800789a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800789c:	7979      	ldrb	r1, [r7, #5]
 800789e:	2300      	movs	r3, #0
 80078a0:	9303      	str	r3, [sp, #12]
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	9302      	str	r3, [sp, #8]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	2301      	movs	r3, #1
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	2201      	movs	r2, #1
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fb03 	bl	8007ebe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80078b8:	2300      	movs	r3, #0

}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af04      	add	r7, sp, #16
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4611      	mov	r1, r2
 80078ce:	461a      	mov	r2, r3
 80078d0:	460b      	mov	r3, r1
 80078d2:	80fb      	strh	r3, [r7, #6]
 80078d4:	4613      	mov	r3, r2
 80078d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80078e6:	7979      	ldrb	r1, [r7, #5]
 80078e8:	7e3b      	ldrb	r3, [r7, #24]
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	2301      	movs	r3, #1
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	2302      	movs	r3, #2
 80078fa:	2200      	movs	r2, #0
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fade 	bl	8007ebe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af04      	add	r7, sp, #16
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	460b      	mov	r3, r1
 800791c:	80fb      	strh	r3, [r7, #6]
 800791e:	4613      	mov	r3, r2
 8007920:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007922:	7979      	ldrb	r1, [r7, #5]
 8007924:	2300      	movs	r3, #0
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	2301      	movs	r3, #1
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	2302      	movs	r3, #2
 8007936:	2201      	movs	r2, #1
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 fac0 	bl	8007ebe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af04      	add	r7, sp, #16
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	70fb      	strb	r3, [r7, #3]
 800795a:	460b      	mov	r3, r1
 800795c:	70bb      	strb	r3, [r7, #2]
 800795e:	4613      	mov	r3, r2
 8007960:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007962:	7878      	ldrb	r0, [r7, #1]
 8007964:	78ba      	ldrb	r2, [r7, #2]
 8007966:	78f9      	ldrb	r1, [r7, #3]
 8007968:	8b3b      	ldrh	r3, [r7, #24]
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	7d3b      	ldrb	r3, [r7, #20]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	7c3b      	ldrb	r3, [r7, #16]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa53 	bl	8007e22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa72 	bl	8007e80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f836 	bl	8007a24 <USBH_GetFreePipe>
 80079b8:	4603      	mov	r3, r0
 80079ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80079bc:	89fb      	ldrh	r3, [r7, #14]
 80079be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00a      	beq.n	80079dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80079c6:	78fa      	ldrb	r2, [r7, #3]
 80079c8:	89fb      	ldrh	r3, [r7, #14]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	33e0      	adds	r3, #224	; 0xe0
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80079dc:	89fb      	ldrh	r3, [r7, #14]
 80079de:	b2db      	uxtb	r3, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b0a      	cmp	r3, #10
 80079f8:	d80d      	bhi.n	8007a16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	33e0      	adds	r3, #224	; 0xe0
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	33e0      	adds	r3, #224	; 0xe0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
 8007a34:	e00f      	b.n	8007a56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	33e0      	adds	r3, #224	; 0xe0
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	e007      	b.n	8007a60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	3301      	adds	r3, #1
 8007a54:	73fb      	strb	r3, [r7, #15]
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b0a      	cmp	r3, #10
 8007a5a:	d9ec      	bls.n	8007a36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007a70:	2201      	movs	r2, #1
 8007a72:	490e      	ldr	r1, [pc, #56]	; (8007aac <MX_USB_HOST_Init+0x40>)
 8007a74:	480e      	ldr	r0, [pc, #56]	; (8007ab0 <MX_USB_HOST_Init+0x44>)
 8007a76:	f7fe fca1 	bl	80063bc <USBH_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007a80:	f7f8 ff72 	bl	8000968 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007a84:	490b      	ldr	r1, [pc, #44]	; (8007ab4 <MX_USB_HOST_Init+0x48>)
 8007a86:	480a      	ldr	r0, [pc, #40]	; (8007ab0 <MX_USB_HOST_Init+0x44>)
 8007a88:	f7fe fd26 	bl	80064d8 <USBH_RegisterClass>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007a92:	f7f8 ff69 	bl	8000968 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007a96:	4806      	ldr	r0, [pc, #24]	; (8007ab0 <MX_USB_HOST_Init+0x44>)
 8007a98:	f7fe fdaa 	bl	80065f0 <USBH_Start>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007aa2:	f7f8 ff61 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007aa6:	bf00      	nop
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08007acd 	.word	0x08007acd
 8007ab0:	200001f8 	.word	0x200001f8
 8007ab4:	2000000c 	.word	0x2000000c

08007ab8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007abc:	4802      	ldr	r0, [pc, #8]	; (8007ac8 <MX_USB_HOST_Process+0x10>)
 8007abe:	f7fe fda7 	bl	8006610 <USBH_Process>
}
 8007ac2:	bf00      	nop
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	200001f8 	.word	0x200001f8

08007acc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d819      	bhi.n	8007b14 <USBH_UserProcess+0x48>
 8007ae0:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <USBH_UserProcess+0x1c>)
 8007ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae6:	bf00      	nop
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b05 	.word	0x08007b05
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b0d 	.word	0x08007b0d
 8007af8:	08007afd 	.word	0x08007afd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <USBH_UserProcess+0x58>)
 8007afe:	2203      	movs	r2, #3
 8007b00:	701a      	strb	r2, [r3, #0]
  break;
 8007b02:	e008      	b.n	8007b16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <USBH_UserProcess+0x58>)
 8007b06:	2202      	movs	r2, #2
 8007b08:	701a      	strb	r2, [r3, #0]
  break;
 8007b0a:	e004      	b.n	8007b16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b0c:	4b05      	ldr	r3, [pc, #20]	; (8007b24 <USBH_UserProcess+0x58>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	701a      	strb	r2, [r3, #0]
  break;
 8007b12:	e000      	b.n	8007b16 <USBH_UserProcess+0x4a>

  default:
  break;
 8007b14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	200000b4 	.word	0x200000b4

08007b28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b48:	d147      	bne.n	8007bda <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	4a24      	ldr	r2, [pc, #144]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007b54:	f043 0301 	orr.w	r3, r3, #1
 8007b58:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5a:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	4619      	mov	r1, r3
 8007b7a:	481b      	ldr	r0, [pc, #108]	; (8007be8 <HAL_HCD_MspInit+0xc0>)
 8007b7c:	f7f9 fab0 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007b80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b86:	2302      	movs	r3, #2
 8007b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b92:	230a      	movs	r3, #10
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b96:	f107 0314 	add.w	r3, r7, #20
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4812      	ldr	r0, [pc, #72]	; (8007be8 <HAL_HCD_MspInit+0xc0>)
 8007b9e:	f7f9 fa9f 	bl	80010e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ba2:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	4a0f      	ldr	r2, [pc, #60]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bac:	6353      	str	r3, [r2, #52]	; 0x34
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	4a0b      	ldr	r2, [pc, #44]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <HAL_HCD_MspInit+0xbc>)
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2043      	movs	r0, #67	; 0x43
 8007bd0:	f7f9 fa4f 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bd4:	2043      	movs	r0, #67	; 0x43
 8007bd6:	f7f9 fa68 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3728      	adds	r7, #40	; 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40020000 	.word	0x40020000

08007bec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f8db 	bl	8006db6 <USBH_LL_IncTimer>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff f913 	bl	8006e42 <USBH_LL_Connect>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff f91c 	bl	8006e70 <USBH_LL_Disconnect>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff f8cd 	bl	8006e0a <USBH_LL_PortEnabled>
} 
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff f8cd 	bl	8006e26 <USBH_LL_PortDisabled>
} 
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d12a      	bne.n	8007cfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ca6:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <USBH_LL_Init+0x74>)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cb2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007cc4:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cca:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <USBH_LL_Init+0x74>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007cdc:	480a      	ldr	r0, [pc, #40]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cde:	f7f9 fbb4 	bl	800144a <HAL_HCD_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ce8:	f7f8 fe3e 	bl	8000968 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007cec:	4806      	ldr	r0, [pc, #24]	; (8007d08 <USBH_LL_Init+0x74>)
 8007cee:	f7f9 ffb7 	bl	8001c60 <HAL_HCD_GetCurrentFrame>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff f84e 	bl	8006d98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200005d0 	.word	0x200005d0

08007d0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7f9 ff24 	bl	8001b70 <HAL_HCD_Start>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 f95e 	bl	8007ff0 <USBH_Get_USB_Status>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7f9 ff2c 	bl	8001bb6 <HAL_HCD_Stop>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 f943 	bl	8007ff0 <USBH_Get_USB_Status>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f9 ff76 	bl	8001c7c <HAL_HCD_GetCurrentSpeed>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d00c      	beq.n	8007db0 <USBH_LL_GetSpeed+0x38>
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d80d      	bhi.n	8007db6 <USBH_LL_GetSpeed+0x3e>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <USBH_LL_GetSpeed+0x2c>
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d003      	beq.n	8007daa <USBH_LL_GetSpeed+0x32>
 8007da2:	e008      	b.n	8007db6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
    break;
 8007da8:	e008      	b.n	8007dbc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
    break;
 8007dae:	e005      	b.n	8007dbc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007db0:	2302      	movs	r3, #2
 8007db2:	73fb      	strb	r3, [r7, #15]
    break;
 8007db4:	e002      	b.n	8007dbc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007db6:	2301      	movs	r3, #1
 8007db8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dba:	bf00      	nop
  }
  return  speed;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7f9 ff07 	bl	8001bf0 <HAL_HCD_ResetPort>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f901 	bl	8007ff0 <USBH_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f9 ff0f 	bl	8001c36 <HAL_HCD_HC_GetXferCount>
 8007e18:	4603      	mov	r3, r0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b089      	sub	sp, #36	; 0x24
 8007e26:	af04      	add	r7, sp, #16
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	70fb      	strb	r3, [r7, #3]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70bb      	strb	r3, [r7, #2]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e4a:	787c      	ldrb	r4, [r7, #1]
 8007e4c:	78ba      	ldrb	r2, [r7, #2]
 8007e4e:	78f9      	ldrb	r1, [r7, #3]
 8007e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4623      	mov	r3, r4
 8007e62:	f7f9 fb54 	bl	800150e <HAL_HCD_HC_Init>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 f8bf 	bl	8007ff0 <USBH_Get_USB_Status>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd90      	pop	{r4, r7, pc}

08007e80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f9 fbcd 	bl	800163e <HAL_HCD_HC_Halt>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f8a0 	bl	8007ff0 <USBH_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ebe:	b590      	push	{r4, r7, lr}
 8007ec0:	b089      	sub	sp, #36	; 0x24
 8007ec2:	af04      	add	r7, sp, #16
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	70fb      	strb	r3, [r7, #3]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70bb      	strb	r3, [r7, #2]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ee6:	787c      	ldrb	r4, [r7, #1]
 8007ee8:	78ba      	ldrb	r2, [r7, #2]
 8007eea:	78f9      	ldrb	r1, [r7, #3]
 8007eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4623      	mov	r3, r4
 8007f02:	f7f9 fbbf 	bl	8001684 <HAL_HCD_HC_SubmitRequest>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f86f 	bl	8007ff0 <USBH_Get_USB_Status>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}

08007f20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f9 fe68 	bl	8001c0c <HAL_HCD_HC_GetURBState>
 8007f3c:	4603      	mov	r3, r0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d103      	bne.n	8007f64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f872 	bl	8008048 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007f64:	20c8      	movs	r0, #200	; 0xc8
 8007f66:	f7f8 ff85 	bl	8000e74 <HAL_Delay>
  return USBH_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	4613      	mov	r3, r2
 8007f82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007f8c:	78fa      	ldrb	r2, [r7, #3]
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	440b      	add	r3, r1
 8007f9a:	333b      	adds	r3, #59	; 0x3b
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	3350      	adds	r3, #80	; 0x50
 8007fb2:	78ba      	ldrb	r2, [r7, #2]
 8007fb4:	701a      	strb	r2, [r3, #0]
 8007fb6:	e009      	b.n	8007fcc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007fb8:	78fa      	ldrb	r2, [r7, #3]
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3351      	adds	r3, #81	; 0x51
 8007fc8:	78ba      	ldrb	r2, [r7, #2]
 8007fca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7f8 ff46 	bl	8000e74 <HAL_Delay>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	2b03      	cmp	r3, #3
 8008002:	d817      	bhi.n	8008034 <USBH_Get_USB_Status+0x44>
 8008004:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBH_Get_USB_Status+0x1c>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	0800801d 	.word	0x0800801d
 8008010:	08008023 	.word	0x08008023
 8008014:	08008029 	.word	0x08008029
 8008018:	0800802f 	.word	0x0800802f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]
    break;
 8008020:	e00b      	b.n	800803a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008022:	2302      	movs	r3, #2
 8008024:	73fb      	strb	r3, [r7, #15]
    break;
 8008026:	e008      	b.n	800803a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
    break;
 800802c:	e005      	b.n	800803a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800802e:	2302      	movs	r3, #2
 8008030:	73fb      	strb	r3, [r7, #15]
    break;
 8008032:	e002      	b.n	800803a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008034:	2302      	movs	r3, #2
 8008036:	73fb      	strb	r3, [r7, #15]
    break;
 8008038:	bf00      	nop
  }
  return usb_status;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d102      	bne.n	8008062 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	e001      	b.n	8008066 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	461a      	mov	r2, r3
 800806a:	2101      	movs	r1, #1
 800806c:	4803      	ldr	r0, [pc, #12]	; (800807c <MX_DriverVbusFS+0x34>)
 800806e:	f7f9 f9d3 	bl	8001418 <HAL_GPIO_WritePin>
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	40020800 	.word	0x40020800

08008080 <__errno>:
 8008080:	4b01      	ldr	r3, [pc, #4]	; (8008088 <__errno+0x8>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	2000002c 	.word	0x2000002c

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4d0d      	ldr	r5, [pc, #52]	; (80080c4 <__libc_init_array+0x38>)
 8008090:	4c0d      	ldr	r4, [pc, #52]	; (80080c8 <__libc_init_array+0x3c>)
 8008092:	1b64      	subs	r4, r4, r5
 8008094:	10a4      	asrs	r4, r4, #2
 8008096:	2600      	movs	r6, #0
 8008098:	42a6      	cmp	r6, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	4d0b      	ldr	r5, [pc, #44]	; (80080cc <__libc_init_array+0x40>)
 800809e:	4c0c      	ldr	r4, [pc, #48]	; (80080d0 <__libc_init_array+0x44>)
 80080a0:	f000 f8f8 	bl	8008294 <_init>
 80080a4:	1b64      	subs	r4, r4, r5
 80080a6:	10a4      	asrs	r4, r4, #2
 80080a8:	2600      	movs	r6, #0
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b4:	4798      	blx	r3
 80080b6:	3601      	adds	r6, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80080be:	4798      	blx	r3
 80080c0:	3601      	adds	r6, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	080082d0 	.word	0x080082d0
 80080c8:	080082d0 	.word	0x080082d0
 80080cc:	080082d0 	.word	0x080082d0
 80080d0:	080082d4 	.word	0x080082d4

080080d4 <malloc>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <malloc+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f000 b863 	b.w	80081a4 <_malloc_r>
 80080de:	bf00      	nop
 80080e0:	2000002c 	.word	0x2000002c

080080e4 <free>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <free+0xc>)
 80080e6:	4601      	mov	r1, r0
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f000 b80b 	b.w	8008104 <_free_r>
 80080ee:	bf00      	nop
 80080f0:	2000002c 	.word	0x2000002c

080080f4 <memset>:
 80080f4:	4402      	add	r2, r0
 80080f6:	4603      	mov	r3, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d100      	bne.n	80080fe <memset+0xa>
 80080fc:	4770      	bx	lr
 80080fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008102:	e7f9      	b.n	80080f8 <memset+0x4>

08008104 <_free_r>:
 8008104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008106:	2900      	cmp	r1, #0
 8008108:	d048      	beq.n	800819c <_free_r+0x98>
 800810a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800810e:	9001      	str	r0, [sp, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f1a1 0404 	sub.w	r4, r1, #4
 8008116:	bfb8      	it	lt
 8008118:	18e4      	addlt	r4, r4, r3
 800811a:	f000 f8ad 	bl	8008278 <__malloc_lock>
 800811e:	4a20      	ldr	r2, [pc, #128]	; (80081a0 <_free_r+0x9c>)
 8008120:	9801      	ldr	r0, [sp, #4]
 8008122:	6813      	ldr	r3, [r2, #0]
 8008124:	4615      	mov	r5, r2
 8008126:	b933      	cbnz	r3, 8008136 <_free_r+0x32>
 8008128:	6063      	str	r3, [r4, #4]
 800812a:	6014      	str	r4, [r2, #0]
 800812c:	b003      	add	sp, #12
 800812e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008132:	f000 b8a7 	b.w	8008284 <__malloc_unlock>
 8008136:	42a3      	cmp	r3, r4
 8008138:	d90b      	bls.n	8008152 <_free_r+0x4e>
 800813a:	6821      	ldr	r1, [r4, #0]
 800813c:	1862      	adds	r2, r4, r1
 800813e:	4293      	cmp	r3, r2
 8008140:	bf04      	itt	eq
 8008142:	681a      	ldreq	r2, [r3, #0]
 8008144:	685b      	ldreq	r3, [r3, #4]
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	bf04      	itt	eq
 800814a:	1852      	addeq	r2, r2, r1
 800814c:	6022      	streq	r2, [r4, #0]
 800814e:	602c      	str	r4, [r5, #0]
 8008150:	e7ec      	b.n	800812c <_free_r+0x28>
 8008152:	461a      	mov	r2, r3
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b10b      	cbz	r3, 800815c <_free_r+0x58>
 8008158:	42a3      	cmp	r3, r4
 800815a:	d9fa      	bls.n	8008152 <_free_r+0x4e>
 800815c:	6811      	ldr	r1, [r2, #0]
 800815e:	1855      	adds	r5, r2, r1
 8008160:	42a5      	cmp	r5, r4
 8008162:	d10b      	bne.n	800817c <_free_r+0x78>
 8008164:	6824      	ldr	r4, [r4, #0]
 8008166:	4421      	add	r1, r4
 8008168:	1854      	adds	r4, r2, r1
 800816a:	42a3      	cmp	r3, r4
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	d1dd      	bne.n	800812c <_free_r+0x28>
 8008170:	681c      	ldr	r4, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	4421      	add	r1, r4
 8008178:	6011      	str	r1, [r2, #0]
 800817a:	e7d7      	b.n	800812c <_free_r+0x28>
 800817c:	d902      	bls.n	8008184 <_free_r+0x80>
 800817e:	230c      	movs	r3, #12
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	e7d3      	b.n	800812c <_free_r+0x28>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf04      	itt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	bf04      	itt	eq
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	6054      	str	r4, [r2, #4]
 800819a:	e7c7      	b.n	800812c <_free_r+0x28>
 800819c:	b003      	add	sp, #12
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	200000b8 	.word	0x200000b8

080081a4 <_malloc_r>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	1ccd      	adds	r5, r1, #3
 80081a8:	f025 0503 	bic.w	r5, r5, #3
 80081ac:	3508      	adds	r5, #8
 80081ae:	2d0c      	cmp	r5, #12
 80081b0:	bf38      	it	cc
 80081b2:	250c      	movcc	r5, #12
 80081b4:	2d00      	cmp	r5, #0
 80081b6:	4606      	mov	r6, r0
 80081b8:	db01      	blt.n	80081be <_malloc_r+0x1a>
 80081ba:	42a9      	cmp	r1, r5
 80081bc:	d903      	bls.n	80081c6 <_malloc_r+0x22>
 80081be:	230c      	movs	r3, #12
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	2000      	movs	r0, #0
 80081c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c6:	f000 f857 	bl	8008278 <__malloc_lock>
 80081ca:	4921      	ldr	r1, [pc, #132]	; (8008250 <_malloc_r+0xac>)
 80081cc:	680a      	ldr	r2, [r1, #0]
 80081ce:	4614      	mov	r4, r2
 80081d0:	b99c      	cbnz	r4, 80081fa <_malloc_r+0x56>
 80081d2:	4f20      	ldr	r7, [pc, #128]	; (8008254 <_malloc_r+0xb0>)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	b923      	cbnz	r3, 80081e2 <_malloc_r+0x3e>
 80081d8:	4621      	mov	r1, r4
 80081da:	4630      	mov	r0, r6
 80081dc:	f000 f83c 	bl	8008258 <_sbrk_r>
 80081e0:	6038      	str	r0, [r7, #0]
 80081e2:	4629      	mov	r1, r5
 80081e4:	4630      	mov	r0, r6
 80081e6:	f000 f837 	bl	8008258 <_sbrk_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d123      	bne.n	8008236 <_malloc_r+0x92>
 80081ee:	230c      	movs	r3, #12
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	4630      	mov	r0, r6
 80081f4:	f000 f846 	bl	8008284 <__malloc_unlock>
 80081f8:	e7e3      	b.n	80081c2 <_malloc_r+0x1e>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	1b5b      	subs	r3, r3, r5
 80081fe:	d417      	bmi.n	8008230 <_malloc_r+0x8c>
 8008200:	2b0b      	cmp	r3, #11
 8008202:	d903      	bls.n	800820c <_malloc_r+0x68>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	441c      	add	r4, r3
 8008208:	6025      	str	r5, [r4, #0]
 800820a:	e004      	b.n	8008216 <_malloc_r+0x72>
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	42a2      	cmp	r2, r4
 8008210:	bf0c      	ite	eq
 8008212:	600b      	streq	r3, [r1, #0]
 8008214:	6053      	strne	r3, [r2, #4]
 8008216:	4630      	mov	r0, r6
 8008218:	f000 f834 	bl	8008284 <__malloc_unlock>
 800821c:	f104 000b 	add.w	r0, r4, #11
 8008220:	1d23      	adds	r3, r4, #4
 8008222:	f020 0007 	bic.w	r0, r0, #7
 8008226:	1ac2      	subs	r2, r0, r3
 8008228:	d0cc      	beq.n	80081c4 <_malloc_r+0x20>
 800822a:	1a1b      	subs	r3, r3, r0
 800822c:	50a3      	str	r3, [r4, r2]
 800822e:	e7c9      	b.n	80081c4 <_malloc_r+0x20>
 8008230:	4622      	mov	r2, r4
 8008232:	6864      	ldr	r4, [r4, #4]
 8008234:	e7cc      	b.n	80081d0 <_malloc_r+0x2c>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d0e3      	beq.n	8008208 <_malloc_r+0x64>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4630      	mov	r0, r6
 8008244:	f000 f808 	bl	8008258 <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d1dd      	bne.n	8008208 <_malloc_r+0x64>
 800824c:	e7cf      	b.n	80081ee <_malloc_r+0x4a>
 800824e:	bf00      	nop
 8008250:	200000b8 	.word	0x200000b8
 8008254:	200000bc 	.word	0x200000bc

08008258 <_sbrk_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_sbrk_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7f8 fd28 	bl	8000cb8 <_sbrk>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_sbrk_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_sbrk_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000894 	.word	0x20000894

08008278 <__malloc_lock>:
 8008278:	4801      	ldr	r0, [pc, #4]	; (8008280 <__malloc_lock+0x8>)
 800827a:	f000 b809 	b.w	8008290 <__retarget_lock_acquire_recursive>
 800827e:	bf00      	nop
 8008280:	2000089c 	.word	0x2000089c

08008284 <__malloc_unlock>:
 8008284:	4801      	ldr	r0, [pc, #4]	; (800828c <__malloc_unlock+0x8>)
 8008286:	f000 b804 	b.w	8008292 <__retarget_lock_release_recursive>
 800828a:	bf00      	nop
 800828c:	2000089c 	.word	0x2000089c

08008290 <__retarget_lock_acquire_recursive>:
 8008290:	4770      	bx	lr

08008292 <__retarget_lock_release_recursive>:
 8008292:	4770      	bx	lr

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
