
UV_RobotBSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08004120  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004120  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf3a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  0002bfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021551  00000000  00000000  0002eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc03  00000000  00000000  00050541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d14  00000000  00000000  0005c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  00121eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f48 	.word	0x08003f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f48 	.word	0x08003f48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:

void SystemClock_Config(void);
void I2C2_Init(void);
void USART2_UART_Init(void);

int main(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af04      	add	r7, sp, #16

  HAL_Init();
 800056e:	f000 fb49 	bl	8000c04 <HAL_Init>

  SystemClock_Config();
 8000572:	f000 f87f 	bl	8000674 <SystemClock_Config>

  I2C2_Init();
 8000576:	f000 f885 	bl	8000684 <I2C2_Init>

  USART2_UART_Init();
 800057a:	f000 f8b1 	bl	80006e0 <USART2_UART_Init>

  while (1)
  {

	  MPU9250_t mpu9250;
	  mpu9250.accel_range = ACCEL_FS_SEL_2G;
 800057e:	2300      	movs	r3, #0
 8000580:	717b      	strb	r3, [r7, #5]
	  mpu9250.gyro_range = GYRO_FS_SEL_250DPS;
 8000582:	2300      	movs	r3, #0
 8000584:	713b      	strb	r3, [r7, #4]
	  mpu9250.dlpf_bandwidth = GYRO_DLPF_250;
 8000586:	2300      	movs	r3, #0
 8000588:	71bb      	strb	r3, [r7, #6]

	  uint8_t check = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	70fb      	strb	r3, [r7, #3]
	  HAL_I2C_Mem_Read(&hi2c2, 0xD0, 0x75, 1, &check, 1, HAL_MAX_DELAY);
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	1cfb      	adds	r3, r7, #3
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	2275      	movs	r2, #117	; 0x75
 80005a0:	21d0      	movs	r1, #208	; 0xd0
 80005a2:	482d      	ldr	r0, [pc, #180]	; (8000658 <main+0xf0>)
 80005a4:	f001 f8de 	bl	8001764 <HAL_I2C_Mem_Read>
	  printf("Lets see if its working...\n");
 80005a8:	482c      	ldr	r0, [pc, #176]	; (800065c <main+0xf4>)
 80005aa:	f002 ffeb 	bl	8003584 <puts>
	  fflush(stdout);
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <main+0xf8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fd7d 	bl	80030b4 <fflush>
	  HAL_Delay(1000);
 80005ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005be:	f000 fb93 	bl	8000ce8 <HAL_Delay>

	  if(check == 0x71){
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	2b71      	cmp	r3, #113	; 0x71
 80005c6:	d1da      	bne.n	800057e <main+0x16>
		  printf("Wonderful connection established\n");
 80005c8:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0xfc>)
 80005ca:	f002 ffdb 	bl	8003584 <puts>
		  fflush(stdout);
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <main+0xf8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fd6d 	bl	80030b4 <fflush>
		  HAL_Delay(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fb83 	bl	8000ce8 <HAL_Delay>

		  MPU9250_Initialisation(&mpu9250, &hi2c2);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	491c      	ldr	r1, [pc, #112]	; (8000658 <main+0xf0>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fa73 	bl	8000ad2 <MPU9250_Initialisation>
		  printf("MPU Initialisation Complete\n");
 80005ec:	481e      	ldr	r0, [pc, #120]	; (8000668 <main+0x100>)
 80005ee:	f002 ffc9 	bl	8003584 <puts>
		  fflush(stdout);
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <main+0xf8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fd5b 	bl	80030b4 <fflush>
		  HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f000 fb71 	bl	8000ce8 <HAL_Delay>

		  //Let get some gyro values
		  printf("Let get some gyro values:-\n");
 8000606:	4819      	ldr	r0, [pc, #100]	; (800066c <main+0x104>)
 8000608:	f002 ffbc 	bl	8003584 <puts>
		  fflush(stdout);
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <main+0xf8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fd4e 	bl	80030b4 <fflush>
		  HAL_Delay(1000);
 8000618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061c:	f000 fb64 	bl	8000ce8 <HAL_Delay>

		  while(1){
			  Get_Raw_Gyro(&mpu9250, &hi2c2);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <main+0xf0>)
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fab9 	bl	8000b9c <Get_Raw_Gyro>
			  printf("Gyro_X = %u  Gyro_Y = %u  Gyro_Z = %u\n", mpu9250.Acc_X_RAW, mpu9250.Acc_Y_RAW, mpu9250.Acc_Z_RAW);
 800062a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800062e:	4619      	mov	r1, r3
 8000630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000634:	461a      	mov	r2, r3
 8000636:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <main+0x108>)
 800063c:	f002 ff1c 	bl	8003478 <iprintf>
			  fflush(stdout);
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <main+0xf8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fd34 	bl	80030b4 <fflush>
			  HAL_Delay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f000 fb4a 	bl	8000ce8 <HAL_Delay>
			  Get_Raw_Gyro(&mpu9250, &hi2c2);
 8000654:	e7e4      	b.n	8000620 <main+0xb8>
 8000656:	bf00      	nop
 8000658:	20000098 	.word	0x20000098
 800065c:	08003f60 	.word	0x08003f60
 8000660:	2000000c 	.word	0x2000000c
 8000664:	08003f7c 	.word	0x08003f7c
 8000668:	08003fa0 	.word	0x08003fa0
 800066c:	08003fbc 	.word	0x08003fbc
 8000670:	08003fd8 	.word	0x08003fd8

08000674 <SystemClock_Config>:
  }
  return 0;
}

void SystemClock_Config(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <I2C2_Init>:

void I2C2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <I2C2_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <I2C2_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <I2C2_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <I2C2_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <I2C2_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <I2C2_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <I2C2_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <I2C2_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <I2C2_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <I2C2_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <I2C2_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <I2C2_Init+0x50>)
 80006c2:	f000 fe11 	bl	80012e8 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <I2C2_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f832 	bl	8000734 <Error_Handler>
  }


}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000098 	.word	0x20000098
 80006d8:	40005800 	.word	0x40005800
 80006dc:	00061a80 	.word	0x00061a80

080006e0 <USART2_UART_Init>:


void USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <USART2_UART_Init+0x4c>)
 8000718:	f001 fdda 	bl	80022d0 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f807 	bl	8000734 <Error_Handler>
  }


}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000ec 	.word	0x200000ec
 8000730:	40004400 	.word	0x40004400

08000734 <Error_Handler>:

void Error_Handler(void){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <HAL_MspInit>:

#include "stm32f4xx.h"

void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   */

	// Here will do the Low level processor specific Inits

	//1. Set up the priority grouping of the Arm Cortex MX Processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 fbc1 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required the system exceptions
	SCB->SHCSR |= 0x7 << 16; // USAGE FAULT, MEM FAULT, BUD FAULT
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_MspInit+0x40>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_MspInit+0x40>)
 8000754:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exception
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0,0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	f06f 000b 	mvn.w	r0, #11
 8000762:	f000 fbc0 	bl	8000ee6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0,0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	f06f 000a 	mvn.w	r0, #10
 800076e:	f000 fbba 	bl	8000ee6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0,0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	f06f 0009 	mvn.w	r0, #9
 800077a:	f000 fbb4 	bl	8000ee6 <HAL_NVIC_SetPriority>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	//Here we are going to do low level initializations of UART2 Peripheral
	GPIO_InitTypeDef gpio_uart;

	//1. Enable the clock for the UART2 peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_UART_MspInit+0x88>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <HAL_UART_MspInit+0x88>)
 800079a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x88>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80007d4:	2307      	movs	r3, #7
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24

	gpio_uart.Pin = GPIO_PIN_5; //UART TX
 80007d8:	2320      	movs	r3, #32
 80007da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &gpio_uart);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <HAL_UART_MspInit+0x8c>)
 80007e4:	f000 fbe4 	bl	8000fb0 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_6; //UART RX
 80007e8:	2340      	movs	r3, #64	; 0x40
 80007ea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &gpio_uart);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_UART_MspInit+0x8c>)
 80007f4:	f000 fbdc 	bl	8000fb0 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f8:	2026      	movs	r0, #38	; 0x26
 80007fa:	f000 fb90 	bl	8000f1e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	2026      	movs	r0, #38	; 0x26
 8000804:	f000 fb6f 	bl	8000ee6 <HAL_NVIC_SetPriority>

}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020c00 	.word	0x40020c00

08000818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	//Here we are going to do low level initializations of UART2 Peripheral
	GPIO_InitTypeDef gpio_i2c;

	//1. Enable the clock for the UART2 peripheral
	__HAL_RCC_I2C2_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 800082a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 8000846:	f043 0302 	orr.w	r3, r3, #2
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_I2C_MspInit+0x8c>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0302 	and.w	r3, r3, #2
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_i2c.Mode = GPIO_MODE_AF_OD;
 8000858:	2312      	movs	r3, #18
 800085a:	61bb      	str	r3, [r7, #24]
	gpio_i2c.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
	gpio_i2c.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
	gpio_i2c.Alternate = GPIO_AF4_I2C2;
 8000864:	2304      	movs	r3, #4
 8000866:	627b      	str	r3, [r7, #36]	; 0x24

	gpio_i2c.Pin = GPIO_PIN_10; //I2C SCL
 8000868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio_i2c);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <HAL_I2C_MspInit+0x90>)
 8000876:	f000 fb9b 	bl	8000fb0 <HAL_GPIO_Init>

	gpio_i2c.Pin = GPIO_PIN_11; //I2C SDA
 800087a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800087e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &gpio_i2c);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <HAL_I2C_MspInit+0x90>)
 8000888:	f000 fb92 	bl	8000fb0 <HAL_GPIO_Init>

	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800088c:	2021      	movs	r0, #33	; 0x21
 800088e:	f000 fb46 	bl	8000f1e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(I2C2_EV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	2021      	movs	r0, #33	; 0x21
 8000898:	f000 fb25 	bl	8000ee6 <HAL_NVIC_SetPriority>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400

080008ac <SysTick_Handler>:
extern	huart2;
extern  hi2c2;

void SysTick_Handler(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008b0:	f000 f9fa 	bl	8000ca8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80008b4:	f000 fb4d 	bl	8000f52 <HAL_SYSTICK_IRQHandler>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART2_IRQHandler+0x10>)
 80008c2:	f001 fd53 	bl	800236c <HAL_UART_IRQHandler>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000ec 	.word	0x200000ec

080008d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <ITM_SendChar+0x48>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <ITM_SendChar+0x48>)
 80008e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <ITM_SendChar+0x4c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <ITM_SendChar+0x4c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008f2:	bf00      	nop
 80008f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f8      	beq.n	80008f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000902:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000edfc 	.word	0xe000edfc
 800091c:	e0000e00 	.word	0xe0000e00

08000920 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00a      	b.n	8000948 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000932:	f3af 8000 	nop.w
 8000936:	4601      	mov	r1, r0
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	b2ca      	uxtb	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf0      	blt.n	8000932 <_read+0x12>
	}

return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffab 	bl	80008d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf1      	blt.n	800096c <_write+0x12>
	}
	return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_close>:

int _close(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ba:	605a      	str	r2, [r3, #4]
	return 0;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_isatty>:

int _isatty(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return 1;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x50>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x16>
		heap_end = &end;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <_sbrk+0x50>)
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <_sbrk+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <_sbrk+0x50>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <_sbrk+0x50>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	466a      	mov	r2, sp
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d907      	bls.n	8000a36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a26:	f002 fa7d 	bl	8002f24 <__errno>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	220c      	movs	r2, #12
 8000a2e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	e006      	b.n	8000a44 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <_sbrk+0x50>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <_sbrk+0x50>)
 8000a40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	20000140 	.word	0x20000140

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x28>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x28>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0x28>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ffd3 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fc09 	bl	80032c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fd59 	bl	8000568 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000abc:	080040b0 	.word	0x080040b0
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ac8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000acc:	20000140 	.word	0x20000140

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>

08000ad2 <MPU9250_Initialisation>:
/**
  * @brief  Register Configuration of MPU9250
  * @param  none
  * @retval none
  */
void MPU9250_Initialisation(MPU9250_t *mpu9250, I2C_HandleTypeDef *hi2c){
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b088      	sub	sp, #32
 8000ad6:	af04      	add	r7, sp, #16
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
	uint8_t *pData = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Mem_Write(hi2c, MPU9250_Addr, PWR_MGMNT_1, 1, pData, 1, HAL_MAX_DELAY);
 8000ae0:	23d0      	movs	r3, #208	; 0xd0
 8000ae2:	b299      	uxth	r1, r3
 8000ae4:	236b      	movs	r3, #107	; 0x6b
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	6838      	ldr	r0, [r7, #0]
 8000afa:	f000 fd39 	bl	8001570 <HAL_I2C_Mem_Write>

	*pData = mpu9250->accel_range;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	785a      	ldrb	r2, [r3, #1]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU9250_Addr, ACCEL_CONFIG, 1, pData, 1, HAL_MAX_DELAY);
 8000b06:	23d0      	movs	r3, #208	; 0xd0
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	231c      	movs	r3, #28
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	2301      	movs	r3, #1
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	6838      	ldr	r0, [r7, #0]
 8000b20:	f000 fd26 	bl	8001570 <HAL_I2C_Mem_Write>

	*pData = mpu9250->gyro_range;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU9250_Addr, GYRO_CONFIG, 1, pData, 1, HAL_MAX_DELAY);
 8000b2c:	23d0      	movs	r3, #208	; 0xd0
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	231b      	movs	r3, #27
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	6838      	ldr	r0, [r7, #0]
 8000b46:	f000 fd13 	bl	8001570 <HAL_I2C_Mem_Write>

	*pData = 0x07;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU9250_Addr, SMPDIV, 1, pData, 1, HAL_MAX_DELAY);
 8000b50:	23d0      	movs	r3, #208	; 0xd0
 8000b52:	b299      	uxth	r1, r3
 8000b54:	2319      	movs	r3, #25
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	9302      	str	r3, [sp, #8]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2301      	movs	r3, #1
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f000 fd01 	bl	8001570 <HAL_I2C_Mem_Write>
	*pData = mpu9250->dlpf_bandwidth;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	789a      	ldrb	r2, [r3, #2]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(hi2c, MPU9250_Addr, CONFIG, 1, pData, 1, HAL_MAX_DELAY);
 8000b76:	23d0      	movs	r3, #208	; 0xd0
 8000b78:	b299      	uxth	r1, r3
 8000b7a:	231a      	movs	r3, #26
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	9302      	str	r3, [sp, #8]
 8000b84:	2301      	movs	r3, #1
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	6838      	ldr	r0, [r7, #0]
 8000b90:	f000 fcee 	bl	8001570 <HAL_I2C_Mem_Write>

}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <Get_Raw_Gyro>:
void Get_Raw_Gyro(MPU9250_t *mpu9250, I2C_HandleTypeDef *hi2c){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	uint8_t buffer[6];
	HAL_I2C_Mem_Read(hi2c, MPU9250_Addr, ACCEL_OUT, 1, buffer, 6, HAL_MAX_DELAY);
 8000ba6:	23d0      	movs	r3, #208	; 0xd0
 8000ba8:	b299      	uxth	r1, r3
 8000baa:	233b      	movs	r3, #59	; 0x3b
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f000 fdcf 	bl	8001764 <HAL_I2C_Mem_Read>

    mpu9250->Acc_X_RAW = (buffer[1] << 1) | buffer[0];
 8000bc6:	7a7b      	ldrb	r3, [r7, #9]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	b21a      	sxth	r2, r3
 8000bcc:	7a3b      	ldrb	r3, [r7, #8]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	809a      	strh	r2, [r3, #4]
    mpu9250->Acc_Y_RAW = (buffer[3] << 1) | buffer[2];
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	7abb      	ldrb	r3, [r7, #10]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	80da      	strh	r2, [r3, #6]
    mpu9250->Acc_Z_RAW = (buffer[5] << 1) | buffer[4];
 8000bea:	7b7b      	ldrb	r3, [r7, #13]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	7b3b      	ldrb	r3, [r7, #12]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	811a      	strh	r2, [r3, #8]
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fd84 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000012c 	.word	0x2000012c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000012c 	.word	0x2000012c

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f56:	f000 f802 	bl	8000f5e <HAL_SYSTICK_Callback>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d004      	beq.n	8000f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00c      	b.n	8000fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0201 	bic.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e16b      	b.n	80012a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 815a 	bne.w	800129e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d00b      	beq.n	800100a <HAL_GPIO_Init+0x5a>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	2b11      	cmp	r3, #17
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b12      	cmp	r3, #18
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0xfc>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b12      	cmp	r3, #18
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80b4 	beq.w	800129e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_GPIO_Init+0x30c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_GPIO_Init+0x30c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001152:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <HAL_GPIO_Init+0x310>)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x314>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d02b      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x318>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x31c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x320>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x21a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x324>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x216>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x328>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x212>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x20e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x20a>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00e      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ba:	2308      	movs	r3, #8
 80011bc:	e00c      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011be:	2306      	movs	r3, #6
 80011c0:	e00a      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c2:	2305      	movs	r3, #5
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011c6:	2304      	movs	r3, #4
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x228>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x310>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_GPIO_Init+0x334>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001220:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f ae90 	bls.w	8000fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021800 	.word	0x40021800
 80012e0:	40021c00 	.word	0x40021c00
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e12b      	b.n	8001552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d106      	bne.n	8001314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fa82 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2224      	movs	r2, #36	; 0x24
 8001318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800134a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800134c:	f000 ff98 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a81      	ldr	r2, [pc, #516]	; (800155c <HAL_I2C_Init+0x274>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d807      	bhi.n	800136c <HAL_I2C_Init+0x84>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4a80      	ldr	r2, [pc, #512]	; (8001560 <HAL_I2C_Init+0x278>)
 8001360:	4293      	cmp	r3, r2
 8001362:	bf94      	ite	ls
 8001364:	2301      	movls	r3, #1
 8001366:	2300      	movhi	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	e006      	b.n	800137a <HAL_I2C_Init+0x92>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a7d      	ldr	r2, [pc, #500]	; (8001564 <HAL_I2C_Init+0x27c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0e7      	b.n	8001552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a78      	ldr	r2, [pc, #480]	; (8001568 <HAL_I2C_Init+0x280>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a6a      	ldr	r2, [pc, #424]	; (800155c <HAL_I2C_Init+0x274>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d802      	bhi.n	80013bc <HAL_I2C_Init+0xd4>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e009      	b.n	80013d0 <HAL_I2C_Init+0xe8>
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a69      	ldr	r2, [pc, #420]	; (800156c <HAL_I2C_Init+0x284>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	099b      	lsrs	r3, r3, #6
 80013ce:	3301      	adds	r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	495c      	ldr	r1, [pc, #368]	; (800155c <HAL_I2C_Init+0x274>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d819      	bhi.n	8001424 <HAL_I2C_Init+0x13c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e59      	subs	r1, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80013fe:	1c59      	adds	r1, r3, #1
 8001400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001404:	400b      	ands	r3, r1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <HAL_I2C_Init+0x138>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e59      	subs	r1, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fbb1 f3f3 	udiv	r3, r1, r3
 8001418:	3301      	adds	r3, #1
 800141a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141e:	e051      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001420:	2304      	movs	r3, #4
 8001422:	e04f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_I2C_Init+0x168>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e012      	b.n	8001476 <HAL_I2C_Init+0x18e>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf0c      	ite	eq
 8001470:	2301      	moveq	r3, #1
 8001472:	2300      	movne	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x196>
 800147a:	2301      	movs	r3, #1
 800147c:	e022      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10e      	bne.n	80014a4 <HAL_I2C_Init+0x1bc>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e58      	subs	r0, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	fbb0 f3f3 	udiv	r3, r0, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a2:	e00f      	b.n	80014c4 <HAL_I2C_Init+0x1dc>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	0099      	lsls	r1, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6809      	ldr	r1, [r1, #0]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6911      	ldr	r1, [r2, #16]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68d2      	ldr	r2, [r2, #12]
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2220      	movs	r2, #32
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	000186a0 	.word	0x000186a0
 8001560:	001e847f 	.word	0x001e847f
 8001564:	003d08ff 	.word	0x003d08ff
 8001568:	431bde83 	.word	0x431bde83
 800156c:	10624dd3 	.word	0x10624dd3

08001570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	817b      	strh	r3, [r7, #10]
 8001582:	460b      	mov	r3, r1
 8001584:	813b      	strh	r3, [r7, #8]
 8001586:	4613      	mov	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800158a:	f7ff fba1 	bl	8000cd0 <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b20      	cmp	r3, #32
 800159a:	f040 80d9 	bne.w	8001750 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2319      	movs	r3, #25
 80015a4:	2201      	movs	r2, #1
 80015a6:	496d      	ldr	r1, [pc, #436]	; (800175c <HAL_I2C_Mem_Write+0x1ec>)
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fc7f 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015b4:	2302      	movs	r3, #2
 80015b6:	e0cc      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Mem_Write+0x56>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0c5      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d007      	beq.n	80015ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2221      	movs	r2, #33	; 0x21
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800161c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_I2C_Mem_Write+0x1f0>)
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800162e:	88f8      	ldrh	r0, [r7, #6]
 8001630:	893a      	ldrh	r2, [r7, #8]
 8001632:	8979      	ldrh	r1, [r7, #10]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4603      	mov	r3, r0
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fab6 	bl	8001bb0 <I2C_RequestMemoryWrite>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d052      	beq.n	80016f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e081      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fd00 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00d      	beq.n	800167a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2b04      	cmp	r3, #4
 8001664:	d107      	bne.n	8001676 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06b      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11b      	bne.n	80016f0 <HAL_I2C_Mem_Write+0x180>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d017      	beq.n	80016f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1aa      	bne.n	800164e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fcec 	bl	80020da <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e016      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001750:	2302      	movs	r3, #2
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	00100002 	.word	0x00100002
 8001760:	ffff0000 	.word	0xffff0000

08001764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4603      	mov	r3, r0
 8001774:	817b      	strh	r3, [r7, #10]
 8001776:	460b      	mov	r3, r1
 8001778:	813b      	strh	r3, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800177e:	f7ff faa7 	bl	8000cd0 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b20      	cmp	r3, #32
 800178e:	f040 8208 	bne.w	8001ba2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2319      	movs	r3, #25
 8001798:	2201      	movs	r2, #1
 800179a:	497b      	ldr	r1, [pc, #492]	; (8001988 <HAL_I2C_Mem_Read+0x224>)
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 fb85 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	e1fb      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_I2C_Mem_Read+0x56>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e1f4      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d007      	beq.n	80017e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2222      	movs	r2, #34	; 0x22
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <HAL_I2C_Mem_Read+0x228>)
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001822:	88f8      	ldrh	r0, [r7, #6]
 8001824:	893a      	ldrh	r2, [r7, #8]
 8001826:	8979      	ldrh	r1, [r7, #10]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4603      	mov	r3, r0
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa52 	bl	8001cdc <I2C_RequestMemoryRead>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1b0      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d113      	bne.n	8001872 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e184      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	2b01      	cmp	r3, #1
 8001878:	d11b      	bne.n	80018b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e164      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d11b      	bne.n	80018f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	e144      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001908:	e138      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190e:	2b03      	cmp	r3, #3
 8001910:	f200 80f1 	bhi.w	8001af6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b01      	cmp	r3, #1
 800191a:	d123      	bne.n	8001964 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fc1b 	bl	800215c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e139      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001962:	e10b      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	2b02      	cmp	r3, #2
 800196a:	d14e      	bne.n	8001a0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	2200      	movs	r2, #0
 8001974:	4906      	ldr	r1, [pc, #24]	; (8001990 <HAL_I2C_Mem_Read+0x22c>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa98 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e10e      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
 8001986:	bf00      	nop
 8001988:	00100002 	.word	0x00100002
 800198c:	ffff0000 	.word	0xffff0000
 8001990:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a08:	e0b8      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a10:	2200      	movs	r2, #0
 8001a12:	4966      	ldr	r1, [pc, #408]	; (8001bac <HAL_I2C_Mem_Read+0x448>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fa49 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0bf      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	494f      	ldr	r1, [pc, #316]	; (8001bac <HAL_I2C_Mem_Read+0x448>)
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fa1b 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e091      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001af4:	e042      	b.n	8001b7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fb2e 	bl	800215c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e04c      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d118      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f aec2 	bne.w	800190a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	00010004 	.word	0x00010004

08001bb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	817b      	strh	r3, [r7, #10]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	813b      	strh	r3, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f960 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c00:	d103      	bne.n	8001c0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e05f      	b.n	8001cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c0e:	897b      	ldrh	r3, [r7, #10]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	492d      	ldr	r1, [pc, #180]	; (8001cd8 <I2C_RequestMemoryWrite+0x128>)
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 f998 	bl	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e04c      	b.n	8001cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 fa02 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00d      	beq.n	8001c76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d107      	bne.n	8001c72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e02b      	b.n	8001cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7c:	893b      	ldrh	r3, [r7, #8]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	e021      	b.n	8001ccc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c88:	893b      	ldrh	r3, [r7, #8]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	6a39      	ldr	r1, [r7, #32]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f9dc 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d107      	bne.n	8001cbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e005      	b.n	8001cce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc2:	893b      	ldrh	r3, [r7, #8]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	00010002 	.word	0x00010002

08001cdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f8c2 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d103      	bne.n	8001d46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0aa      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	6a3a      	ldr	r2, [r7, #32]
 8001d5e:	4952      	ldr	r1, [pc, #328]	; (8001ea8 <I2C_RequestMemoryRead+0x1cc>)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f8fa 	bl	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e097      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	6a39      	ldr	r1, [r7, #32]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f964 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d107      	bne.n	8001dae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e076      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001db8:	893b      	ldrh	r3, [r7, #8]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	e021      	b.n	8001e08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f93e 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d107      	bne.n	8001dfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e050      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f923 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e035      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 f82b 	bl	8001eac <I2C_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00d      	beq.n	8001e78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d103      	bne.n	8001e74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e013      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e78:	897b      	ldrh	r3, [r7, #10]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	6a3a      	ldr	r2, [r7, #32]
 8001e8c:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <I2C_RequestMemoryRead+0x1cc>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f863 	bl	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	00010002 	.word	0x00010002

08001eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebc:	e025      	b.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d021      	beq.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec6:	f7fe ff03 	bl	8000cd0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d302      	bcc.n	8001edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e023      	b.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10d      	bne.n	8001f30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	e00c      	b.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf0c      	ite	eq
 8001f42:	2301      	moveq	r3, #1
 8001f44:	2300      	movne	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d0b6      	beq.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f68:	e051      	b.n	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d123      	bne.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f043 0204 	orr.w	r2, r3, #4
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e046      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d021      	beq.n	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7fe fe81 	bl	8000cd0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d116      	bne.n	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e020      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4013      	ands	r3, r2
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e00b      	b.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d18d      	bne.n	8001f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002064:	e02d      	b.n	80020c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f8ce 	bl	8002208 <I2C_IsAcknowledgeFailed>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e02d      	b.n	80020d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d021      	beq.n	80020c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7fe fe27 	bl	8000cd0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d116      	bne.n	80020c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f043 0220 	orr.w	r2, r3, #32
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d1ca      	bne.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e6:	e02d      	b.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f88d 	bl	8002208 <I2C_IsAcknowledgeFailed>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e02d      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d021      	beq.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002100:	f7fe fde6 	bl	8000cd0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	429a      	cmp	r2, r3
 800210e:	d302      	bcc.n	8002116 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e007      	b.n	8002154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d1ca      	bne.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002168:	e042      	b.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b10      	cmp	r3, #16
 8002176:	d119      	bne.n	80021ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0210 	mvn.w	r2, #16
 8002180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e029      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ac:	f7fe fd90 	bl	8000cd0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d302      	bcc.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d1b5      	bne.n	800216a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221e:	d11b      	bne.n	8002258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000000 	.word	0x20000000

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08004000 	.word	0x08004000

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022ac:	f7ff ffdc 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0b5b      	lsrs	r3, r3, #13
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08004000 	.word	0x08004000

080022d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e03f      	b.n	8002362 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fa46 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fa69 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f996 	bl	80026e8 <UART_Receive_IT>
      return;
 80023bc:	e0d0      	b.n	8002560 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80b0 	beq.w	8002526 <HAL_UART_IRQHandler+0x1ba>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <HAL_UART_IRQHandler+0x70>
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80a5 	beq.w	8002526 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	f043 0202 	orr.w	r2, r3, #2
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00f      	beq.n	8002466 <HAL_UART_IRQHandler+0xfa>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <HAL_UART_IRQHandler+0xee>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	2b00      	cmp	r3, #0
 800246c:	d077      	beq.n	800255e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_UART_IRQHandler+0x11c>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f930 	bl	80026e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_UART_IRQHandler+0x144>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d031      	beq.n	8002514 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f879 	bl	80025a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d123      	bne.n	800250c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	4a21      	ldr	r2, [pc, #132]	; (8002568 <HAL_UART_IRQHandler+0x1fc>)
 80024e2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fd3f 	bl	8000f6c <HAL_DMA_Abort_IT>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d016      	beq.n	8002522 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fe:	4610      	mov	r0, r2
 8002500:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002502:	e00e      	b.n	8002522 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f845 	bl	8002594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250a:	e00a      	b.n	8002522 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f841 	bl	8002594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002512:	e006      	b.n	8002522 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f83d 	bl	8002594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002520:	e01d      	b.n	800255e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002522:	bf00      	nop
    return;
 8002524:	e01b      	b.n	800255e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_UART_IRQHandler+0x1d6>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f866 	bl	800260c <UART_Transmit_IT>
    return;
 8002540:	e00e      	b.n	8002560 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_UART_IRQHandler+0x1f4>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8ae 	bl	80026b8 <UART_EndTransmit_IT>
    return;
 800255c:	e000      	b.n	8002560 <HAL_UART_IRQHandler+0x1f4>
    return;
 800255e:	bf00      	nop
  }
}
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	080025e5 	.word	0x080025e5

0800256c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80025be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff ffc8 	bl	8002594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b21      	cmp	r3, #33	; 0x21
 800261e:	d144      	bne.n	80026aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002628:	d11a      	bne.n	8002660 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800263e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e00e      	b.n	8002672 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	621a      	str	r2, [r3, #32]
 800265e:	e008      	b.n	8002672 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	1c59      	adds	r1, r3, #1
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6211      	str	r1, [r2, #32]
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29b      	uxth	r3, r3
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4619      	mov	r1, r3
 8002680:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002694:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
  }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff47 	bl	800256c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b22      	cmp	r3, #34	; 0x22
 80026fa:	d171      	bne.n	80027e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	d123      	bne.n	800274e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10e      	bne.n	8002732 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	1c9a      	adds	r2, r3, #2
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
 8002730:	e029      	b.n	8002786 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	b29b      	uxth	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
 800274c:	e01b      	b.n	8002786 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6858      	ldr	r0, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	1c59      	adds	r1, r3, #1
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6291      	str	r1, [r2, #40]	; 0x28
 8002766:	b2c2      	uxtb	r2, r0
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e00c      	b.n	8002786 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	1c58      	adds	r0, r3, #1
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	6288      	str	r0, [r1, #40]	; 0x28
 800277e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29b      	uxth	r3, r3
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4619      	mov	r1, r3
 8002794:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002796:	2b00      	cmp	r3, #0
 8002798:	d120      	bne.n	80027dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0220 	bic.w	r2, r2, #32
 80027a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fed4 	bl	8002580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e002      	b.n	80027e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f0:	b0bd      	sub	sp, #244	; 0xf4
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	ea40 0301 	orr.w	r3, r0, r1
 8002814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
 800282c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002844:	f021 010c 	bic.w	r1, r1, #12
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002852:	430b      	orrs	r3, r1
 8002854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	ea40 0301 	orr.w	r3, r0, r1
 8002872:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287e:	f040 81a5 	bne.w	8002bcc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4bcd      	ldr	r3, [pc, #820]	; (8002bc0 <UART_SetConfig+0x3d4>)
 800288a:	429a      	cmp	r2, r3
 800288c:	d006      	beq.n	800289c <UART_SetConfig+0xb0>
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4bcb      	ldr	r3, [pc, #812]	; (8002bc4 <UART_SetConfig+0x3d8>)
 8002896:	429a      	cmp	r2, r3
 8002898:	f040 80cb 	bne.w	8002a32 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800289c:	f7ff fd04 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 80028a0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028a8:	461c      	mov	r4, r3
 80028aa:	f04f 0500 	mov.w	r5, #0
 80028ae:	4622      	mov	r2, r4
 80028b0:	462b      	mov	r3, r5
 80028b2:	1891      	adds	r1, r2, r2
 80028b4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80028b8:	415b      	adcs	r3, r3
 80028ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80028be:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80028c2:	1912      	adds	r2, r2, r4
 80028c4:	eb45 0303 	adc.w	r3, r5, r3
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	00d9      	lsls	r1, r3, #3
 80028d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d6:	00d0      	lsls	r0, r2, #3
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	1911      	adds	r1, r2, r4
 80028de:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80028e2:	416b      	adcs	r3, r5
 80028e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	1891      	adds	r1, r2, r2
 80028f6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80028fa:	415b      	adcs	r3, r3
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002900:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002904:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002908:	f7fd fcb2 	bl	8000270 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4bad      	ldr	r3, [pc, #692]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002912:	fba3 2302 	umull	r2, r3, r3, r2
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	011e      	lsls	r6, r3, #4
 800291a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291e:	461c      	mov	r4, r3
 8002920:	f04f 0500 	mov.w	r5, #0
 8002924:	4622      	mov	r2, r4
 8002926:	462b      	mov	r3, r5
 8002928:	1891      	adds	r1, r2, r2
 800292a:	67b9      	str	r1, [r7, #120]	; 0x78
 800292c:	415b      	adcs	r3, r3
 800292e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002930:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002934:	1912      	adds	r2, r2, r4
 8002936:	eb45 0303 	adc.w	r3, r5, r3
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	00d9      	lsls	r1, r3, #3
 8002944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002948:	00d0      	lsls	r0, r2, #3
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	1911      	adds	r1, r2, r4
 8002950:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002954:	416b      	adcs	r3, r5
 8002956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	461a      	mov	r2, r3
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	1891      	adds	r1, r2, r2
 8002968:	6739      	str	r1, [r7, #112]	; 0x70
 800296a:	415b      	adcs	r3, r3
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
 800296e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002972:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002976:	f7fd fc7b 	bl	8000270 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002980:	fba3 1302 	umull	r1, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2164      	movs	r1, #100	; 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3332      	adds	r3, #50	; 0x32
 8002992:	4a8d      	ldr	r2, [pc, #564]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a0:	441e      	add	r6, r3
 80029a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	1894      	adds	r4, r2, r2
 80029b2:	66bc      	str	r4, [r7, #104]	; 0x68
 80029b4:	415b      	adcs	r3, r3
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80029bc:	1812      	adds	r2, r2, r0
 80029be:	eb41 0303 	adc.w	r3, r1, r3
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	f04f 0500 	mov.w	r5, #0
 80029ca:	00dd      	lsls	r5, r3, #3
 80029cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029d0:	00d4      	lsls	r4, r2, #3
 80029d2:	4622      	mov	r2, r4
 80029d4:	462b      	mov	r3, r5
 80029d6:	1814      	adds	r4, r2, r0
 80029d8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80029dc:	414b      	adcs	r3, r1
 80029de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	1891      	adds	r1, r2, r2
 80029f0:	6639      	str	r1, [r7, #96]	; 0x60
 80029f2:	415b      	adcs	r3, r3
 80029f4:	667b      	str	r3, [r7, #100]	; 0x64
 80029f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80029fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029fe:	f7fd fc37 	bl	8000270 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002a08:	fba3 1302 	umull	r1, r3, r3, r2
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	2164      	movs	r1, #100	; 0x64
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	3332      	adds	r3, #50	; 0x32
 8002a1a:	4a6b      	ldr	r2, [pc, #428]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4432      	add	r2, r6
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e26d      	b.n	8002f0e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a32:	f7ff fc25 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8002a36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a3e:	461c      	mov	r4, r3
 8002a40:	f04f 0500 	mov.w	r5, #0
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a54:	1912      	adds	r2, r2, r4
 8002a56:	eb45 0303 	adc.w	r3, r5, r3
 8002a5a:	f04f 0000 	mov.w	r0, #0
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	00d9      	lsls	r1, r3, #3
 8002a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a68:	00d0      	lsls	r0, r2, #3
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	1911      	adds	r1, r2, r4
 8002a70:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002a74:	416b      	adcs	r3, r5
 8002a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	1891      	adds	r1, r2, r2
 8002a88:	6539      	str	r1, [r7, #80]	; 0x50
 8002a8a:	415b      	adcs	r3, r3
 8002a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002a96:	f7fd fbeb 	bl	8000270 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	011e      	lsls	r6, r3, #4
 8002aa8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aac:	461c      	mov	r4, r3
 8002aae:	f04f 0500 	mov.w	r5, #0
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	1891      	adds	r1, r2, r2
 8002ab8:	64b9      	str	r1, [r7, #72]	; 0x48
 8002aba:	415b      	adcs	r3, r3
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	eb45 0303 	adc.w	r3, r5, r3
 8002ac8:	f04f 0000 	mov.w	r0, #0
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	00d9      	lsls	r1, r3, #3
 8002ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad6:	00d0      	lsls	r0, r2, #3
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	1911      	adds	r1, r2, r4
 8002ade:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002ae2:	416b      	adcs	r3, r5
 8002ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	1891      	adds	r1, r2, r2
 8002af6:	6439      	str	r1, [r7, #64]	; 0x40
 8002af8:	415b      	adcs	r3, r3
 8002afa:	647b      	str	r3, [r7, #68]	; 0x44
 8002afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002b04:	f7fd fbb4 	bl	8000270 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	3332      	adds	r3, #50	; 0x32
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b2e:	441e      	add	r6, r3
 8002b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b34:	4618      	mov	r0, r3
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	1894      	adds	r4, r2, r2
 8002b40:	63bc      	str	r4, [r7, #56]	; 0x38
 8002b42:	415b      	adcs	r3, r3
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b4a:	1812      	adds	r2, r2, r0
 8002b4c:	eb41 0303 	adc.w	r3, r1, r3
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	f04f 0500 	mov.w	r5, #0
 8002b58:	00dd      	lsls	r5, r3, #3
 8002b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b5e:	00d4      	lsls	r4, r2, #3
 8002b60:	4622      	mov	r2, r4
 8002b62:	462b      	mov	r3, r5
 8002b64:	1814      	adds	r4, r2, r0
 8002b66:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002b6a:	414b      	adcs	r3, r1
 8002b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	6339      	str	r1, [r7, #48]	; 0x30
 8002b80:	415b      	adcs	r3, r3
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
 8002b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b88:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b8c:	f7fd fb70 	bl	8000270 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2164      	movs	r1, #100	; 0x64
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	3332      	adds	r3, #50	; 0x32
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <UART_SetConfig+0x3dc>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	f003 0207 	and.w	r2, r3, #7
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4432      	add	r2, r6
 8002bbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002bbe:	e1a6      	b.n	8002f0e <UART_SetConfig+0x722>
 8002bc0:	40011000 	.word	0x40011000
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4bd1      	ldr	r3, [pc, #836]	; (8002f18 <UART_SetConfig+0x72c>)
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d006      	beq.n	8002be6 <UART_SetConfig+0x3fa>
 8002bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4bcf      	ldr	r3, [pc, #828]	; (8002f1c <UART_SetConfig+0x730>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 80ca 	bne.w	8002d7a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002be6:	f7ff fb5f 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 8002bea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	f04f 0500 	mov.w	r5, #0
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c00:	415b      	adcs	r3, r3
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c08:	1912      	adds	r2, r2, r4
 8002c0a:	eb45 0303 	adc.w	r3, r5, r3
 8002c0e:	f04f 0000 	mov.w	r0, #0
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	00d9      	lsls	r1, r3, #3
 8002c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1c:	00d0      	lsls	r0, r2, #3
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	eb12 0a04 	adds.w	sl, r2, r4
 8002c26:	eb43 0b05 	adc.w	fp, r3, r5
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	008b      	lsls	r3, r1, #2
 8002c40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c44:	0082      	lsls	r2, r0, #2
 8002c46:	4650      	mov	r0, sl
 8002c48:	4659      	mov	r1, fp
 8002c4a:	f7fd fb11 	bl	8000270 <__aeabi_uldivmod>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4bb3      	ldr	r3, [pc, #716]	; (8002f20 <UART_SetConfig+0x734>)
 8002c54:	fba3 2302 	umull	r2, r3, r3, r2
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	011e      	lsls	r6, r3, #4
 8002c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c60:	4618      	mov	r0, r3
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	1894      	adds	r4, r2, r2
 8002c6c:	623c      	str	r4, [r7, #32]
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
 8002c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c76:	1812      	adds	r2, r2, r0
 8002c78:	eb41 0303 	adc.w	r3, r1, r3
 8002c7c:	f04f 0400 	mov.w	r4, #0
 8002c80:	f04f 0500 	mov.w	r5, #0
 8002c84:	00dd      	lsls	r5, r3, #3
 8002c86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c8a:	00d4      	lsls	r4, r2, #3
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	462b      	mov	r3, r5
 8002c90:	1814      	adds	r4, r2, r0
 8002c92:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002c96:	414b      	adcs	r3, r1
 8002c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f04f 0100 	mov.w	r1, #0
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cb6:	0082      	lsls	r2, r0, #2
 8002cb8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002cbc:	f7fd fad8 	bl	8000270 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <UART_SetConfig+0x734>)
 8002cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2164      	movs	r1, #100	; 0x64
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	; 0x32
 8002cd8:	4a91      	ldr	r2, [pc, #580]	; (8002f20 <UART_SetConfig+0x734>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce4:	441e      	add	r6, r3
 8002ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cea:	4618      	mov	r0, r3
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	1894      	adds	r4, r2, r2
 8002cf6:	61bc      	str	r4, [r7, #24]
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	1812      	adds	r2, r2, r0
 8002d02:	eb41 0303 	adc.w	r3, r1, r3
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	f04f 0500 	mov.w	r5, #0
 8002d0e:	00dd      	lsls	r5, r3, #3
 8002d10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d14:	00d4      	lsls	r4, r2, #3
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	1814      	adds	r4, r2, r0
 8002d1c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8002d20:	414b      	adcs	r3, r1
 8002d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d40:	0082      	lsls	r2, r0, #2
 8002d42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002d46:	f7fd fa93 	bl	8000270 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4b74      	ldr	r3, [pc, #464]	; (8002f20 <UART_SetConfig+0x734>)
 8002d50:	fba3 1302 	umull	r1, r3, r3, r2
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	2164      	movs	r1, #100	; 0x64
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	3332      	adds	r3, #50	; 0x32
 8002d62:	4a6f      	ldr	r2, [pc, #444]	; (8002f20 <UART_SetConfig+0x734>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4432      	add	r2, r6
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	e0c9      	b.n	8002f0e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f7ff fa81 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d86:	461c      	mov	r4, r3
 8002d88:	f04f 0500 	mov.w	r5, #0
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	462b      	mov	r3, r5
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	6139      	str	r1, [r7, #16]
 8002d94:	415b      	adcs	r3, r3
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9c:	1912      	adds	r2, r2, r4
 8002d9e:	eb45 0303 	adc.w	r3, r5, r3
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	00d9      	lsls	r1, r3, #3
 8002dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db0:	00d0      	lsls	r0, r2, #3
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	eb12 0804 	adds.w	r8, r2, r4
 8002dba:	eb43 0905 	adc.w	r9, r3, r5
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	008b      	lsls	r3, r1, #2
 8002dd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002dd8:	0082      	lsls	r2, r0, #2
 8002dda:	4640      	mov	r0, r8
 8002ddc:	4649      	mov	r1, r9
 8002dde:	f7fd fa47 	bl	8000270 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <UART_SetConfig+0x734>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	011e      	lsls	r6, r3, #4
 8002df0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002df4:	4618      	mov	r0, r3
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	1894      	adds	r4, r2, r2
 8002e00:	60bc      	str	r4, [r7, #8]
 8002e02:	415b      	adcs	r3, r3
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e0a:	1812      	adds	r2, r2, r0
 8002e0c:	eb41 0303 	adc.w	r3, r1, r3
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	f04f 0500 	mov.w	r5, #0
 8002e18:	00dd      	lsls	r5, r3, #3
 8002e1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e1e:	00d4      	lsls	r4, r2, #3
 8002e20:	4622      	mov	r2, r4
 8002e22:	462b      	mov	r3, r5
 8002e24:	1814      	adds	r4, r2, r0
 8002e26:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002e2a:	414b      	adcs	r3, r1
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	008b      	lsls	r3, r1, #2
 8002e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e4a:	0082      	lsls	r2, r0, #2
 8002e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e50:	f7fd fa0e 	bl	8000270 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <UART_SetConfig+0x734>)
 8002e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2164      	movs	r1, #100	; 0x64
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	3332      	adds	r3, #50	; 0x32
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <UART_SetConfig+0x734>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e78:	441e      	add	r6, r3
 8002e7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	1894      	adds	r4, r2, r2
 8002e8a:	603c      	str	r4, [r7, #0]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e94:	1812      	adds	r2, r2, r0
 8002e96:	eb41 0303 	adc.w	r3, r1, r3
 8002e9a:	f04f 0400 	mov.w	r4, #0
 8002e9e:	f04f 0500 	mov.w	r5, #0
 8002ea2:	00dd      	lsls	r5, r3, #3
 8002ea4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ea8:	00d4      	lsls	r4, r2, #3
 8002eaa:	4622      	mov	r2, r4
 8002eac:	462b      	mov	r3, r5
 8002eae:	1814      	adds	r4, r2, r0
 8002eb0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002eb4:	414b      	adcs	r3, r1
 8002eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	008b      	lsls	r3, r1, #2
 8002ed0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ed4:	0082      	lsls	r2, r0, #2
 8002ed6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002eda:	f7fd f9c9 	bl	8000270 <__aeabi_uldivmod>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <UART_SetConfig+0x734>)
 8002ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	2164      	movs	r1, #100	; 0x64
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	3332      	adds	r3, #50	; 0x32
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <UART_SetConfig+0x734>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4432      	add	r2, r6
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	e7ff      	b.n	8002f0e <UART_SetConfig+0x722>
 8002f0e:	bf00      	nop
 8002f10:	37f4      	adds	r7, #244	; 0xf4
 8002f12:	46bd      	mov	sp, r7
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	51eb851f 	.word	0x51eb851f

08002f24 <__errno>:
 8002f24:	4b01      	ldr	r3, [pc, #4]	; (8002f2c <__errno+0x8>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <__sflush_r>:
 8002f30:	898a      	ldrh	r2, [r1, #12]
 8002f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f36:	4605      	mov	r5, r0
 8002f38:	0710      	lsls	r0, r2, #28
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	d458      	bmi.n	8002ff0 <__sflush_r+0xc0>
 8002f3e:	684b      	ldr	r3, [r1, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dc05      	bgt.n	8002f50 <__sflush_r+0x20>
 8002f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dc02      	bgt.n	8002f50 <__sflush_r+0x20>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f52:	2e00      	cmp	r6, #0
 8002f54:	d0f9      	beq.n	8002f4a <__sflush_r+0x1a>
 8002f56:	2300      	movs	r3, #0
 8002f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f5c:	682f      	ldr	r7, [r5, #0]
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	d032      	beq.n	8002fc8 <__sflush_r+0x98>
 8002f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	075a      	lsls	r2, r3, #29
 8002f68:	d505      	bpl.n	8002f76 <__sflush_r+0x46>
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	1ac0      	subs	r0, r0, r3
 8002f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f70:	b10b      	cbz	r3, 8002f76 <__sflush_r+0x46>
 8002f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	2300      	movs	r3, #0
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f7c:	6a21      	ldr	r1, [r4, #32]
 8002f7e:	4628      	mov	r0, r5
 8002f80:	47b0      	blx	r6
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	d106      	bne.n	8002f96 <__sflush_r+0x66>
 8002f88:	6829      	ldr	r1, [r5, #0]
 8002f8a:	291d      	cmp	r1, #29
 8002f8c:	d82c      	bhi.n	8002fe8 <__sflush_r+0xb8>
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <__sflush_r+0x108>)
 8002f90:	40ca      	lsrs	r2, r1
 8002f92:	07d6      	lsls	r6, r2, #31
 8002f94:	d528      	bpl.n	8002fe8 <__sflush_r+0xb8>
 8002f96:	2200      	movs	r2, #0
 8002f98:	6062      	str	r2, [r4, #4]
 8002f9a:	04d9      	lsls	r1, r3, #19
 8002f9c:	6922      	ldr	r2, [r4, #16]
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	d504      	bpl.n	8002fac <__sflush_r+0x7c>
 8002fa2:	1c42      	adds	r2, r0, #1
 8002fa4:	d101      	bne.n	8002faa <__sflush_r+0x7a>
 8002fa6:	682b      	ldr	r3, [r5, #0]
 8002fa8:	b903      	cbnz	r3, 8002fac <__sflush_r+0x7c>
 8002faa:	6560      	str	r0, [r4, #84]	; 0x54
 8002fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	d0ca      	beq.n	8002f4a <__sflush_r+0x1a>
 8002fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	d002      	beq.n	8002fc2 <__sflush_r+0x92>
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f9b1 	bl	8003324 <_free_r>
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8002fc6:	e7c1      	b.n	8002f4c <__sflush_r+0x1c>
 8002fc8:	6a21      	ldr	r1, [r4, #32]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4628      	mov	r0, r5
 8002fce:	47b0      	blx	r6
 8002fd0:	1c41      	adds	r1, r0, #1
 8002fd2:	d1c7      	bne.n	8002f64 <__sflush_r+0x34>
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0c4      	beq.n	8002f64 <__sflush_r+0x34>
 8002fda:	2b1d      	cmp	r3, #29
 8002fdc:	d001      	beq.n	8002fe2 <__sflush_r+0xb2>
 8002fde:	2b16      	cmp	r3, #22
 8002fe0:	d101      	bne.n	8002fe6 <__sflush_r+0xb6>
 8002fe2:	602f      	str	r7, [r5, #0]
 8002fe4:	e7b1      	b.n	8002f4a <__sflush_r+0x1a>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	e7ad      	b.n	8002f4c <__sflush_r+0x1c>
 8002ff0:	690f      	ldr	r7, [r1, #16]
 8002ff2:	2f00      	cmp	r7, #0
 8002ff4:	d0a9      	beq.n	8002f4a <__sflush_r+0x1a>
 8002ff6:	0793      	lsls	r3, r2, #30
 8002ff8:	680e      	ldr	r6, [r1, #0]
 8002ffa:	bf08      	it	eq
 8002ffc:	694b      	ldreq	r3, [r1, #20]
 8002ffe:	600f      	str	r7, [r1, #0]
 8003000:	bf18      	it	ne
 8003002:	2300      	movne	r3, #0
 8003004:	eba6 0807 	sub.w	r8, r6, r7
 8003008:	608b      	str	r3, [r1, #8]
 800300a:	f1b8 0f00 	cmp.w	r8, #0
 800300e:	dd9c      	ble.n	8002f4a <__sflush_r+0x1a>
 8003010:	6a21      	ldr	r1, [r4, #32]
 8003012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003014:	4643      	mov	r3, r8
 8003016:	463a      	mov	r2, r7
 8003018:	4628      	mov	r0, r5
 800301a:	47b0      	blx	r6
 800301c:	2800      	cmp	r0, #0
 800301e:	dc06      	bgt.n	800302e <__sflush_r+0xfe>
 8003020:	89a3      	ldrh	r3, [r4, #12]
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	e78e      	b.n	8002f4c <__sflush_r+0x1c>
 800302e:	4407      	add	r7, r0
 8003030:	eba8 0800 	sub.w	r8, r8, r0
 8003034:	e7e9      	b.n	800300a <__sflush_r+0xda>
 8003036:	bf00      	nop
 8003038:	20400001 	.word	0x20400001

0800303c <_fflush_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	690b      	ldr	r3, [r1, #16]
 8003040:	4605      	mov	r5, r0
 8003042:	460c      	mov	r4, r1
 8003044:	b913      	cbnz	r3, 800304c <_fflush_r+0x10>
 8003046:	2500      	movs	r5, #0
 8003048:	4628      	mov	r0, r5
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	b118      	cbz	r0, 8003056 <_fflush_r+0x1a>
 800304e:	6983      	ldr	r3, [r0, #24]
 8003050:	b90b      	cbnz	r3, 8003056 <_fflush_r+0x1a>
 8003052:	f000 f899 	bl	8003188 <__sinit>
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <_fflush_r+0x6c>)
 8003058:	429c      	cmp	r4, r3
 800305a:	d11b      	bne.n	8003094 <_fflush_r+0x58>
 800305c:	686c      	ldr	r4, [r5, #4]
 800305e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ef      	beq.n	8003046 <_fflush_r+0xa>
 8003066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003068:	07d0      	lsls	r0, r2, #31
 800306a:	d404      	bmi.n	8003076 <_fflush_r+0x3a>
 800306c:	0599      	lsls	r1, r3, #22
 800306e:	d402      	bmi.n	8003076 <_fflush_r+0x3a>
 8003070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003072:	f000 f94c 	bl	800330e <__retarget_lock_acquire_recursive>
 8003076:	4628      	mov	r0, r5
 8003078:	4621      	mov	r1, r4
 800307a:	f7ff ff59 	bl	8002f30 <__sflush_r>
 800307e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003080:	07da      	lsls	r2, r3, #31
 8003082:	4605      	mov	r5, r0
 8003084:	d4e0      	bmi.n	8003048 <_fflush_r+0xc>
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	059b      	lsls	r3, r3, #22
 800308a:	d4dd      	bmi.n	8003048 <_fflush_r+0xc>
 800308c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800308e:	f000 f93f 	bl	8003310 <__retarget_lock_release_recursive>
 8003092:	e7d9      	b.n	8003048 <_fflush_r+0xc>
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <_fflush_r+0x70>)
 8003096:	429c      	cmp	r4, r3
 8003098:	d101      	bne.n	800309e <_fflush_r+0x62>
 800309a:	68ac      	ldr	r4, [r5, #8]
 800309c:	e7df      	b.n	800305e <_fflush_r+0x22>
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <_fflush_r+0x74>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	bf08      	it	eq
 80030a4:	68ec      	ldreq	r4, [r5, #12]
 80030a6:	e7da      	b.n	800305e <_fflush_r+0x22>
 80030a8:	08004028 	.word	0x08004028
 80030ac:	08004048 	.word	0x08004048
 80030b0:	08004008 	.word	0x08004008

080030b4 <fflush>:
 80030b4:	4601      	mov	r1, r0
 80030b6:	b920      	cbnz	r0, 80030c2 <fflush+0xe>
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <fflush+0x18>)
 80030ba:	4905      	ldr	r1, [pc, #20]	; (80030d0 <fflush+0x1c>)
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f000 b8e1 	b.w	8003284 <_fwalk_reent>
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <fflush+0x20>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	f7ff bfb9 	b.w	800303c <_fflush_r>
 80030ca:	bf00      	nop
 80030cc:	08004068 	.word	0x08004068
 80030d0:	0800303d 	.word	0x0800303d
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <std>:
 80030d8:	2300      	movs	r3, #0
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
 80030de:	e9c0 3300 	strd	r3, r3, [r0]
 80030e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030e6:	6083      	str	r3, [r0, #8]
 80030e8:	8181      	strh	r1, [r0, #12]
 80030ea:	6643      	str	r3, [r0, #100]	; 0x64
 80030ec:	81c2      	strh	r2, [r0, #14]
 80030ee:	6183      	str	r3, [r0, #24]
 80030f0:	4619      	mov	r1, r3
 80030f2:	2208      	movs	r2, #8
 80030f4:	305c      	adds	r0, #92	; 0x5c
 80030f6:	f000 f90c 	bl	8003312 <memset>
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <std+0x38>)
 80030fc:	6263      	str	r3, [r4, #36]	; 0x24
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <std+0x3c>)
 8003100:	62a3      	str	r3, [r4, #40]	; 0x28
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <std+0x40>)
 8003104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <std+0x44>)
 8003108:	6224      	str	r4, [r4, #32]
 800310a:	6323      	str	r3, [r4, #48]	; 0x30
 800310c:	bd10      	pop	{r4, pc}
 800310e:	bf00      	nop
 8003110:	080035b5 	.word	0x080035b5
 8003114:	080035d7 	.word	0x080035d7
 8003118:	0800360f 	.word	0x0800360f
 800311c:	08003633 	.word	0x08003633

08003120 <_cleanup_r>:
 8003120:	4901      	ldr	r1, [pc, #4]	; (8003128 <_cleanup_r+0x8>)
 8003122:	f000 b8af 	b.w	8003284 <_fwalk_reent>
 8003126:	bf00      	nop
 8003128:	0800303d 	.word	0x0800303d

0800312c <__sfmoreglue>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	1e4a      	subs	r2, r1, #1
 8003130:	2568      	movs	r5, #104	; 0x68
 8003132:	4355      	muls	r5, r2
 8003134:	460e      	mov	r6, r1
 8003136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800313a:	f000 f943 	bl	80033c4 <_malloc_r>
 800313e:	4604      	mov	r4, r0
 8003140:	b140      	cbz	r0, 8003154 <__sfmoreglue+0x28>
 8003142:	2100      	movs	r1, #0
 8003144:	e9c0 1600 	strd	r1, r6, [r0]
 8003148:	300c      	adds	r0, #12
 800314a:	60a0      	str	r0, [r4, #8]
 800314c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003150:	f000 f8df 	bl	8003312 <memset>
 8003154:	4620      	mov	r0, r4
 8003156:	bd70      	pop	{r4, r5, r6, pc}

08003158 <__sfp_lock_acquire>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__sfp_lock_acquire+0x8>)
 800315a:	f000 b8d8 	b.w	800330e <__retarget_lock_acquire_recursive>
 800315e:	bf00      	nop
 8003160:	20000138 	.word	0x20000138

08003164 <__sfp_lock_release>:
 8003164:	4801      	ldr	r0, [pc, #4]	; (800316c <__sfp_lock_release+0x8>)
 8003166:	f000 b8d3 	b.w	8003310 <__retarget_lock_release_recursive>
 800316a:	bf00      	nop
 800316c:	20000138 	.word	0x20000138

08003170 <__sinit_lock_acquire>:
 8003170:	4801      	ldr	r0, [pc, #4]	; (8003178 <__sinit_lock_acquire+0x8>)
 8003172:	f000 b8cc 	b.w	800330e <__retarget_lock_acquire_recursive>
 8003176:	bf00      	nop
 8003178:	20000133 	.word	0x20000133

0800317c <__sinit_lock_release>:
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <__sinit_lock_release+0x8>)
 800317e:	f000 b8c7 	b.w	8003310 <__retarget_lock_release_recursive>
 8003182:	bf00      	nop
 8003184:	20000133 	.word	0x20000133

08003188 <__sinit>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4604      	mov	r4, r0
 800318c:	f7ff fff0 	bl	8003170 <__sinit_lock_acquire>
 8003190:	69a3      	ldr	r3, [r4, #24]
 8003192:	b11b      	cbz	r3, 800319c <__sinit+0x14>
 8003194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003198:	f7ff bff0 	b.w	800317c <__sinit_lock_release>
 800319c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031a0:	6523      	str	r3, [r4, #80]	; 0x50
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <__sinit+0x68>)
 80031a4:	4a13      	ldr	r2, [pc, #76]	; (80031f4 <__sinit+0x6c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80031aa:	42a3      	cmp	r3, r4
 80031ac:	bf04      	itt	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	61a3      	streq	r3, [r4, #24]
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 f820 	bl	80031f8 <__sfp>
 80031b8:	6060      	str	r0, [r4, #4]
 80031ba:	4620      	mov	r0, r4
 80031bc:	f000 f81c 	bl	80031f8 <__sfp>
 80031c0:	60a0      	str	r0, [r4, #8]
 80031c2:	4620      	mov	r0, r4
 80031c4:	f000 f818 	bl	80031f8 <__sfp>
 80031c8:	2200      	movs	r2, #0
 80031ca:	60e0      	str	r0, [r4, #12]
 80031cc:	2104      	movs	r1, #4
 80031ce:	6860      	ldr	r0, [r4, #4]
 80031d0:	f7ff ff82 	bl	80030d8 <std>
 80031d4:	68a0      	ldr	r0, [r4, #8]
 80031d6:	2201      	movs	r2, #1
 80031d8:	2109      	movs	r1, #9
 80031da:	f7ff ff7d 	bl	80030d8 <std>
 80031de:	68e0      	ldr	r0, [r4, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	2112      	movs	r1, #18
 80031e4:	f7ff ff78 	bl	80030d8 <std>
 80031e8:	2301      	movs	r3, #1
 80031ea:	61a3      	str	r3, [r4, #24]
 80031ec:	e7d2      	b.n	8003194 <__sinit+0xc>
 80031ee:	bf00      	nop
 80031f0:	08004068 	.word	0x08004068
 80031f4:	08003121 	.word	0x08003121

080031f8 <__sfp>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	4607      	mov	r7, r0
 80031fc:	f7ff ffac 	bl	8003158 <__sfp_lock_acquire>
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <__sfp+0x84>)
 8003202:	681e      	ldr	r6, [r3, #0]
 8003204:	69b3      	ldr	r3, [r6, #24]
 8003206:	b913      	cbnz	r3, 800320e <__sfp+0x16>
 8003208:	4630      	mov	r0, r6
 800320a:	f7ff ffbd 	bl	8003188 <__sinit>
 800320e:	3648      	adds	r6, #72	; 0x48
 8003210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003214:	3b01      	subs	r3, #1
 8003216:	d503      	bpl.n	8003220 <__sfp+0x28>
 8003218:	6833      	ldr	r3, [r6, #0]
 800321a:	b30b      	cbz	r3, 8003260 <__sfp+0x68>
 800321c:	6836      	ldr	r6, [r6, #0]
 800321e:	e7f7      	b.n	8003210 <__sfp+0x18>
 8003220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003224:	b9d5      	cbnz	r5, 800325c <__sfp+0x64>
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <__sfp+0x88>)
 8003228:	60e3      	str	r3, [r4, #12]
 800322a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800322e:	6665      	str	r5, [r4, #100]	; 0x64
 8003230:	f000 f86c 	bl	800330c <__retarget_lock_init_recursive>
 8003234:	f7ff ff96 	bl	8003164 <__sfp_lock_release>
 8003238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800323c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003240:	6025      	str	r5, [r4, #0]
 8003242:	61a5      	str	r5, [r4, #24]
 8003244:	2208      	movs	r2, #8
 8003246:	4629      	mov	r1, r5
 8003248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800324c:	f000 f861 	bl	8003312 <memset>
 8003250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003258:	4620      	mov	r0, r4
 800325a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325c:	3468      	adds	r4, #104	; 0x68
 800325e:	e7d9      	b.n	8003214 <__sfp+0x1c>
 8003260:	2104      	movs	r1, #4
 8003262:	4638      	mov	r0, r7
 8003264:	f7ff ff62 	bl	800312c <__sfmoreglue>
 8003268:	4604      	mov	r4, r0
 800326a:	6030      	str	r0, [r6, #0]
 800326c:	2800      	cmp	r0, #0
 800326e:	d1d5      	bne.n	800321c <__sfp+0x24>
 8003270:	f7ff ff78 	bl	8003164 <__sfp_lock_release>
 8003274:	230c      	movs	r3, #12
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	e7ee      	b.n	8003258 <__sfp+0x60>
 800327a:	bf00      	nop
 800327c:	08004068 	.word	0x08004068
 8003280:	ffff0001 	.word	0xffff0001

08003284 <_fwalk_reent>:
 8003284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003288:	4606      	mov	r6, r0
 800328a:	4688      	mov	r8, r1
 800328c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003290:	2700      	movs	r7, #0
 8003292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003296:	f1b9 0901 	subs.w	r9, r9, #1
 800329a:	d505      	bpl.n	80032a8 <_fwalk_reent+0x24>
 800329c:	6824      	ldr	r4, [r4, #0]
 800329e:	2c00      	cmp	r4, #0
 80032a0:	d1f7      	bne.n	8003292 <_fwalk_reent+0xe>
 80032a2:	4638      	mov	r0, r7
 80032a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a8:	89ab      	ldrh	r3, [r5, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d907      	bls.n	80032be <_fwalk_reent+0x3a>
 80032ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032b2:	3301      	adds	r3, #1
 80032b4:	d003      	beq.n	80032be <_fwalk_reent+0x3a>
 80032b6:	4629      	mov	r1, r5
 80032b8:	4630      	mov	r0, r6
 80032ba:	47c0      	blx	r8
 80032bc:	4307      	orrs	r7, r0
 80032be:	3568      	adds	r5, #104	; 0x68
 80032c0:	e7e9      	b.n	8003296 <_fwalk_reent+0x12>
	...

080032c4 <__libc_init_array>:
 80032c4:	b570      	push	{r4, r5, r6, lr}
 80032c6:	4d0d      	ldr	r5, [pc, #52]	; (80032fc <__libc_init_array+0x38>)
 80032c8:	4c0d      	ldr	r4, [pc, #52]	; (8003300 <__libc_init_array+0x3c>)
 80032ca:	1b64      	subs	r4, r4, r5
 80032cc:	10a4      	asrs	r4, r4, #2
 80032ce:	2600      	movs	r6, #0
 80032d0:	42a6      	cmp	r6, r4
 80032d2:	d109      	bne.n	80032e8 <__libc_init_array+0x24>
 80032d4:	4d0b      	ldr	r5, [pc, #44]	; (8003304 <__libc_init_array+0x40>)
 80032d6:	4c0c      	ldr	r4, [pc, #48]	; (8003308 <__libc_init_array+0x44>)
 80032d8:	f000 fe36 	bl	8003f48 <_init>
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	2600      	movs	r6, #0
 80032e2:	42a6      	cmp	r6, r4
 80032e4:	d105      	bne.n	80032f2 <__libc_init_array+0x2e>
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ec:	4798      	blx	r3
 80032ee:	3601      	adds	r6, #1
 80032f0:	e7ee      	b.n	80032d0 <__libc_init_array+0xc>
 80032f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f6:	4798      	blx	r3
 80032f8:	3601      	adds	r6, #1
 80032fa:	e7f2      	b.n	80032e2 <__libc_init_array+0x1e>
 80032fc:	080040a8 	.word	0x080040a8
 8003300:	080040a8 	.word	0x080040a8
 8003304:	080040a8 	.word	0x080040a8
 8003308:	080040ac 	.word	0x080040ac

0800330c <__retarget_lock_init_recursive>:
 800330c:	4770      	bx	lr

0800330e <__retarget_lock_acquire_recursive>:
 800330e:	4770      	bx	lr

08003310 <__retarget_lock_release_recursive>:
 8003310:	4770      	bx	lr

08003312 <memset>:
 8003312:	4402      	add	r2, r0
 8003314:	4603      	mov	r3, r0
 8003316:	4293      	cmp	r3, r2
 8003318:	d100      	bne.n	800331c <memset+0xa>
 800331a:	4770      	bx	lr
 800331c:	f803 1b01 	strb.w	r1, [r3], #1
 8003320:	e7f9      	b.n	8003316 <memset+0x4>
	...

08003324 <_free_r>:
 8003324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003326:	2900      	cmp	r1, #0
 8003328:	d048      	beq.n	80033bc <_free_r+0x98>
 800332a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332e:	9001      	str	r0, [sp, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f1a1 0404 	sub.w	r4, r1, #4
 8003336:	bfb8      	it	lt
 8003338:	18e4      	addlt	r4, r4, r3
 800333a:	f000 fad7 	bl	80038ec <__malloc_lock>
 800333e:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <_free_r+0x9c>)
 8003340:	9801      	ldr	r0, [sp, #4]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	4615      	mov	r5, r2
 8003346:	b933      	cbnz	r3, 8003356 <_free_r+0x32>
 8003348:	6063      	str	r3, [r4, #4]
 800334a:	6014      	str	r4, [r2, #0]
 800334c:	b003      	add	sp, #12
 800334e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003352:	f000 bad1 	b.w	80038f8 <__malloc_unlock>
 8003356:	42a3      	cmp	r3, r4
 8003358:	d90b      	bls.n	8003372 <_free_r+0x4e>
 800335a:	6821      	ldr	r1, [r4, #0]
 800335c:	1862      	adds	r2, r4, r1
 800335e:	4293      	cmp	r3, r2
 8003360:	bf04      	itt	eq
 8003362:	681a      	ldreq	r2, [r3, #0]
 8003364:	685b      	ldreq	r3, [r3, #4]
 8003366:	6063      	str	r3, [r4, #4]
 8003368:	bf04      	itt	eq
 800336a:	1852      	addeq	r2, r2, r1
 800336c:	6022      	streq	r2, [r4, #0]
 800336e:	602c      	str	r4, [r5, #0]
 8003370:	e7ec      	b.n	800334c <_free_r+0x28>
 8003372:	461a      	mov	r2, r3
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	b10b      	cbz	r3, 800337c <_free_r+0x58>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d9fa      	bls.n	8003372 <_free_r+0x4e>
 800337c:	6811      	ldr	r1, [r2, #0]
 800337e:	1855      	adds	r5, r2, r1
 8003380:	42a5      	cmp	r5, r4
 8003382:	d10b      	bne.n	800339c <_free_r+0x78>
 8003384:	6824      	ldr	r4, [r4, #0]
 8003386:	4421      	add	r1, r4
 8003388:	1854      	adds	r4, r2, r1
 800338a:	42a3      	cmp	r3, r4
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	d1dd      	bne.n	800334c <_free_r+0x28>
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	6053      	str	r3, [r2, #4]
 8003396:	4421      	add	r1, r4
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	e7d7      	b.n	800334c <_free_r+0x28>
 800339c:	d902      	bls.n	80033a4 <_free_r+0x80>
 800339e:	230c      	movs	r3, #12
 80033a0:	6003      	str	r3, [r0, #0]
 80033a2:	e7d3      	b.n	800334c <_free_r+0x28>
 80033a4:	6825      	ldr	r5, [r4, #0]
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	428b      	cmp	r3, r1
 80033aa:	bf04      	itt	eq
 80033ac:	6819      	ldreq	r1, [r3, #0]
 80033ae:	685b      	ldreq	r3, [r3, #4]
 80033b0:	6063      	str	r3, [r4, #4]
 80033b2:	bf04      	itt	eq
 80033b4:	1949      	addeq	r1, r1, r5
 80033b6:	6021      	streq	r1, [r4, #0]
 80033b8:	6054      	str	r4, [r2, #4]
 80033ba:	e7c7      	b.n	800334c <_free_r+0x28>
 80033bc:	b003      	add	sp, #12
 80033be:	bd30      	pop	{r4, r5, pc}
 80033c0:	20000090 	.word	0x20000090

080033c4 <_malloc_r>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	1ccd      	adds	r5, r1, #3
 80033c8:	f025 0503 	bic.w	r5, r5, #3
 80033cc:	3508      	adds	r5, #8
 80033ce:	2d0c      	cmp	r5, #12
 80033d0:	bf38      	it	cc
 80033d2:	250c      	movcc	r5, #12
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	4606      	mov	r6, r0
 80033d8:	db01      	blt.n	80033de <_malloc_r+0x1a>
 80033da:	42a9      	cmp	r1, r5
 80033dc:	d903      	bls.n	80033e6 <_malloc_r+0x22>
 80033de:	230c      	movs	r3, #12
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	2000      	movs	r0, #0
 80033e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e6:	f000 fa81 	bl	80038ec <__malloc_lock>
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <_malloc_r+0xac>)
 80033ec:	680a      	ldr	r2, [r1, #0]
 80033ee:	4614      	mov	r4, r2
 80033f0:	b99c      	cbnz	r4, 800341a <_malloc_r+0x56>
 80033f2:	4f20      	ldr	r7, [pc, #128]	; (8003474 <_malloc_r+0xb0>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b923      	cbnz	r3, 8003402 <_malloc_r+0x3e>
 80033f8:	4621      	mov	r1, r4
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 f8ca 	bl	8003594 <_sbrk_r>
 8003400:	6038      	str	r0, [r7, #0]
 8003402:	4629      	mov	r1, r5
 8003404:	4630      	mov	r0, r6
 8003406:	f000 f8c5 	bl	8003594 <_sbrk_r>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	d123      	bne.n	8003456 <_malloc_r+0x92>
 800340e:	230c      	movs	r3, #12
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	4630      	mov	r0, r6
 8003414:	f000 fa70 	bl	80038f8 <__malloc_unlock>
 8003418:	e7e3      	b.n	80033e2 <_malloc_r+0x1e>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	1b5b      	subs	r3, r3, r5
 800341e:	d417      	bmi.n	8003450 <_malloc_r+0x8c>
 8003420:	2b0b      	cmp	r3, #11
 8003422:	d903      	bls.n	800342c <_malloc_r+0x68>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	441c      	add	r4, r3
 8003428:	6025      	str	r5, [r4, #0]
 800342a:	e004      	b.n	8003436 <_malloc_r+0x72>
 800342c:	6863      	ldr	r3, [r4, #4]
 800342e:	42a2      	cmp	r2, r4
 8003430:	bf0c      	ite	eq
 8003432:	600b      	streq	r3, [r1, #0]
 8003434:	6053      	strne	r3, [r2, #4]
 8003436:	4630      	mov	r0, r6
 8003438:	f000 fa5e 	bl	80038f8 <__malloc_unlock>
 800343c:	f104 000b 	add.w	r0, r4, #11
 8003440:	1d23      	adds	r3, r4, #4
 8003442:	f020 0007 	bic.w	r0, r0, #7
 8003446:	1ac2      	subs	r2, r0, r3
 8003448:	d0cc      	beq.n	80033e4 <_malloc_r+0x20>
 800344a:	1a1b      	subs	r3, r3, r0
 800344c:	50a3      	str	r3, [r4, r2]
 800344e:	e7c9      	b.n	80033e4 <_malloc_r+0x20>
 8003450:	4622      	mov	r2, r4
 8003452:	6864      	ldr	r4, [r4, #4]
 8003454:	e7cc      	b.n	80033f0 <_malloc_r+0x2c>
 8003456:	1cc4      	adds	r4, r0, #3
 8003458:	f024 0403 	bic.w	r4, r4, #3
 800345c:	42a0      	cmp	r0, r4
 800345e:	d0e3      	beq.n	8003428 <_malloc_r+0x64>
 8003460:	1a21      	subs	r1, r4, r0
 8003462:	4630      	mov	r0, r6
 8003464:	f000 f896 	bl	8003594 <_sbrk_r>
 8003468:	3001      	adds	r0, #1
 800346a:	d1dd      	bne.n	8003428 <_malloc_r+0x64>
 800346c:	e7cf      	b.n	800340e <_malloc_r+0x4a>
 800346e:	bf00      	nop
 8003470:	20000090 	.word	0x20000090
 8003474:	20000094 	.word	0x20000094

08003478 <iprintf>:
 8003478:	b40f      	push	{r0, r1, r2, r3}
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <iprintf+0x2c>)
 800347c:	b513      	push	{r0, r1, r4, lr}
 800347e:	681c      	ldr	r4, [r3, #0]
 8003480:	b124      	cbz	r4, 800348c <iprintf+0x14>
 8003482:	69a3      	ldr	r3, [r4, #24]
 8003484:	b913      	cbnz	r3, 800348c <iprintf+0x14>
 8003486:	4620      	mov	r0, r4
 8003488:	f7ff fe7e 	bl	8003188 <__sinit>
 800348c:	ab05      	add	r3, sp, #20
 800348e:	9a04      	ldr	r2, [sp, #16]
 8003490:	68a1      	ldr	r1, [r4, #8]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	4620      	mov	r0, r4
 8003496:	f000 fa5f 	bl	8003958 <_vfiprintf_r>
 800349a:	b002      	add	sp, #8
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a0:	b004      	add	sp, #16
 80034a2:	4770      	bx	lr
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <_puts_r>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	460e      	mov	r6, r1
 80034ac:	4605      	mov	r5, r0
 80034ae:	b118      	cbz	r0, 80034b8 <_puts_r+0x10>
 80034b0:	6983      	ldr	r3, [r0, #24]
 80034b2:	b90b      	cbnz	r3, 80034b8 <_puts_r+0x10>
 80034b4:	f7ff fe68 	bl	8003188 <__sinit>
 80034b8:	69ab      	ldr	r3, [r5, #24]
 80034ba:	68ac      	ldr	r4, [r5, #8]
 80034bc:	b913      	cbnz	r3, 80034c4 <_puts_r+0x1c>
 80034be:	4628      	mov	r0, r5
 80034c0:	f7ff fe62 	bl	8003188 <__sinit>
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <_puts_r+0xd0>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d120      	bne.n	800350c <_puts_r+0x64>
 80034ca:	686c      	ldr	r4, [r5, #4]
 80034cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ce:	07db      	lsls	r3, r3, #31
 80034d0:	d405      	bmi.n	80034de <_puts_r+0x36>
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	0598      	lsls	r0, r3, #22
 80034d6:	d402      	bmi.n	80034de <_puts_r+0x36>
 80034d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034da:	f7ff ff18 	bl	800330e <__retarget_lock_acquire_recursive>
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	0719      	lsls	r1, r3, #28
 80034e2:	d51d      	bpl.n	8003520 <_puts_r+0x78>
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	b1db      	cbz	r3, 8003520 <_puts_r+0x78>
 80034e8:	3e01      	subs	r6, #1
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	bb39      	cbnz	r1, 8003546 <_puts_r+0x9e>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da38      	bge.n	800356c <_puts_r+0xc4>
 80034fa:	4622      	mov	r2, r4
 80034fc:	210a      	movs	r1, #10
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f89c 	bl	800363c <__swbuf_r>
 8003504:	3001      	adds	r0, #1
 8003506:	d011      	beq.n	800352c <_puts_r+0x84>
 8003508:	250a      	movs	r5, #10
 800350a:	e011      	b.n	8003530 <_puts_r+0x88>
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <_puts_r+0xd4>)
 800350e:	429c      	cmp	r4, r3
 8003510:	d101      	bne.n	8003516 <_puts_r+0x6e>
 8003512:	68ac      	ldr	r4, [r5, #8]
 8003514:	e7da      	b.n	80034cc <_puts_r+0x24>
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <_puts_r+0xd8>)
 8003518:	429c      	cmp	r4, r3
 800351a:	bf08      	it	eq
 800351c:	68ec      	ldreq	r4, [r5, #12]
 800351e:	e7d5      	b.n	80034cc <_puts_r+0x24>
 8003520:	4621      	mov	r1, r4
 8003522:	4628      	mov	r0, r5
 8003524:	f000 f8ee 	bl	8003704 <__swsetup_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	d0dd      	beq.n	80034e8 <_puts_r+0x40>
 800352c:	f04f 35ff 	mov.w	r5, #4294967295
 8003530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003532:	07da      	lsls	r2, r3, #31
 8003534:	d405      	bmi.n	8003542 <_puts_r+0x9a>
 8003536:	89a3      	ldrh	r3, [r4, #12]
 8003538:	059b      	lsls	r3, r3, #22
 800353a:	d402      	bmi.n	8003542 <_puts_r+0x9a>
 800353c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800353e:	f7ff fee7 	bl	8003310 <__retarget_lock_release_recursive>
 8003542:	4628      	mov	r0, r5
 8003544:	bd70      	pop	{r4, r5, r6, pc}
 8003546:	2b00      	cmp	r3, #0
 8003548:	da04      	bge.n	8003554 <_puts_r+0xac>
 800354a:	69a2      	ldr	r2, [r4, #24]
 800354c:	429a      	cmp	r2, r3
 800354e:	dc06      	bgt.n	800355e <_puts_r+0xb6>
 8003550:	290a      	cmp	r1, #10
 8003552:	d004      	beq.n	800355e <_puts_r+0xb6>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	6022      	str	r2, [r4, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	e7c5      	b.n	80034ea <_puts_r+0x42>
 800355e:	4622      	mov	r2, r4
 8003560:	4628      	mov	r0, r5
 8003562:	f000 f86b 	bl	800363c <__swbuf_r>
 8003566:	3001      	adds	r0, #1
 8003568:	d1bf      	bne.n	80034ea <_puts_r+0x42>
 800356a:	e7df      	b.n	800352c <_puts_r+0x84>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	250a      	movs	r5, #10
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	701d      	strb	r5, [r3, #0]
 8003576:	e7db      	b.n	8003530 <_puts_r+0x88>
 8003578:	08004028 	.word	0x08004028
 800357c:	08004048 	.word	0x08004048
 8003580:	08004008 	.word	0x08004008

08003584 <puts>:
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <puts+0xc>)
 8003586:	4601      	mov	r1, r0
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f7ff bf8d 	b.w	80034a8 <_puts_r>
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c

08003594 <_sbrk_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4d06      	ldr	r5, [pc, #24]	; (80035b0 <_sbrk_r+0x1c>)
 8003598:	2300      	movs	r3, #0
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	602b      	str	r3, [r5, #0]
 80035a0:	f7fd fa2c 	bl	80009fc <_sbrk>
 80035a4:	1c43      	adds	r3, r0, #1
 80035a6:	d102      	bne.n	80035ae <_sbrk_r+0x1a>
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	b103      	cbz	r3, 80035ae <_sbrk_r+0x1a>
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	bd38      	pop	{r3, r4, r5, pc}
 80035b0:	2000013c 	.word	0x2000013c

080035b4 <__sread>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	460c      	mov	r4, r1
 80035b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035bc:	f000 fc90 	bl	8003ee0 <_read_r>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	bfab      	itete	ge
 80035c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035c6:	89a3      	ldrhlt	r3, [r4, #12]
 80035c8:	181b      	addge	r3, r3, r0
 80035ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035ce:	bfac      	ite	ge
 80035d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80035d2:	81a3      	strhlt	r3, [r4, #12]
 80035d4:	bd10      	pop	{r4, pc}

080035d6 <__swrite>:
 80035d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035da:	461f      	mov	r7, r3
 80035dc:	898b      	ldrh	r3, [r1, #12]
 80035de:	05db      	lsls	r3, r3, #23
 80035e0:	4605      	mov	r5, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	4616      	mov	r6, r2
 80035e6:	d505      	bpl.n	80035f4 <__swrite+0x1e>
 80035e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ec:	2302      	movs	r3, #2
 80035ee:	2200      	movs	r2, #0
 80035f0:	f000 f906 	bl	8003800 <_lseek_r>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	4632      	mov	r2, r6
 8003602:	463b      	mov	r3, r7
 8003604:	4628      	mov	r0, r5
 8003606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800360a:	f000 b869 	b.w	80036e0 <_write_r>

0800360e <__sseek>:
 800360e:	b510      	push	{r4, lr}
 8003610:	460c      	mov	r4, r1
 8003612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003616:	f000 f8f3 	bl	8003800 <_lseek_r>
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	bf15      	itete	ne
 8003620:	6560      	strne	r0, [r4, #84]	; 0x54
 8003622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800362a:	81a3      	strheq	r3, [r4, #12]
 800362c:	bf18      	it	ne
 800362e:	81a3      	strhne	r3, [r4, #12]
 8003630:	bd10      	pop	{r4, pc}

08003632 <__sclose>:
 8003632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003636:	f000 b8d3 	b.w	80037e0 <_close_r>
	...

0800363c <__swbuf_r>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	460e      	mov	r6, r1
 8003640:	4614      	mov	r4, r2
 8003642:	4605      	mov	r5, r0
 8003644:	b118      	cbz	r0, 800364e <__swbuf_r+0x12>
 8003646:	6983      	ldr	r3, [r0, #24]
 8003648:	b90b      	cbnz	r3, 800364e <__swbuf_r+0x12>
 800364a:	f7ff fd9d 	bl	8003188 <__sinit>
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <__swbuf_r+0x98>)
 8003650:	429c      	cmp	r4, r3
 8003652:	d12b      	bne.n	80036ac <__swbuf_r+0x70>
 8003654:	686c      	ldr	r4, [r5, #4]
 8003656:	69a3      	ldr	r3, [r4, #24]
 8003658:	60a3      	str	r3, [r4, #8]
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	071a      	lsls	r2, r3, #28
 800365e:	d52f      	bpl.n	80036c0 <__swbuf_r+0x84>
 8003660:	6923      	ldr	r3, [r4, #16]
 8003662:	b36b      	cbz	r3, 80036c0 <__swbuf_r+0x84>
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	1ac0      	subs	r0, r0, r3
 800366a:	6963      	ldr	r3, [r4, #20]
 800366c:	b2f6      	uxtb	r6, r6
 800366e:	4283      	cmp	r3, r0
 8003670:	4637      	mov	r7, r6
 8003672:	dc04      	bgt.n	800367e <__swbuf_r+0x42>
 8003674:	4621      	mov	r1, r4
 8003676:	4628      	mov	r0, r5
 8003678:	f7ff fce0 	bl	800303c <_fflush_r>
 800367c:	bb30      	cbnz	r0, 80036cc <__swbuf_r+0x90>
 800367e:	68a3      	ldr	r3, [r4, #8]
 8003680:	3b01      	subs	r3, #1
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	6022      	str	r2, [r4, #0]
 800368a:	701e      	strb	r6, [r3, #0]
 800368c:	6963      	ldr	r3, [r4, #20]
 800368e:	3001      	adds	r0, #1
 8003690:	4283      	cmp	r3, r0
 8003692:	d004      	beq.n	800369e <__swbuf_r+0x62>
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	07db      	lsls	r3, r3, #31
 8003698:	d506      	bpl.n	80036a8 <__swbuf_r+0x6c>
 800369a:	2e0a      	cmp	r6, #10
 800369c:	d104      	bne.n	80036a8 <__swbuf_r+0x6c>
 800369e:	4621      	mov	r1, r4
 80036a0:	4628      	mov	r0, r5
 80036a2:	f7ff fccb 	bl	800303c <_fflush_r>
 80036a6:	b988      	cbnz	r0, 80036cc <__swbuf_r+0x90>
 80036a8:	4638      	mov	r0, r7
 80036aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <__swbuf_r+0x9c>)
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d101      	bne.n	80036b6 <__swbuf_r+0x7a>
 80036b2:	68ac      	ldr	r4, [r5, #8]
 80036b4:	e7cf      	b.n	8003656 <__swbuf_r+0x1a>
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <__swbuf_r+0xa0>)
 80036b8:	429c      	cmp	r4, r3
 80036ba:	bf08      	it	eq
 80036bc:	68ec      	ldreq	r4, [r5, #12]
 80036be:	e7ca      	b.n	8003656 <__swbuf_r+0x1a>
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 f81e 	bl	8003704 <__swsetup_r>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d0cb      	beq.n	8003664 <__swbuf_r+0x28>
 80036cc:	f04f 37ff 	mov.w	r7, #4294967295
 80036d0:	e7ea      	b.n	80036a8 <__swbuf_r+0x6c>
 80036d2:	bf00      	nop
 80036d4:	08004028 	.word	0x08004028
 80036d8:	08004048 	.word	0x08004048
 80036dc:	08004008 	.word	0x08004008

080036e0 <_write_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d07      	ldr	r5, [pc, #28]	; (8003700 <_write_r+0x20>)
 80036e4:	4604      	mov	r4, r0
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	2200      	movs	r2, #0
 80036ec:	602a      	str	r2, [r5, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f7fd f933 	bl	800095a <_write>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_write_r+0x1e>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_write_r+0x1e>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	2000013c 	.word	0x2000013c

08003704 <__swsetup_r>:
 8003704:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <__swsetup_r+0xcc>)
 8003706:	b570      	push	{r4, r5, r6, lr}
 8003708:	681d      	ldr	r5, [r3, #0]
 800370a:	4606      	mov	r6, r0
 800370c:	460c      	mov	r4, r1
 800370e:	b125      	cbz	r5, 800371a <__swsetup_r+0x16>
 8003710:	69ab      	ldr	r3, [r5, #24]
 8003712:	b913      	cbnz	r3, 800371a <__swsetup_r+0x16>
 8003714:	4628      	mov	r0, r5
 8003716:	f7ff fd37 	bl	8003188 <__sinit>
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <__swsetup_r+0xd0>)
 800371c:	429c      	cmp	r4, r3
 800371e:	d10f      	bne.n	8003740 <__swsetup_r+0x3c>
 8003720:	686c      	ldr	r4, [r5, #4]
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003728:	0719      	lsls	r1, r3, #28
 800372a:	d42c      	bmi.n	8003786 <__swsetup_r+0x82>
 800372c:	06dd      	lsls	r5, r3, #27
 800372e:	d411      	bmi.n	8003754 <__swsetup_r+0x50>
 8003730:	2309      	movs	r3, #9
 8003732:	6033      	str	r3, [r6, #0]
 8003734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	f04f 30ff 	mov.w	r0, #4294967295
 800373e:	e03e      	b.n	80037be <__swsetup_r+0xba>
 8003740:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <__swsetup_r+0xd4>)
 8003742:	429c      	cmp	r4, r3
 8003744:	d101      	bne.n	800374a <__swsetup_r+0x46>
 8003746:	68ac      	ldr	r4, [r5, #8]
 8003748:	e7eb      	b.n	8003722 <__swsetup_r+0x1e>
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <__swsetup_r+0xd8>)
 800374c:	429c      	cmp	r4, r3
 800374e:	bf08      	it	eq
 8003750:	68ec      	ldreq	r4, [r5, #12]
 8003752:	e7e6      	b.n	8003722 <__swsetup_r+0x1e>
 8003754:	0758      	lsls	r0, r3, #29
 8003756:	d512      	bpl.n	800377e <__swsetup_r+0x7a>
 8003758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800375a:	b141      	cbz	r1, 800376e <__swsetup_r+0x6a>
 800375c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003760:	4299      	cmp	r1, r3
 8003762:	d002      	beq.n	800376a <__swsetup_r+0x66>
 8003764:	4630      	mov	r0, r6
 8003766:	f7ff fddd 	bl	8003324 <_free_r>
 800376a:	2300      	movs	r3, #0
 800376c:	6363      	str	r3, [r4, #52]	; 0x34
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	2300      	movs	r3, #0
 8003778:	6063      	str	r3, [r4, #4]
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	89a3      	ldrh	r3, [r4, #12]
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	81a3      	strh	r3, [r4, #12]
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	b94b      	cbnz	r3, 800379e <__swsetup_r+0x9a>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d003      	beq.n	800379e <__swsetup_r+0x9a>
 8003796:	4621      	mov	r1, r4
 8003798:	4630      	mov	r0, r6
 800379a:	f000 f867 	bl	800386c <__smakebuf_r>
 800379e:	89a0      	ldrh	r0, [r4, #12]
 80037a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037a4:	f010 0301 	ands.w	r3, r0, #1
 80037a8:	d00a      	beq.n	80037c0 <__swsetup_r+0xbc>
 80037aa:	2300      	movs	r3, #0
 80037ac:	60a3      	str	r3, [r4, #8]
 80037ae:	6963      	ldr	r3, [r4, #20]
 80037b0:	425b      	negs	r3, r3
 80037b2:	61a3      	str	r3, [r4, #24]
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	b943      	cbnz	r3, 80037ca <__swsetup_r+0xc6>
 80037b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037bc:	d1ba      	bne.n	8003734 <__swsetup_r+0x30>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	0781      	lsls	r1, r0, #30
 80037c2:	bf58      	it	pl
 80037c4:	6963      	ldrpl	r3, [r4, #20]
 80037c6:	60a3      	str	r3, [r4, #8]
 80037c8:	e7f4      	b.n	80037b4 <__swsetup_r+0xb0>
 80037ca:	2000      	movs	r0, #0
 80037cc:	e7f7      	b.n	80037be <__swsetup_r+0xba>
 80037ce:	bf00      	nop
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	08004028 	.word	0x08004028
 80037d8:	08004048 	.word	0x08004048
 80037dc:	08004008 	.word	0x08004008

080037e0 <_close_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	4d06      	ldr	r5, [pc, #24]	; (80037fc <_close_r+0x1c>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fd f8d1 	bl	8000992 <_close>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_close_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_close_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	2000013c 	.word	0x2000013c

08003800 <_lseek_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d07      	ldr	r5, [pc, #28]	; (8003820 <_lseek_r+0x20>)
 8003804:	4604      	mov	r4, r0
 8003806:	4608      	mov	r0, r1
 8003808:	4611      	mov	r1, r2
 800380a:	2200      	movs	r2, #0
 800380c:	602a      	str	r2, [r5, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	f7fd f8e6 	bl	80009e0 <_lseek>
 8003814:	1c43      	adds	r3, r0, #1
 8003816:	d102      	bne.n	800381e <_lseek_r+0x1e>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b103      	cbz	r3, 800381e <_lseek_r+0x1e>
 800381c:	6023      	str	r3, [r4, #0]
 800381e:	bd38      	pop	{r3, r4, r5, pc}
 8003820:	2000013c 	.word	0x2000013c

08003824 <__swhatbuf_r>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	460e      	mov	r6, r1
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	2900      	cmp	r1, #0
 800382e:	b096      	sub	sp, #88	; 0x58
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	da07      	bge.n	8003846 <__swhatbuf_r+0x22>
 8003836:	2300      	movs	r3, #0
 8003838:	602b      	str	r3, [r5, #0]
 800383a:	89b3      	ldrh	r3, [r6, #12]
 800383c:	061a      	lsls	r2, r3, #24
 800383e:	d410      	bmi.n	8003862 <__swhatbuf_r+0x3e>
 8003840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003844:	e00e      	b.n	8003864 <__swhatbuf_r+0x40>
 8003846:	466a      	mov	r2, sp
 8003848:	f000 fb5c 	bl	8003f04 <_fstat_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	dbf2      	blt.n	8003836 <__swhatbuf_r+0x12>
 8003850:	9a01      	ldr	r2, [sp, #4]
 8003852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800385a:	425a      	negs	r2, r3
 800385c:	415a      	adcs	r2, r3
 800385e:	602a      	str	r2, [r5, #0]
 8003860:	e7ee      	b.n	8003840 <__swhatbuf_r+0x1c>
 8003862:	2340      	movs	r3, #64	; 0x40
 8003864:	2000      	movs	r0, #0
 8003866:	6023      	str	r3, [r4, #0]
 8003868:	b016      	add	sp, #88	; 0x58
 800386a:	bd70      	pop	{r4, r5, r6, pc}

0800386c <__smakebuf_r>:
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003870:	079d      	lsls	r5, r3, #30
 8003872:	4606      	mov	r6, r0
 8003874:	460c      	mov	r4, r1
 8003876:	d507      	bpl.n	8003888 <__smakebuf_r+0x1c>
 8003878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	6123      	str	r3, [r4, #16]
 8003880:	2301      	movs	r3, #1
 8003882:	6163      	str	r3, [r4, #20]
 8003884:	b002      	add	sp, #8
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	ab01      	add	r3, sp, #4
 800388a:	466a      	mov	r2, sp
 800388c:	f7ff ffca 	bl	8003824 <__swhatbuf_r>
 8003890:	9900      	ldr	r1, [sp, #0]
 8003892:	4605      	mov	r5, r0
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff fd95 	bl	80033c4 <_malloc_r>
 800389a:	b948      	cbnz	r0, 80038b0 <__smakebuf_r+0x44>
 800389c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a0:	059a      	lsls	r2, r3, #22
 80038a2:	d4ef      	bmi.n	8003884 <__smakebuf_r+0x18>
 80038a4:	f023 0303 	bic.w	r3, r3, #3
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	e7e3      	b.n	8003878 <__smakebuf_r+0xc>
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <__smakebuf_r+0x7c>)
 80038b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	6020      	str	r0, [r4, #0]
 80038b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038bc:	81a3      	strh	r3, [r4, #12]
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	6163      	str	r3, [r4, #20]
 80038c2:	9b01      	ldr	r3, [sp, #4]
 80038c4:	6120      	str	r0, [r4, #16]
 80038c6:	b15b      	cbz	r3, 80038e0 <__smakebuf_r+0x74>
 80038c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038cc:	4630      	mov	r0, r6
 80038ce:	f000 fb2b 	bl	8003f28 <_isatty_r>
 80038d2:	b128      	cbz	r0, 80038e0 <__smakebuf_r+0x74>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	89a0      	ldrh	r0, [r4, #12]
 80038e2:	4305      	orrs	r5, r0
 80038e4:	81a5      	strh	r5, [r4, #12]
 80038e6:	e7cd      	b.n	8003884 <__smakebuf_r+0x18>
 80038e8:	08003121 	.word	0x08003121

080038ec <__malloc_lock>:
 80038ec:	4801      	ldr	r0, [pc, #4]	; (80038f4 <__malloc_lock+0x8>)
 80038ee:	f7ff bd0e 	b.w	800330e <__retarget_lock_acquire_recursive>
 80038f2:	bf00      	nop
 80038f4:	20000134 	.word	0x20000134

080038f8 <__malloc_unlock>:
 80038f8:	4801      	ldr	r0, [pc, #4]	; (8003900 <__malloc_unlock+0x8>)
 80038fa:	f7ff bd09 	b.w	8003310 <__retarget_lock_release_recursive>
 80038fe:	bf00      	nop
 8003900:	20000134 	.word	0x20000134

08003904 <__sfputc_r>:
 8003904:	6893      	ldr	r3, [r2, #8]
 8003906:	3b01      	subs	r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	b410      	push	{r4}
 800390c:	6093      	str	r3, [r2, #8]
 800390e:	da08      	bge.n	8003922 <__sfputc_r+0x1e>
 8003910:	6994      	ldr	r4, [r2, #24]
 8003912:	42a3      	cmp	r3, r4
 8003914:	db01      	blt.n	800391a <__sfputc_r+0x16>
 8003916:	290a      	cmp	r1, #10
 8003918:	d103      	bne.n	8003922 <__sfputc_r+0x1e>
 800391a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800391e:	f7ff be8d 	b.w	800363c <__swbuf_r>
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	1c58      	adds	r0, r3, #1
 8003926:	6010      	str	r0, [r2, #0]
 8003928:	7019      	strb	r1, [r3, #0]
 800392a:	4608      	mov	r0, r1
 800392c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003930:	4770      	bx	lr

08003932 <__sfputs_r>:
 8003932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003934:	4606      	mov	r6, r0
 8003936:	460f      	mov	r7, r1
 8003938:	4614      	mov	r4, r2
 800393a:	18d5      	adds	r5, r2, r3
 800393c:	42ac      	cmp	r4, r5
 800393e:	d101      	bne.n	8003944 <__sfputs_r+0x12>
 8003940:	2000      	movs	r0, #0
 8003942:	e007      	b.n	8003954 <__sfputs_r+0x22>
 8003944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003948:	463a      	mov	r2, r7
 800394a:	4630      	mov	r0, r6
 800394c:	f7ff ffda 	bl	8003904 <__sfputc_r>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d1f3      	bne.n	800393c <__sfputs_r+0xa>
 8003954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003958 <_vfiprintf_r>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	460d      	mov	r5, r1
 800395e:	b09d      	sub	sp, #116	; 0x74
 8003960:	4614      	mov	r4, r2
 8003962:	4698      	mov	r8, r3
 8003964:	4606      	mov	r6, r0
 8003966:	b118      	cbz	r0, 8003970 <_vfiprintf_r+0x18>
 8003968:	6983      	ldr	r3, [r0, #24]
 800396a:	b90b      	cbnz	r3, 8003970 <_vfiprintf_r+0x18>
 800396c:	f7ff fc0c 	bl	8003188 <__sinit>
 8003970:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <_vfiprintf_r+0x240>)
 8003972:	429d      	cmp	r5, r3
 8003974:	d11b      	bne.n	80039ae <_vfiprintf_r+0x56>
 8003976:	6875      	ldr	r5, [r6, #4]
 8003978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800397a:	07d9      	lsls	r1, r3, #31
 800397c:	d405      	bmi.n	800398a <_vfiprintf_r+0x32>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	059a      	lsls	r2, r3, #22
 8003982:	d402      	bmi.n	800398a <_vfiprintf_r+0x32>
 8003984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003986:	f7ff fcc2 	bl	800330e <__retarget_lock_acquire_recursive>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	d501      	bpl.n	8003994 <_vfiprintf_r+0x3c>
 8003990:	692b      	ldr	r3, [r5, #16]
 8003992:	b9eb      	cbnz	r3, 80039d0 <_vfiprintf_r+0x78>
 8003994:	4629      	mov	r1, r5
 8003996:	4630      	mov	r0, r6
 8003998:	f7ff feb4 	bl	8003704 <__swsetup_r>
 800399c:	b1c0      	cbz	r0, 80039d0 <_vfiprintf_r+0x78>
 800399e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039a0:	07dc      	lsls	r4, r3, #31
 80039a2:	d50e      	bpl.n	80039c2 <_vfiprintf_r+0x6a>
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	b01d      	add	sp, #116	; 0x74
 80039aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ae:	4b7b      	ldr	r3, [pc, #492]	; (8003b9c <_vfiprintf_r+0x244>)
 80039b0:	429d      	cmp	r5, r3
 80039b2:	d101      	bne.n	80039b8 <_vfiprintf_r+0x60>
 80039b4:	68b5      	ldr	r5, [r6, #8]
 80039b6:	e7df      	b.n	8003978 <_vfiprintf_r+0x20>
 80039b8:	4b79      	ldr	r3, [pc, #484]	; (8003ba0 <_vfiprintf_r+0x248>)
 80039ba:	429d      	cmp	r5, r3
 80039bc:	bf08      	it	eq
 80039be:	68f5      	ldreq	r5, [r6, #12]
 80039c0:	e7da      	b.n	8003978 <_vfiprintf_r+0x20>
 80039c2:	89ab      	ldrh	r3, [r5, #12]
 80039c4:	0598      	lsls	r0, r3, #22
 80039c6:	d4ed      	bmi.n	80039a4 <_vfiprintf_r+0x4c>
 80039c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ca:	f7ff fca1 	bl	8003310 <__retarget_lock_release_recursive>
 80039ce:	e7e9      	b.n	80039a4 <_vfiprintf_r+0x4c>
 80039d0:	2300      	movs	r3, #0
 80039d2:	9309      	str	r3, [sp, #36]	; 0x24
 80039d4:	2320      	movs	r3, #32
 80039d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039da:	f8cd 800c 	str.w	r8, [sp, #12]
 80039de:	2330      	movs	r3, #48	; 0x30
 80039e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ba4 <_vfiprintf_r+0x24c>
 80039e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039e8:	f04f 0901 	mov.w	r9, #1
 80039ec:	4623      	mov	r3, r4
 80039ee:	469a      	mov	sl, r3
 80039f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039f4:	b10a      	cbz	r2, 80039fa <_vfiprintf_r+0xa2>
 80039f6:	2a25      	cmp	r2, #37	; 0x25
 80039f8:	d1f9      	bne.n	80039ee <_vfiprintf_r+0x96>
 80039fa:	ebba 0b04 	subs.w	fp, sl, r4
 80039fe:	d00b      	beq.n	8003a18 <_vfiprintf_r+0xc0>
 8003a00:	465b      	mov	r3, fp
 8003a02:	4622      	mov	r2, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff ff93 	bl	8003932 <__sfputs_r>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	f000 80aa 	beq.w	8003b66 <_vfiprintf_r+0x20e>
 8003a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a14:	445a      	add	r2, fp
 8003a16:	9209      	str	r2, [sp, #36]	; 0x24
 8003a18:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a2 	beq.w	8003b66 <_vfiprintf_r+0x20e>
 8003a22:	2300      	movs	r3, #0
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a2c:	f10a 0a01 	add.w	sl, sl, #1
 8003a30:	9304      	str	r3, [sp, #16]
 8003a32:	9307      	str	r3, [sp, #28]
 8003a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a38:	931a      	str	r3, [sp, #104]	; 0x68
 8003a3a:	4654      	mov	r4, sl
 8003a3c:	2205      	movs	r2, #5
 8003a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a42:	4858      	ldr	r0, [pc, #352]	; (8003ba4 <_vfiprintf_r+0x24c>)
 8003a44:	f7fc fbc4 	bl	80001d0 <memchr>
 8003a48:	9a04      	ldr	r2, [sp, #16]
 8003a4a:	b9d8      	cbnz	r0, 8003a84 <_vfiprintf_r+0x12c>
 8003a4c:	06d1      	lsls	r1, r2, #27
 8003a4e:	bf44      	itt	mi
 8003a50:	2320      	movmi	r3, #32
 8003a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a56:	0713      	lsls	r3, r2, #28
 8003a58:	bf44      	itt	mi
 8003a5a:	232b      	movmi	r3, #43	; 0x2b
 8003a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a60:	f89a 3000 	ldrb.w	r3, [sl]
 8003a64:	2b2a      	cmp	r3, #42	; 0x2a
 8003a66:	d015      	beq.n	8003a94 <_vfiprintf_r+0x13c>
 8003a68:	9a07      	ldr	r2, [sp, #28]
 8003a6a:	4654      	mov	r4, sl
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f04f 0c0a 	mov.w	ip, #10
 8003a72:	4621      	mov	r1, r4
 8003a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a78:	3b30      	subs	r3, #48	; 0x30
 8003a7a:	2b09      	cmp	r3, #9
 8003a7c:	d94e      	bls.n	8003b1c <_vfiprintf_r+0x1c4>
 8003a7e:	b1b0      	cbz	r0, 8003aae <_vfiprintf_r+0x156>
 8003a80:	9207      	str	r2, [sp, #28]
 8003a82:	e014      	b.n	8003aae <_vfiprintf_r+0x156>
 8003a84:	eba0 0308 	sub.w	r3, r0, r8
 8003a88:	fa09 f303 	lsl.w	r3, r9, r3
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	9304      	str	r3, [sp, #16]
 8003a90:	46a2      	mov	sl, r4
 8003a92:	e7d2      	b.n	8003a3a <_vfiprintf_r+0xe2>
 8003a94:	9b03      	ldr	r3, [sp, #12]
 8003a96:	1d19      	adds	r1, r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	9103      	str	r1, [sp, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bfbb      	ittet	lt
 8003aa0:	425b      	neglt	r3, r3
 8003aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8003aa6:	9307      	strge	r3, [sp, #28]
 8003aa8:	9307      	strlt	r3, [sp, #28]
 8003aaa:	bfb8      	it	lt
 8003aac:	9204      	strlt	r2, [sp, #16]
 8003aae:	7823      	ldrb	r3, [r4, #0]
 8003ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab2:	d10c      	bne.n	8003ace <_vfiprintf_r+0x176>
 8003ab4:	7863      	ldrb	r3, [r4, #1]
 8003ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab8:	d135      	bne.n	8003b26 <_vfiprintf_r+0x1ce>
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	1d1a      	adds	r2, r3, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	9203      	str	r2, [sp, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bfb8      	it	lt
 8003ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aca:	3402      	adds	r4, #2
 8003acc:	9305      	str	r3, [sp, #20]
 8003ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bb4 <_vfiprintf_r+0x25c>
 8003ad2:	7821      	ldrb	r1, [r4, #0]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4650      	mov	r0, sl
 8003ad8:	f7fc fb7a 	bl	80001d0 <memchr>
 8003adc:	b140      	cbz	r0, 8003af0 <_vfiprintf_r+0x198>
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	eba0 000a 	sub.w	r0, r0, sl
 8003ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8003ae8:	9b04      	ldr	r3, [sp, #16]
 8003aea:	4303      	orrs	r3, r0
 8003aec:	3401      	adds	r4, #1
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af4:	482c      	ldr	r0, [pc, #176]	; (8003ba8 <_vfiprintf_r+0x250>)
 8003af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003afa:	2206      	movs	r2, #6
 8003afc:	f7fc fb68 	bl	80001d0 <memchr>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d03f      	beq.n	8003b84 <_vfiprintf_r+0x22c>
 8003b04:	4b29      	ldr	r3, [pc, #164]	; (8003bac <_vfiprintf_r+0x254>)
 8003b06:	bb1b      	cbnz	r3, 8003b50 <_vfiprintf_r+0x1f8>
 8003b08:	9b03      	ldr	r3, [sp, #12]
 8003b0a:	3307      	adds	r3, #7
 8003b0c:	f023 0307 	bic.w	r3, r3, #7
 8003b10:	3308      	adds	r3, #8
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b16:	443b      	add	r3, r7
 8003b18:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1a:	e767      	b.n	80039ec <_vfiprintf_r+0x94>
 8003b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b20:	460c      	mov	r4, r1
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7a5      	b.n	8003a72 <_vfiprintf_r+0x11a>
 8003b26:	2300      	movs	r3, #0
 8003b28:	3401      	adds	r4, #1
 8003b2a:	9305      	str	r3, [sp, #20]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f04f 0c0a 	mov.w	ip, #10
 8003b32:	4620      	mov	r0, r4
 8003b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b38:	3a30      	subs	r2, #48	; 0x30
 8003b3a:	2a09      	cmp	r2, #9
 8003b3c:	d903      	bls.n	8003b46 <_vfiprintf_r+0x1ee>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0c5      	beq.n	8003ace <_vfiprintf_r+0x176>
 8003b42:	9105      	str	r1, [sp, #20]
 8003b44:	e7c3      	b.n	8003ace <_vfiprintf_r+0x176>
 8003b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e7f0      	b.n	8003b32 <_vfiprintf_r+0x1da>
 8003b50:	ab03      	add	r3, sp, #12
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	462a      	mov	r2, r5
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <_vfiprintf_r+0x258>)
 8003b58:	a904      	add	r1, sp, #16
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f3af 8000 	nop.w
 8003b60:	4607      	mov	r7, r0
 8003b62:	1c78      	adds	r0, r7, #1
 8003b64:	d1d6      	bne.n	8003b14 <_vfiprintf_r+0x1bc>
 8003b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b68:	07d9      	lsls	r1, r3, #31
 8003b6a:	d405      	bmi.n	8003b78 <_vfiprintf_r+0x220>
 8003b6c:	89ab      	ldrh	r3, [r5, #12]
 8003b6e:	059a      	lsls	r2, r3, #22
 8003b70:	d402      	bmi.n	8003b78 <_vfiprintf_r+0x220>
 8003b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b74:	f7ff fbcc 	bl	8003310 <__retarget_lock_release_recursive>
 8003b78:	89ab      	ldrh	r3, [r5, #12]
 8003b7a:	065b      	lsls	r3, r3, #25
 8003b7c:	f53f af12 	bmi.w	80039a4 <_vfiprintf_r+0x4c>
 8003b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b82:	e711      	b.n	80039a8 <_vfiprintf_r+0x50>
 8003b84:	ab03      	add	r3, sp, #12
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <_vfiprintf_r+0x258>)
 8003b8c:	a904      	add	r1, sp, #16
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f000 f880 	bl	8003c94 <_printf_i>
 8003b94:	e7e4      	b.n	8003b60 <_vfiprintf_r+0x208>
 8003b96:	bf00      	nop
 8003b98:	08004028 	.word	0x08004028
 8003b9c:	08004048 	.word	0x08004048
 8003ba0:	08004008 	.word	0x08004008
 8003ba4:	0800406c 	.word	0x0800406c
 8003ba8:	08004076 	.word	0x08004076
 8003bac:	00000000 	.word	0x00000000
 8003bb0:	08003933 	.word	0x08003933
 8003bb4:	08004072 	.word	0x08004072

08003bb8 <_printf_common>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	4699      	mov	r9, r3
 8003bc0:	688a      	ldr	r2, [r1, #8]
 8003bc2:	690b      	ldr	r3, [r1, #16]
 8003bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bfb8      	it	lt
 8003bcc:	4613      	movlt	r3, r2
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bd4:	4607      	mov	r7, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	b10a      	cbz	r2, 8003bde <_printf_common+0x26>
 8003bda:	3301      	adds	r3, #1
 8003bdc:	6033      	str	r3, [r6, #0]
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	0699      	lsls	r1, r3, #26
 8003be2:	bf42      	ittt	mi
 8003be4:	6833      	ldrmi	r3, [r6, #0]
 8003be6:	3302      	addmi	r3, #2
 8003be8:	6033      	strmi	r3, [r6, #0]
 8003bea:	6825      	ldr	r5, [r4, #0]
 8003bec:	f015 0506 	ands.w	r5, r5, #6
 8003bf0:	d106      	bne.n	8003c00 <_printf_common+0x48>
 8003bf2:	f104 0a19 	add.w	sl, r4, #25
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	6832      	ldr	r2, [r6, #0]
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	dc26      	bgt.n	8003c4e <_printf_common+0x96>
 8003c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c04:	1e13      	subs	r3, r2, #0
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	bf18      	it	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	0692      	lsls	r2, r2, #26
 8003c0e:	d42b      	bmi.n	8003c68 <_printf_common+0xb0>
 8003c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c14:	4649      	mov	r1, r9
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c0      	blx	r8
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d01e      	beq.n	8003c5c <_printf_common+0xa4>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	68e5      	ldr	r5, [r4, #12]
 8003c22:	6832      	ldr	r2, [r6, #0]
 8003c24:	f003 0306 	and.w	r3, r3, #6
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	bf08      	it	eq
 8003c2c:	1aad      	subeq	r5, r5, r2
 8003c2e:	68a3      	ldr	r3, [r4, #8]
 8003c30:	6922      	ldr	r2, [r4, #16]
 8003c32:	bf0c      	ite	eq
 8003c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c38:	2500      	movne	r5, #0
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	bfc4      	itt	gt
 8003c3e:	1a9b      	subgt	r3, r3, r2
 8003c40:	18ed      	addgt	r5, r5, r3
 8003c42:	2600      	movs	r6, #0
 8003c44:	341a      	adds	r4, #26
 8003c46:	42b5      	cmp	r5, r6
 8003c48:	d11a      	bne.n	8003c80 <_printf_common+0xc8>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	e008      	b.n	8003c60 <_printf_common+0xa8>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4652      	mov	r2, sl
 8003c52:	4649      	mov	r1, r9
 8003c54:	4638      	mov	r0, r7
 8003c56:	47c0      	blx	r8
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d103      	bne.n	8003c64 <_printf_common+0xac>
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c64:	3501      	adds	r5, #1
 8003c66:	e7c6      	b.n	8003bf6 <_printf_common+0x3e>
 8003c68:	18e1      	adds	r1, r4, r3
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	2030      	movs	r0, #48	; 0x30
 8003c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c72:	4422      	add	r2, r4
 8003c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	e7c7      	b.n	8003c10 <_printf_common+0x58>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4622      	mov	r2, r4
 8003c84:	4649      	mov	r1, r9
 8003c86:	4638      	mov	r0, r7
 8003c88:	47c0      	blx	r8
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d0e6      	beq.n	8003c5c <_printf_common+0xa4>
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7d9      	b.n	8003c46 <_printf_common+0x8e>
	...

08003c94 <_printf_i>:
 8003c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	460c      	mov	r4, r1
 8003c9a:	4691      	mov	r9, r2
 8003c9c:	7e27      	ldrb	r7, [r4, #24]
 8003c9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ca0:	2f78      	cmp	r7, #120	; 0x78
 8003ca2:	4680      	mov	r8, r0
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003caa:	d807      	bhi.n	8003cbc <_printf_i+0x28>
 8003cac:	2f62      	cmp	r7, #98	; 0x62
 8003cae:	d80a      	bhi.n	8003cc6 <_printf_i+0x32>
 8003cb0:	2f00      	cmp	r7, #0
 8003cb2:	f000 80d8 	beq.w	8003e66 <_printf_i+0x1d2>
 8003cb6:	2f58      	cmp	r7, #88	; 0x58
 8003cb8:	f000 80a3 	beq.w	8003e02 <_printf_i+0x16e>
 8003cbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cc4:	e03a      	b.n	8003d3c <_printf_i+0xa8>
 8003cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cca:	2b15      	cmp	r3, #21
 8003ccc:	d8f6      	bhi.n	8003cbc <_printf_i+0x28>
 8003cce:	a001      	add	r0, pc, #4	; (adr r0, 8003cd4 <_printf_i+0x40>)
 8003cd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d41 	.word	0x08003d41
 8003cdc:	08003cbd 	.word	0x08003cbd
 8003ce0:	08003cbd 	.word	0x08003cbd
 8003ce4:	08003cbd 	.word	0x08003cbd
 8003ce8:	08003cbd 	.word	0x08003cbd
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003cbd 	.word	0x08003cbd
 8003cf4:	08003cbd 	.word	0x08003cbd
 8003cf8:	08003cbd 	.word	0x08003cbd
 8003cfc:	08003cbd 	.word	0x08003cbd
 8003d00:	08003e4d 	.word	0x08003e4d
 8003d04:	08003d71 	.word	0x08003d71
 8003d08:	08003e2f 	.word	0x08003e2f
 8003d0c:	08003cbd 	.word	0x08003cbd
 8003d10:	08003cbd 	.word	0x08003cbd
 8003d14:	08003e6f 	.word	0x08003e6f
 8003d18:	08003cbd 	.word	0x08003cbd
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003cbd 	.word	0x08003cbd
 8003d24:	08003cbd 	.word	0x08003cbd
 8003d28:	08003e37 	.word	0x08003e37
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	600a      	str	r2, [r1, #0]
 8003d34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0a3      	b.n	8003e88 <_printf_i+0x1f4>
 8003d40:	6825      	ldr	r5, [r4, #0]
 8003d42:	6808      	ldr	r0, [r1, #0]
 8003d44:	062e      	lsls	r6, r5, #24
 8003d46:	f100 0304 	add.w	r3, r0, #4
 8003d4a:	d50a      	bpl.n	8003d62 <_printf_i+0xce>
 8003d4c:	6805      	ldr	r5, [r0, #0]
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	2d00      	cmp	r5, #0
 8003d52:	da03      	bge.n	8003d5c <_printf_i+0xc8>
 8003d54:	232d      	movs	r3, #45	; 0x2d
 8003d56:	426d      	negs	r5, r5
 8003d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d5c:	485e      	ldr	r0, [pc, #376]	; (8003ed8 <_printf_i+0x244>)
 8003d5e:	230a      	movs	r3, #10
 8003d60:	e019      	b.n	8003d96 <_printf_i+0x102>
 8003d62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d66:	6805      	ldr	r5, [r0, #0]
 8003d68:	600b      	str	r3, [r1, #0]
 8003d6a:	bf18      	it	ne
 8003d6c:	b22d      	sxthne	r5, r5
 8003d6e:	e7ef      	b.n	8003d50 <_printf_i+0xbc>
 8003d70:	680b      	ldr	r3, [r1, #0]
 8003d72:	6825      	ldr	r5, [r4, #0]
 8003d74:	1d18      	adds	r0, r3, #4
 8003d76:	6008      	str	r0, [r1, #0]
 8003d78:	0628      	lsls	r0, r5, #24
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0xec>
 8003d7c:	681d      	ldr	r5, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0xf2>
 8003d80:	0669      	lsls	r1, r5, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0xe8>
 8003d84:	881d      	ldrh	r5, [r3, #0]
 8003d86:	4854      	ldr	r0, [pc, #336]	; (8003ed8 <_printf_i+0x244>)
 8003d88:	2f6f      	cmp	r7, #111	; 0x6f
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2308      	moveq	r3, #8
 8003d8e:	230a      	movne	r3, #10
 8003d90:	2100      	movs	r1, #0
 8003d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d96:	6866      	ldr	r6, [r4, #4]
 8003d98:	60a6      	str	r6, [r4, #8]
 8003d9a:	2e00      	cmp	r6, #0
 8003d9c:	bfa2      	ittt	ge
 8003d9e:	6821      	ldrge	r1, [r4, #0]
 8003da0:	f021 0104 	bicge.w	r1, r1, #4
 8003da4:	6021      	strge	r1, [r4, #0]
 8003da6:	b90d      	cbnz	r5, 8003dac <_printf_i+0x118>
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	d04d      	beq.n	8003e48 <_printf_i+0x1b4>
 8003dac:	4616      	mov	r6, r2
 8003dae:	fbb5 f1f3 	udiv	r1, r5, r3
 8003db2:	fb03 5711 	mls	r7, r3, r1, r5
 8003db6:	5dc7      	ldrb	r7, [r0, r7]
 8003db8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dbc:	462f      	mov	r7, r5
 8003dbe:	42bb      	cmp	r3, r7
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	d9f4      	bls.n	8003dae <_printf_i+0x11a>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10b      	bne.n	8003de0 <_printf_i+0x14c>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	07df      	lsls	r7, r3, #31
 8003dcc:	d508      	bpl.n	8003de0 <_printf_i+0x14c>
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	6861      	ldr	r1, [r4, #4]
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	bfde      	ittt	le
 8003dd6:	2330      	movle	r3, #48	; 0x30
 8003dd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003de0:	1b92      	subs	r2, r2, r6
 8003de2:	6122      	str	r2, [r4, #16]
 8003de4:	f8cd a000 	str.w	sl, [sp]
 8003de8:	464b      	mov	r3, r9
 8003dea:	aa03      	add	r2, sp, #12
 8003dec:	4621      	mov	r1, r4
 8003dee:	4640      	mov	r0, r8
 8003df0:	f7ff fee2 	bl	8003bb8 <_printf_common>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d14c      	bne.n	8003e92 <_printf_i+0x1fe>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	b004      	add	sp, #16
 8003dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e02:	4835      	ldr	r0, [pc, #212]	; (8003ed8 <_printf_i+0x244>)
 8003e04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	680e      	ldr	r6, [r1, #0]
 8003e0c:	061f      	lsls	r7, r3, #24
 8003e0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e12:	600e      	str	r6, [r1, #0]
 8003e14:	d514      	bpl.n	8003e40 <_printf_i+0x1ac>
 8003e16:	07d9      	lsls	r1, r3, #31
 8003e18:	bf44      	itt	mi
 8003e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003e1e:	6023      	strmi	r3, [r4, #0]
 8003e20:	b91d      	cbnz	r5, 8003e2a <_printf_i+0x196>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f023 0320 	bic.w	r3, r3, #32
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	e7b0      	b.n	8003d90 <_printf_i+0xfc>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f043 0320 	orr.w	r3, r3, #32
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	2378      	movs	r3, #120	; 0x78
 8003e38:	4828      	ldr	r0, [pc, #160]	; (8003edc <_printf_i+0x248>)
 8003e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e3e:	e7e3      	b.n	8003e08 <_printf_i+0x174>
 8003e40:	065e      	lsls	r6, r3, #25
 8003e42:	bf48      	it	mi
 8003e44:	b2ad      	uxthmi	r5, r5
 8003e46:	e7e6      	b.n	8003e16 <_printf_i+0x182>
 8003e48:	4616      	mov	r6, r2
 8003e4a:	e7bb      	b.n	8003dc4 <_printf_i+0x130>
 8003e4c:	680b      	ldr	r3, [r1, #0]
 8003e4e:	6826      	ldr	r6, [r4, #0]
 8003e50:	6960      	ldr	r0, [r4, #20]
 8003e52:	1d1d      	adds	r5, r3, #4
 8003e54:	600d      	str	r5, [r1, #0]
 8003e56:	0635      	lsls	r5, r6, #24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	d501      	bpl.n	8003e60 <_printf_i+0x1cc>
 8003e5c:	6018      	str	r0, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <_printf_i+0x1d2>
 8003e60:	0671      	lsls	r1, r6, #25
 8003e62:	d5fb      	bpl.n	8003e5c <_printf_i+0x1c8>
 8003e64:	8018      	strh	r0, [r3, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	6123      	str	r3, [r4, #16]
 8003e6a:	4616      	mov	r6, r2
 8003e6c:	e7ba      	b.n	8003de4 <_printf_i+0x150>
 8003e6e:	680b      	ldr	r3, [r1, #0]
 8003e70:	1d1a      	adds	r2, r3, #4
 8003e72:	600a      	str	r2, [r1, #0]
 8003e74:	681e      	ldr	r6, [r3, #0]
 8003e76:	6862      	ldr	r2, [r4, #4]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f7fc f9a8 	bl	80001d0 <memchr>
 8003e80:	b108      	cbz	r0, 8003e86 <_printf_i+0x1f2>
 8003e82:	1b80      	subs	r0, r0, r6
 8003e84:	6060      	str	r0, [r4, #4]
 8003e86:	6863      	ldr	r3, [r4, #4]
 8003e88:	6123      	str	r3, [r4, #16]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e90:	e7a8      	b.n	8003de4 <_printf_i+0x150>
 8003e92:	6923      	ldr	r3, [r4, #16]
 8003e94:	4632      	mov	r2, r6
 8003e96:	4649      	mov	r1, r9
 8003e98:	4640      	mov	r0, r8
 8003e9a:	47d0      	blx	sl
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d0ab      	beq.n	8003df8 <_printf_i+0x164>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	079b      	lsls	r3, r3, #30
 8003ea4:	d413      	bmi.n	8003ece <_printf_i+0x23a>
 8003ea6:	68e0      	ldr	r0, [r4, #12]
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	bfb8      	it	lt
 8003eae:	4618      	movlt	r0, r3
 8003eb0:	e7a4      	b.n	8003dfc <_printf_i+0x168>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4632      	mov	r2, r6
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4640      	mov	r0, r8
 8003eba:	47d0      	blx	sl
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d09b      	beq.n	8003df8 <_printf_i+0x164>
 8003ec0:	3501      	adds	r5, #1
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	9903      	ldr	r1, [sp, #12]
 8003ec6:	1a5b      	subs	r3, r3, r1
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	dcf2      	bgt.n	8003eb2 <_printf_i+0x21e>
 8003ecc:	e7eb      	b.n	8003ea6 <_printf_i+0x212>
 8003ece:	2500      	movs	r5, #0
 8003ed0:	f104 0619 	add.w	r6, r4, #25
 8003ed4:	e7f5      	b.n	8003ec2 <_printf_i+0x22e>
 8003ed6:	bf00      	nop
 8003ed8:	0800407d 	.word	0x0800407d
 8003edc:	0800408e 	.word	0x0800408e

08003ee0 <_read_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d07      	ldr	r5, [pc, #28]	; (8003f00 <_read_r+0x20>)
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	4608      	mov	r0, r1
 8003ee8:	4611      	mov	r1, r2
 8003eea:	2200      	movs	r2, #0
 8003eec:	602a      	str	r2, [r5, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f7fc fd16 	bl	8000920 <_read>
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d102      	bne.n	8003efe <_read_r+0x1e>
 8003ef8:	682b      	ldr	r3, [r5, #0]
 8003efa:	b103      	cbz	r3, 8003efe <_read_r+0x1e>
 8003efc:	6023      	str	r3, [r4, #0]
 8003efe:	bd38      	pop	{r3, r4, r5, pc}
 8003f00:	2000013c 	.word	0x2000013c

08003f04 <_fstat_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4d07      	ldr	r5, [pc, #28]	; (8003f24 <_fstat_r+0x20>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	602b      	str	r3, [r5, #0]
 8003f12:	f7fc fd4a 	bl	80009aa <_fstat>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d102      	bne.n	8003f20 <_fstat_r+0x1c>
 8003f1a:	682b      	ldr	r3, [r5, #0]
 8003f1c:	b103      	cbz	r3, 8003f20 <_fstat_r+0x1c>
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	bf00      	nop
 8003f24:	2000013c 	.word	0x2000013c

08003f28 <_isatty_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4d06      	ldr	r5, [pc, #24]	; (8003f44 <_isatty_r+0x1c>)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	4604      	mov	r4, r0
 8003f30:	4608      	mov	r0, r1
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	f7fc fd49 	bl	80009ca <_isatty>
 8003f38:	1c43      	adds	r3, r0, #1
 8003f3a:	d102      	bne.n	8003f42 <_isatty_r+0x1a>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	b103      	cbz	r3, 8003f42 <_isatty_r+0x1a>
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	2000013c 	.word	0x2000013c

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
